#include "includes.h"

SysCfg sysCfg;

uint8_t server_ip[4]={139,159,133,76};
uint8_t	client_mac[6]={0x00, 0x08, 0xdc,0x05, 0xab, 0xcd}; 
     
/*
*********************************************************************************************************
 * 函数名：app_flash_ReadSysConfig
 * 描述  ：加载主机配置信息
 * 输入  ：无
 * 返回  : 
 *       ：SUCCESS,成功；ERROR，失败
*********************************************************************************************************
 */
ErrorStatus app_flash_LoadSysConfig(void)
{ 
	uint8_t i,j;
	uint8_t errcode;
	
	char DeviceID[16]={0};
	
	#if APP_DEBUG
	printf("Load system config...\r\n");
	#endif
	
	/*读取配置参数*/
	errcode=bsp_ReadCpuFlash(SYSCFG_ADDR,sysCfg.data,SYSTATALINFO_LEN);
	if(1==errcode)
	{
		#if APP_DEBUG
		printf("ReadSysConfig:Read list fail.\r\n");
		#endif
		return ERROR;   /*读取失败*/
	} 

	/*检查蓝牙基站器个数*/
	if(sysCfg.parameter.nrfcount>20)
	{
		#if APP_DEBUG
		printf("ReadSysConfig:nrfcount over limit.\r\n");
		#endif
		sysCfg.parameter.nrfcount=0;
	}
	
	/*考勤信标个数*/
	if(sysCfg.parameter.beacount>50)
	{
    #if APP_DEBUG
		printf("ReadSysConfig:beacount over limit.\r\n");
		#endif
		sysCfg.parameter.beacount=0;
	}

	/*没有被修改过，使用默认配置参数*/
	if(sysCfg.parameter.flag != CFG_HOLDER)  
	{
		/*拷贝默认配置*/
		memcpy(sysCfg.parameter.server_ip,server_ip,4);
		memcpy(sysCfg.parameter.client_mac,client_mac,6);
		
		sysCfg.parameter.server_port=SERVER_PORT;
	  
		#if APP_DEBUG
		printf("Use default config.\r\n");
	  #endif
	}
	else
	{
 	  #if APP_DEBUG
		printf("Use flash config.\r\n");
	  #endif
	}
	
	sprintf(DeviceID,"%02x%02x%02x%02x%02x%02x%02x%02x",0,0,sysCfg.parameter.client_mac[0],sysCfg.parameter.client_mac[1],
	sysCfg.parameter.client_mac[2],sysCfg.parameter.client_mac[3],sysCfg.parameter.client_mac[4],sysCfg.parameter.client_mac[5]);

	sysCfg.parameter.client_port=CLIENT_PORT;
	memcpy(sysCfg.parameter.client_id,DeviceID,strlen(DeviceID)+1);	
	
	/*订阅消息中加入设备信息*/  
	memcpy(&sms_topic[7],DeviceID,16);  
	memcpy(&base_topic[7],DeviceID,16);  	
	memcpy(&addrmanagement_topic[7],DeviceID,16);
	memcpy(&gateupdata_topic[7],DeviceID,16);
	memcpy(&softversion_topic[7],DeviceID,16);
	memcpy(&beaconmanagement_topic[7],DeviceID,16);
	memcpy(&userinfo_topic[7],DeviceID,16);
	
	#if APP_DEBUG
	/*打印设置参数*/
	printf("Server IP:");
	for(i=0;i<3;i++)
	{
		printf("%d",sysCfg.parameter.server_ip[i]);
		printf(".");
	}
	printf("%d",sysCfg.parameter.server_ip[3]);
	
	printf("      PORT:%d",sysCfg.parameter.server_port);
	printf("\r\n");
	
	printf("Client 	MAC:");
	for(i=0;i<6;i++)
	{
		printf("%2x ",sysCfg.parameter.client_mac[i]);
	}
	printf("\r\n");
	
	printf("Client id:%s\r\n",sysCfg.parameter.client_id);
	printf("Hardware version:%s\r\n",HARDWARE_VERSION);
	printf("Software version:%s\r\n",SOFTWARE_VERSION);
	
	printf("Nrf count:%d List:\r\n",sysCfg.parameter.nrfcount);
	for(i=0;i<sysCfg.parameter.nrfcount;i++)
	{
		for(j=0;j<8;j++)
		{
			printf("%2x ",sysCfg.parameter.nrfidlist[i][j]);
		}
		printf("\r\n");
	}
	
	printf("beacon count:%d List:\r\n",sysCfg.parameter.beacount);
	for(i=0;i<sysCfg.parameter.beacount;i++)
	{
		for(j=0;j<4;j++)
		{
			printf("%02x ",sysCfg.parameter.bealist[i][j]);
		}
		printf("\r\n");
	}
	printf("\r\n");
	printf("Ready to init net...\r\n");
	#endif
	
	return SUCCESS;
}

/*
*********************************************************************************************************
 * 函数名：app_flash_GetReaderList
 * 描述  ：获取蓝牙网关485 MAC蓝牙基站地址列表
 * 输入  ：Serialnumber,消息流水号
 * 返回  : 无
【传输方向】：蓝牙网关-->平台
【协议格式】：Len_l(1Byte)+Len_h(1Byte)+Msg_id(1Byte)+Dealtype(1Byte)+DeviceID(8Byte)+Dealresult(1Byte)
							Nrflist(8Byte)+Serialnumber(4Byte)+CRC(2Byte)
*********************************************************************************************************
 */
void app_flash_GetReaderList(uint8_t *Serialnumber)
{
	uint16_t crcdata,i;
	uint8_t addrinfo[256];
	
	addrinfo[0]=(sysCfg.parameter.nrfcount*8+15)%256;  /*有效数据个数*/
	addrinfo[1]=(sysCfg.parameter.nrfcount*8+15)/256;
	
	addrinfo[2]=ADDRBACK;    /*消息ID*/
  addrinfo[3]=0x00;        /*获取列表*/

  memset(&addrinfo[4],0,2);                            /*网关设备ID低字节补齐*/
	memcpy(&addrinfo[6],sysCfg.parameter.client_mac,6);  /*网关ID*/
	addrinfo[12]=sysCfg.parameter.nrfcount;              /*蓝牙网关个数*/
  memcpy(&addrinfo[13],sysCfg.parameter.nrfidlist,sysCfg.parameter.nrfcount*8);
	
	/*流水号*/
  memcpy(&addrinfo[sysCfg.parameter.nrfcount*8+13],Serialnumber,4);
	
	/*CRC校验*/
	crcdata=app_plat_usMBCRC16(addrinfo,addrinfo[0]+addrinfo[1]*256+2);
	memcpy(&addrinfo[sysCfg.parameter.nrfcount*8+17],(uint8_t *)&crcdata,2);
	
	if(!mqtt_publish( ADDRMANNABCD_TOPIC , (char *)addrinfo , addrinfo[0]+addrinfo[1]*256+4))
	{
		return;
	}
	
	#if APP_DEBUG
	printf("Nrfcount:%d Send Reader list data:\r\n",sysCfg.parameter.nrfcount);
	for(i=0;i<sysCfg.parameter.nrfcount*8+19;i++)
	{
		printf("%2x ",addrinfo[i]);
	}
	printf("\r\n");
  #endif
}

/*
*********************************************************************************************************
 * 函数名：app_flash_AddReader
 * 描述  ：增加新的蓝牙基站mac到flash中
 * 输入  ：
 *       ：Reader,添加的mac地址
 * 返回  : 
 *       ：SUCCESS,成功；ERROR，失败
【传输方向】：蓝牙网关-->平台
【协议格式】：Len_l(1Byte)+Len_h(1Byte)+Msg_id(1Byte)+Dealtype(1Byte)+DeviceID(8Byte)+Dealresult(1Byte)
							NrfID(8Byte)+Serialnumber(4Byte)+CRC(2Byte)
*********************************************************************************************************
 */
ErrorStatus app_flash_AddReader(uint8_t *Reader,uint8_t *Serialnumber)
{
	uint16_t crcdata;
	uint8_t i,j,err,failfalg=0;
	
	uint8_t checkdata[SYSTATALINFO_LEN];
	uint8_t backinfo[27]={0x17,0x00,0x2a};
	
	backinfo[2]=ADDRBACK;
	backinfo[3]=0x01;         /*插入一个地址*/
	
  memset(&backinfo[4],0,2);                            /*网关设备ID低字节补齐*/
	memcpy(&backinfo[6],sysCfg.parameter.client_mac,6);  /*网关ID*/
	memcpy(&backinfo[13],Reader,8);                      /*要插入的地址*/
  memcpy(&backinfo[21],Serialnumber,4);                /*流水号*/
	
	#if APP_DEBUG  /*插入之前的MAC地址列表*/
	printf("Add adrr:");
	for(i=0;i<8;i++)
	{
		printf("%2x ",Reader[i]);
	}
	printf("\r\nbefore add addr count:%d list:\r\n",sysCfg.parameter.nrfcount);
	for(i=0;i<sysCfg.parameter.nrfcount;i++)
	{
		for(j=0;j<8;j++)
		{
			printf("%2x ",sysCfg.parameter.nrfidlist[i][j]);
		}
		printf("\r\n");
	}
	#endif
	
	/*检查是否含有该基站设备*/
	for(i=0;i<sysCfg.parameter.nrfcount;i++)
	{
		/*该蓝牙网关下面含有该蓝牙基站*/
		if(0 == memcmp(Reader,sysCfg.parameter.nrfidlist[i],8))
		{
			/*PUBLIC*/
			backinfo[12]=0x00;
			crcdata=app_plat_usMBCRC16(backinfo,backinfo[0]+backinfo[1]*256+2);
			memcpy(&backinfo[25],(uint8_t *)&crcdata,2);
	
			if(mqtt_publish( ADDRMANNABCD_TOPIC , (char *)backinfo , backinfo[0]+backinfo[1]*256+4))
			{
				#if ERRORLOG
				ErrorLog(INFO,"AddReader:reader already existing");
				#endif
				return SUCCESS;
			}
			else
			{
			  #if APP_DEBUG 
				printf("reader already existing add reader back data Send fail!\r\n");  
				#endif
				return SUCCESS;
			}
		}
	}
	
	memcpy(&sysCfg.parameter.nrfidlist[sysCfg.parameter.nrfcount],Reader,8);  /*拷贝新蓝牙基站*/
  sysCfg.parameter.nrfcount++;  /*NRF个数加1*/
	sysCfg.parameter.flag=CFG_HOLDER;
	
	#if APP_DEBUG   /*插入之后的MAC地址列表*/
	printf("after add addr count:%d list:\r\n",sysCfg.parameter.nrfcount);
	for(i=0;i<sysCfg.parameter.nrfcount;i++)
	{
		for(j=0;j<8;j++)
		{
			printf("%2x ",sysCfg.parameter.nrfidlist[i][j]);
		}
		printf("\r\n");
	}
	#endif

	err=bsp_WriteCpuFlash(SYSCFG_ADDR,sysCfg.data,SYSTATALINFO_LEN);
	if(0!=err)      /*flash写入错误*/
	{ 
		failfalg=1;
		#if ERRORLOG
		ErrorLog(ERR,"AddReader:add addr write flash error");
		#endif
	}

	/*检查写入数据*/
	err=bsp_ReadCpuFlash(SYSCFG_ADDR,checkdata,SYSBASEINFO_LEN+sysCfg.parameter.nrfcount*8);
	if(1==err)
	{
		failfalg=1;
		#if ERRORLOG
		ErrorLog(ERR,"AddReader:add reader Read flash fail");
		#endif		
		return ERROR;   /*读取失败*/
	}
	
	/*比较写入数据与读出数据是否一致*/
	 for(i=0;i<(SYSBASEINFO_LEN+sysCfg.parameter.nrfcount*8);i++)
	 {
		 if(checkdata[i]!=sysCfg.data[i])
		 {
			 failfalg=1;
			 #if ERRORLOG
			 ErrorLog(ERR,"AddReader:add addr check data fail");
			 #endif	
			 break;
		}
	}

	if(1==failfalg)
	{
		/*写入数据错误*/
		backinfo[12]=0x01;           
		crcdata=app_plat_usMBCRC16(backinfo,backinfo[0]+backinfo[1]*256+2);
		memcpy(&backinfo[25],(uint8_t *)&crcdata,2);
		if(mqtt_publish( ADDRMANNABCD_TOPIC , (char *)backinfo , backinfo[0]+backinfo[1]*256+4))
		{
			#if APP_DEBUG 
			printf("add addr write flash error back data:\r\n");
			for(i=0;i<27;i++)
			{
				printf("%2x ",backinfo[i]);
			}
			printf("\r\n");
		  #endif
			return SUCCESS;
		}
		else
		{
			#if APP_DEBUG 
			printf("add addr write flash error back data send fail!\r\n");  
			#endif 
		}
		return ERROR;
	}

	backinfo[12]=0x02;           
	crcdata=app_plat_usMBCRC16(backinfo,backinfo[0]+backinfo[1]*256+2);
	memcpy(&backinfo[25],(uint8_t *)&crcdata,2);
	if(mqtt_publish( ADDRMANNABCD_TOPIC , (char *)backinfo , backinfo[0]+backinfo[1]*256+4))
	{
	 #if ERRORLOG
	 ErrorLog(INFO,"AddReader:add addr write flash success");
	 #endif
	 return SUCCESS;
	}
	else
	{
		#if APP_DEBUG 
		printf("add addr write flash success back data send fail!\r\n");  
		#endif
	}	 
	return SUCCESS;
}

/*
*********************************************************************************************************
 * 函数名：app_flash_DeteReader
 * 描述  ：删除MAC地址
 * 输入  ：
 *       ：Reader,删除的mac地址
 * 返回  : 
 *       ：SUCCESS,成功；ERROR，失败
【传输方向】：蓝牙网关-->平台
【协议格式】：Len_l(1Byte)+Len_h(1Byte)+Msg_id(1Byte)+Dealtype(1Byte)+DeviceID(8Byte)+Dealresult(1Byte)
							NrfID(8Byte)+Serialnumber(4Byte)+CRC(2Byte)
*********************************************************************************************************
 */
ErrorStatus app_flash_DeleReader(uint8_t *Reader,uint8_t *Serialnumber)
{
	uint8_t i,j,err;
	uint16_t crcdata;
	uint8_t failfalg=0;

	uint8_t table[8]={0};
	uint8_t checkdata[SYSTATALINFO_LEN];
	uint8_t backinfo[27]={0x17,0x00,0x2a};

	backinfo[2]=ADDRBACK;
	backinfo[3]=0x02;               /*删除一个地址*/

  memset(&backinfo[4],0,2);                            /*网关设备ID低字节补齐*/
	memcpy(&backinfo[6],sysCfg.parameter.client_mac,6);  /*网关ID*/
	memcpy(&backinfo[13],Reader,8);                      /*要删除的地址*/
  memcpy(&backinfo[21],Serialnumber,4);      					 /*流水号*/
	
	#if APP_DEBUG   /*删除之前的MAC地址列表*/
	printf("Dele adrr:");
	for(i=0;i<8;i++)
	{
		printf("%2x ",Reader[i]);
	}
	printf("\r\nbefore delete addr count:%d list:\r\n",sysCfg.parameter.nrfcount);
	for(i=0;i<sysCfg.parameter.nrfcount;i++)
	{
		for(j=0;j<8;j++)
		{
			printf("%2x ",sysCfg.parameter.nrfidlist[i][j]);
		}
		printf("\r\n");
	}
	#endif
	
	/*检查是否含有该蓝牙基站*/
	for(i=0;i<sysCfg.parameter.nrfcount;i++)
	{
		for(j=0;j<8;j++)
		{
			if(Reader[j]!=sysCfg.parameter.nrfidlist[i][j])
			{
				break;
			}
		}
		if(j==8)   /*该蓝牙网关下面含有该蓝牙基站 跳出查找*/
		{
		  #if APP_DEBUG 
			printf("find delete reader.\r\n");
			#endif
			break;
		}
	}
		
	/*没有要删除的蓝牙基站*/
	if(i==sysCfg.parameter.nrfcount)  
	{
		backinfo[12]=0x00;
		crcdata=app_plat_usMBCRC16(backinfo,backinfo[0]+backinfo[1]*256+2);
		memcpy(&backinfo[25],(uint8_t *)&crcdata,2);
		if(mqtt_publish( ADDRMANNABCD_TOPIC , (char *)backinfo , backinfo[0]+backinfo[1]*256+4))
		{
			#if ERRORLOG
		  ErrorLog(INFO,"DeletReader:not have delete reader");
		  #endif	
		}
		else
		{
			#if APP_DEBUG 
			printf("not have dele reader back data Send fail!\r\n"); 
		  #endif			
		}
		return ERROR;
	}
  
	for(j=0;j<(sysCfg.parameter.nrfcount-i-1);j++)   /*更新MAC地址列表*/
	{
		memcpy(table,sysCfg.parameter.nrfidlist[i+j+1],8);
		memcpy(sysCfg.parameter.nrfidlist[i+j],table,8);
	}
	
	sysCfg.parameter.nrfcount--;   /*个数减1*/
	sysCfg.parameter.flag=CFG_HOLDER;
	
	#if APP_DEBUG   /*删除后的MAC地址列表*/
	printf("after delete addr count:%d list:\r\n",sysCfg.parameter.nrfcount);
	for(i=0;i<sysCfg.parameter.nrfcount;i++)
	{
		for(j=0;j<8;j++)
		{
			printf("%2x ",sysCfg.parameter.nrfidlist[i][j]);
		}
		printf("\r\n");
	}
	#endif

	err=bsp_WriteCpuFlash(SYSCFG_ADDR,sysCfg.data,SYSTATALINFO_LEN);
	if(0!=err)      /*flash写入错误*/
	{ 
		failfalg=1;
		#if APP_DEBUG
		ErrorLog(	ERR ,"DeletReader:delete addr write flash error");
		#endif	
	}

	/*检查写入数据*/
	err=bsp_ReadCpuFlash(SYSCFG_ADDR,checkdata,SYSBASEINFO_LEN+sysCfg.parameter.nrfcount*8);
	if(1==err)
	{
		failfalg=1;
		#if APP_DEBUG
		ErrorLog(	ERR ,"DeletReader:delete reader Read flash fail");
		#endif	
		return ERROR;   /*读取失败*/
	}

	 for(i=0;i<(SYSBASEINFO_LEN+sysCfg.parameter.nrfcount*8);i++)
	 {
		 if(checkdata[i]!=sysCfg.data[i])
		 {
			 failfalg=1;
			 #if APP_DEBUG
			 ErrorLog(	ERR ,"DeletReader:delete addr check data fail");
			 #endif	
			 break;
		}
	}

	if(1==failfalg)
	{
		/*写入数据错误*/
		backinfo[12]=0x01;           
		crcdata=app_plat_usMBCRC16(backinfo,backinfo[0]+backinfo[1]*256+2);
		memcpy(&backinfo[25],(uint8_t *)&crcdata,2);
		if(mqtt_publish( ADDRMANNABCD_TOPIC , (char *)backinfo , backinfo[0]+backinfo[1]*256+4))
		{
  	  #if APP_DEBUG	
			printf("delete addr write flash error back data:\r\n");
			for(i=0;i<27;i++)
			{
				printf("%2x ",backinfo[i]);
			}
			printf("\r\n");
			#endif
			return SUCCESS;
		}
		else
		{
  	  #if APP_DEBUG
			printf("delete addr write flash error back data send fail!\r\n");  
		  #endif
		}
		return ERROR;
	}

	backinfo[12]=0x02;
	crcdata=app_plat_usMBCRC16(backinfo,backinfo[0]+backinfo[1]*256+2);
	memcpy(&backinfo[25],(uint8_t *)&crcdata,2);
	if(mqtt_publish( ADDRMANNABCD_TOPIC , (char *)backinfo , backinfo[0]+backinfo[1]*256+4))
	{
	 #if ERRORLOG
	 ErrorLog(	INFO ,"DeletReader:delete reader success");
	 #endif		
	} 
	else
	{
	  #if APP_DEBUG
		printf("delete reader success back data Send fail!\r\n");  
	  #endif
	}
	 
	return SUCCESS;
}

/*
*********************************************************************************************************
 * 函数名：app_flash_SetDeviceIPandPORT
 * 描述  ：设置连接服务器的端口和IP
 * 输入  ：
 *       ：ip,配置服务器ip，port，服务器端口
 * 返回  : 
 *       ：SUCCESS,成功；ERROR，失败
*********************************************************************************************************
 */
ErrorStatus app_flash_SetDeviceIPandPORT(uint8_t *ip , uint16_t port)
{
	uint8_t check[SYSBASEINFO_LEN];
	uint8_t i,errcode;

	memcpy(sysCfg.parameter.server_ip,ip,4);
	sysCfg.parameter.server_port=port;
	sysCfg.parameter.flag=CFG_HOLDER;

	errcode=bsp_WriteCpuFlash(SYSCFG_ADDR,sysCfg.data,SYSTATALINFO_LEN);
	if(1==errcode)
  {
	  #if ERRORLOG
	  ErrorLog(	ERR ,"SetDeviceIPandPORT:data len error or adrr error");
	  #endif		
		return ERROR;
  }
  else if(2==errcode)
  {
	  #if ERRORLOG
	  ErrorLog(	ERR ,"SetDeviceIPandPORT:Write flash error");
	  #endif		
		return ERROR;
  }	

	errcode=bsp_ReadCpuFlash(SYSCFG_ADDR,check,SYSBASEINFO_LEN);
	if(1==errcode)
	{
	  #if ERRORLOG
	  ErrorLog(	ERR ,"SetDeviceIPandPORT ReadSysConfig:Read flash fail");
	  #endif		
		return ERROR;   /*读取失败*/
	}

	for(i=0;i<SYSBASEINFO_LEN;i++)
	{ 
		if(sysCfg.data[i]!=check[i])
		{
			#if ERRORLOG
			ErrorLog(	ERR ,"SetDeviceIPandPORT:set ip and port fail");
			#endif		
			return ERROR; 
		}
	}

	#if APP_DEBUG
	printf("SET IP:");
	for(i=0;i<4;i++)
	{
		printf("%d ",sysCfg.parameter.server_ip[i]);
	}
	printf("  PORT:%d\r\n",sysCfg.parameter.server_port);
	printf("Set SUCCESS.\r\n");
	#endif
	
	return SUCCESS;
}

/*
*********************************************************************************************************
 * 函数名：app_flash_SetDeviceClient
 * 描述  ：设置客户端MAC和客户端ID
 * 输入  ：
 *       ：client_mac,配置客户端mac，client_id，客户端id
 * 返回  : 
 *       ：SUCCESS,成功；ERROR，失败
*********************************************************************************************************
 */
ErrorStatus app_flash_SetDeviceClient(uint8_t *client_mac , char *client_id)
{
	uint8_t i;
	uint8_t errcode;
	uint8_t check[SYSBASEINFO_LEN];
	
	memcpy(sysCfg.parameter.client_mac,client_mac,6);
	memcpy(sysCfg.parameter.client_id,client_id,8);
	sysCfg.parameter.flag=CFG_HOLDER;
	
	errcode=bsp_WriteCpuFlash(SYSCFG_ADDR,sysCfg.data,SYSTATALINFO_LEN);
	if(1==errcode)
  {
		#if ERRORLOG
		ErrorLog(	ERR ,"SetDeviceClient:data len error or adrr error");
		#endif
		return ERROR;
  }
  else if(2==errcode)
  {
		#if ERRORLOG
		ErrorLog(	ERR ,"SetDeviceClient:Write flash error");
		#endif
		return ERROR;
  }	
	
	errcode=bsp_ReadCpuFlash(SYSCFG_ADDR,check,SYSBASEINFO_LEN);
	if(1==errcode)
	{
		#if ERRORLOG
		ErrorLog(	ERR ,"SetDeviceClient ReadSysConfig:Read flash fail");
		#endif
		return ERROR;   /*读取失败*/
	}

	for(i=0;i<SYSBASEINFO_LEN;i++)
	{ 
		if(sysCfg.data[i]!=check[i])
		{
			#if ERRORLOG
			ErrorLog(	ERR ,"SetDeviceClient:set client mac and id fail");
			#endif
			return ERROR; 
		}
	}
	
	#if APP_DEBUG
	printf("SET MAC:");
	for(i=0;i<6;i++)
	{
		printf("%2x ",sysCfg.parameter.client_mac[i]);
	}
	printf("  ID:%s\r\n",sysCfg.parameter.client_id);
	printf("Set SUCCESS.\r\n");
	#endif
	
	return SUCCESS;
}

/*
*********************************************************************************************************
 * 函数名：app_flash_GetBeaconList
 * 描述  ：获取蓝牙网关考勤信标列表
 * 输入  ：Serialnumber,消息流水号
 * 返回  : 无
【传输方向】：蓝牙网关-->平台
【协议格式】：Len_l(1Byte)+Len_h(1Byte)+Msg_id(1Byte)+Dealtype(1Byte)+BeaconList(NByte)+Dealresult(1Byte)
							Serialnumber(4Byte)+CRC(2Byte)
*********************************************************************************************************
 */
void app_flash_GetBeaconList(uint8_t *Serialnumber)
{
	uint16_t crcdata,i;
	uint8_t bealistinfo[256];
	
	bealistinfo[0]=(sysCfg.parameter.beacount*4+11)%256;  /*数据区长度（高）*/
	bealistinfo[1]=(sysCfg.parameter.beacount*4+11)/256;  /*数据区长度（低）*/
	
	bealistinfo[2]=BEACONBACK;    /*消息ID*/
  bealistinfo[3]=0x00;          /*获取列表*/

  memset(&bealistinfo[4],0,2);                           	/*网关设备ID低字节补齐*/
	memcpy(&bealistinfo[6],sysCfg.parameter.client_mac,6); 	/*网关ID*/
	bealistinfo[12]=sysCfg.parameter.beacount;              /*考勤信标个数*/
  memcpy(&bealistinfo[13],(uint8_t *)sysCfg.parameter.bealist,sysCfg.parameter.beacount*4);
	memcpy(&bealistinfo[sysCfg.parameter.beacount*4+13],Serialnumber,4);            /*流水号*/
	
	crcdata=app_plat_usMBCRC16(bealistinfo,bealistinfo[0]+bealistinfo[1]*256+2);    /*CRC校验*/
	memcpy(&bealistinfo[bealistinfo[0]+bealistinfo[1]*256+2],(uint8_t *)&crcdata,2);
	if(!mqtt_publish( BAECON_TOPIC , (char *)bealistinfo , bealistinfo[0]+bealistinfo[1]*256+4))
	{
		return;
	}
	
	#if APP_DEBUG
	printf("beacount:%d Send beacon list data:\r\n",sysCfg.parameter.beacount);
	for(i=0;i<bealistinfo[0]+bealistinfo[1]*256+4;i++)
	{
		printf("%02x ",bealistinfo[i]);
	}
	printf("\r\n");
	#endif
}

/*
*********************************************************************************************************
 * 函数名：app_flash_AddBeacon
 * 描述  ：增加新的考勤信标到flash中
 * 输入  ：
 *       ：beacon,添加的考勤信标
 * 返回  : 
 *       ：SUCCESS,成功；ERROR，失败
【传输方向】：蓝牙网关-->平台
【协议格式】：Len_l(1Byte)+Len_h(1Byte)+Msg_id(1Byte)+Dealtype(1Byte)+DeviceID(8Byte)+Dealresult(1Byte)
							NrfID(8Byte)+Serialnumber(4Byte)+CRC(2Byte)
*********************************************************************************************************
 */
ErrorStatus app_flash_AddBeacon(uint8_t *beacon,uint8_t *Serialnumber)
{
	uint16_t crcdata;
	uint8_t i,j,err,failfalg=0;
	
	uint8_t checkdata[SYSBASEINFO_LEN];
	
	uint8_t backinfo[23]={0x13,0x00,0x2a};
	
	backinfo[2]=BEACONBACK;
	backinfo[3]=0x01;                                    /*插入蓝牙信标*/
	
  memset(&backinfo[4],0,2);                            /*网关设备ID低字节补齐*/
	memcpy(&backinfo[6],sysCfg.parameter.client_mac,6);  /*网关ID*/
	memcpy(&backinfo[13],beacon,4);                      /*要插入的地址*/
  memcpy(&backinfo[17],Serialnumber,4);                /*流水号*/
	
	#if APP_DEBUG  /*插入之前的MAC地址列表*/
	printf("Add beacon:");
	for(i=0;i<4;i++)
	{
		printf("%02x ",beacon[i]);
	}
	printf("\r\n");
	printf("before add beacon count:%d list:\r\n",sysCfg.parameter.beacount);
	for(i=0;i<sysCfg.parameter.beacount;i++)
	{
		for(j=0;j<4;j++)
		{
			printf("%02x ",sysCfg.parameter.bealist[i][j]);
		}
		printf("\r\n");
	}
	#endif
	
	/*检查是否含有考勤信标*/
	for(i=0;i<sysCfg.parameter.beacount;i++)
	{
		/*该蓝牙网关下面含有考勤信标*/
		for(j=0;j<4;j++)
		{
			if(beacon[j]!=sysCfg.parameter.bealist[i][j])
			{
				break;
			}
		}
		
		if(j==4)   /*蓝牙网关下有该考勤信标*/
		{
			backinfo[12]=0x00;
			crcdata=app_plat_usMBCRC16(backinfo,backinfo[0]+backinfo[1]*256+2);
			memcpy(&backinfo[21],(uint8_t *)&crcdata,2);
			
			if(mqtt_publish( BAECON_TOPIC , (char *)backinfo , backinfo[0]+backinfo[1]*256+4))
			{
				#if ERRORLOG
				ErrorLog(INFO,"Addbea:beacon already existing");
				#endif
				return SUCCESS;
			}
			else
			{
		  	#if APP_DEBUG
				printf("beacon already existing add beacon back data Send fail!\r\n");  
			  #endif
				return SUCCESS;
			}
		}
	}
	
	memcpy(&sysCfg.parameter.bealist[sysCfg.parameter.beacount],beacon,4);  /*拷贝新蓝牙基站*/
  sysCfg.parameter.beacount++;  /*NRF个数加1*/
	sysCfg.parameter.flag=CFG_HOLDER;
	
	#if APP_DEBUG  /*插入之后的MAC地址列表*/
	printf("after add beacon count:%d list:\r\n",sysCfg.parameter.beacount);
	for(i=0;i<sysCfg.parameter.beacount;i++)
	{
		for(j=0;j<4;j++)
		{
			printf("%02x ",sysCfg.parameter.bealist[i][j]);
		}
		printf("\r\n");
	}
	#endif

	err=bsp_WriteCpuFlash(SYSCFG_ADDR,sysCfg.data,SYSTATALINFO_LEN);
	if(0!=err)      /*flash写入错误*/
	{ 
		failfalg=1;
		#if ERRORLOG
		ErrorLog(ERR,"Addbea:add beacon write flash error");
		#endif
	}

	/*检查写入数据*/
	err=bsp_ReadCpuFlash(SYSCFG_ADDR,checkdata,SYSBASEINFO_LEN);
	if(1==err)
	{
		failfalg=1;
		#if ERRORLOG
		ErrorLog(ERR,"Addbea:add beacon Read flash fail");
		#endif		
		return ERROR;   /*读取失败*/
	}
	
	/*比较写入数据与读出数据是否一致*/
	 for(i=0;i<(SYSBASEINFO_LEN);i++)
	 {
		 if(checkdata[i]!=sysCfg.data[i])
		 {
			 failfalg=1;
			 #if ERRORLOG
			 ErrorLog(ERR,"Addbea:add beacon check data fail");
			 #endif	
			 break;
		}
	}

	if(1==failfalg)
	{
		/*写入数据错误*/
		backinfo[12]=0x01;           
		crcdata=app_plat_usMBCRC16(backinfo,backinfo[0]+backinfo[1]*256+2);
		memcpy(&backinfo[21],(uint8_t *)&crcdata,2);

		if(mqtt_publish( BAECON_TOPIC , (char *)backinfo , backinfo[0]+backinfo[1]*256+4))
		{
			#if APP_DEBUG
			printf("add beacon write flash error back data:\r\n");
		  #endif
			return SUCCESS;
		}
		else
		{
		  #if APP_DEBUG
			printf("add beacon write flash error back data send fail!\r\n");  
		  #endif
		}
		return ERROR;
	}

	backinfo[12]=0x02;           
	crcdata=app_plat_usMBCRC16(backinfo,backinfo[0]+backinfo[1]*256+2);
	memcpy(&backinfo[21],(uint8_t *)&crcdata,2);
	
	if(mqtt_publish( BAECON_TOPIC , (char *)backinfo , backinfo[0]+backinfo[1]*256+4))
	{
		#if ERRORLOG
		ErrorLog(INFO,"Addbea:add beacon write flash success");
		#endif
		return SUCCESS;
	}
	else
	{
		#if APP_DEBUG	
	  printf("add beacon write flash success back data send fail!\r\n"); 
		#endif		
	}	 
	return SUCCESS;
}

/*
*********************************************************************************************************
 * 函数名：app_flash_DeteReader
 * 描述  ：删除考勤信标
 * 输入  ：
 *       ：beacon,删除的beacon
 * 返回  : 
 *       ：SUCCESS,成功；ERROR，失败
【传输方向】：蓝牙网关-->平台
【协议格式】：Len_l(1Byte)+Len_h(1Byte)+Msg_id(1Byte)+Dealtype(1Byte)+DeviceID(8Byte)+Dealresult(1Byte)
							NrfID(8Byte)+Serialnumber(4Byte)+CRC(2Byte)
*********************************************************************************************************
 */
ErrorStatus app_flash_DeleBeacon(uint8_t *beacon,uint8_t *Serialnumber)
{
	uint8_t i,j,err;
	uint16_t crcdata;
	uint8_t failfalg=0;

	uint8_t table[8]={0};
	uint8_t checkdata[SYSBASEINFO_LEN];
	uint8_t backinfo[23]={0x13,0x00,0x2a};

	backinfo[2]=BEACONBACK;
	backinfo[3]=0x02;               /*删除一个考勤信标*/

  memset(&backinfo[4],0,2);                            /*网关设备ID低字节补齐*/
	memcpy(&backinfo[6],sysCfg.parameter.client_mac,6);  /*网关ID*/
	memcpy(&backinfo[13],beacon,4);                      /*要删除的地址*/
  memcpy(&backinfo[17],Serialnumber,4);      					 /*流水号*/
	
	#if APP_DEBUG  /*删除之前的MAC地址列表*/
	printf("Dele bea:");
	for(i=0;i<4;i++)
	{
		printf("%02x ",beacon[i]);
	}
	printf("\r\nbefore delete beacon count:%d list:\r\n",sysCfg.parameter.beacount);
	for(i=0;i<sysCfg.parameter.beacount;i++)
	{
		for(j=0;j<4;j++)
		{
			printf("%02x ",sysCfg.parameter.bealist[i][j]);
		}
		printf("\r\n");
	}
	#endif
	
	/*检查是否含有该蓝牙基站*/
	for(i=0;i<sysCfg.parameter.beacount;i++)
	{
		for(j=0;j<4;j++)
		{
			if(beacon[j]!=sysCfg.parameter.bealist[i][j])
			{
				break;
			}
		}
		if(j==4)   /*该蓝牙网关下面含有该蓝牙基站 跳出查找*/
		{
		  #if APP_DEBUG
			printf("find delete beacon.\r\n");
			#endif
			break;
		}
	}
		
	/*没有要删除的蓝牙基站*/
	if(i==sysCfg.parameter.beacount)  
	{
		backinfo[12]=0x00;
		crcdata=app_plat_usMBCRC16(backinfo,backinfo[0]+backinfo[1]*256+2);
		memcpy(&backinfo[21],(uint8_t *)&crcdata,2);
		
		if(mqtt_publish( BAECON_TOPIC , (char *)backinfo , backinfo[0]+backinfo[1]*256+4))
		{
			#if ERRORLOG
		  ErrorLog(INFO,"Delebeacon:not have delete beacon");
		  #endif	
		}
		else
		{
		  #if APP_DEBUG
			printf("not have dele beacon back data Send fail!\r\n");  
		  #endif
		}
		return ERROR;
	}
  
	for(j=0;j<(sysCfg.parameter.beacount-i-1);j++)   /*更新beacon列表*/
	{
		memcpy(table,sysCfg.parameter.bealist[i+j+1],4);
		memcpy(sysCfg.parameter.bealist[i+j],table,4);
	}
	
	sysCfg.parameter.beacount--;   /*个数减1*/
	sysCfg.parameter.flag=CFG_HOLDER;
	
	#if APP_DEBUG   /*删除后的MAC地址列表*/
	printf("after delete beacon count:%d list:\r\n",sysCfg.parameter.beacount);
	for(i=0;i<sysCfg.parameter.beacount;i++)
	{
		for(j=0;j<4;j++)
		{
			printf("%02x ",sysCfg.parameter.bealist[i][j]);
		}
		printf("\r\n");
	}
	#endif

	err=bsp_WriteCpuFlash(SYSCFG_ADDR,sysCfg.data,SYSTATALINFO_LEN);
	if(0!=err)      /*flash写入错误*/
	{ 
		failfalg=1;
		#if APP_DEBUG
		ErrorLog(	ERR ,"DeleBeacon:delete beacon write flash error");
		#endif	
	}

	/*检查写入数据*/
	err=bsp_ReadCpuFlash(SYSCFG_ADDR,checkdata,SYSBASEINFO_LEN);
	if(1==err)
	{
		failfalg=1;
		#if APP_DEBUG
		ErrorLog(	ERR ,"DeleBeacon:delete beacon Read flash fail");
		#endif	
		return ERROR;   /*读取失败*/
	}

	 for(i=0;i<(SYSBASEINFO_LEN);i++)
	 {
		 if(checkdata[i]!=sysCfg.data[i])
		 {
			 failfalg=1;
			 #if APP_DEBUG
			 ErrorLog(	ERR ,"DeleBeacon:delete beacon check data fail");
			 #endif	
			 break;
		}
	}

	if(1==failfalg)
	{
		/*写入数据错误*/
		backinfo[12]=0x01;           
		crcdata=app_plat_usMBCRC16(backinfo,backinfo[0]+backinfo[1]*256+2);
		memcpy(&backinfo[21],(uint8_t *)&crcdata,2);
		
		if(mqtt_publish( BAECON_TOPIC , (char *)backinfo , backinfo[0]+backinfo[1]*256+4))
		{
		  #if APP_DEBUG
			printf("delete beacon write flash error back data:\r\n");
			for(i=0;i<backinfo[0]+backinfo[1]*256+4;i++)
			{
				printf("%02x ",backinfo[i]);
			}
			printf("\r\n");
			#endif
			return SUCCESS;
		}
		else
		{
		  #if APP_DEBUG
			printf("delete beacon write flash error back data send fail!\r\n");
      #endif			
		}
		return ERROR;
	}

	backinfo[12]=0x02;
	crcdata=app_plat_usMBCRC16(backinfo,backinfo[0]+backinfo[1]*256+2);
	memcpy(&backinfo[21],(uint8_t *)&crcdata,2);

	if(mqtt_publish( BAECON_TOPIC , (char *)backinfo , backinfo[0]+backinfo[1]*256+4))
	{
		#if ERRORLOG
		ErrorLog(	INFO ,"Delebeacon:delete beacon success");
		#endif		
	} 
	else
	{
    #if APP_DEBUG
		printf("delete beacon success back data Send fail!\r\n");  
    #endif
	}
	 
	return SUCCESS;
}

