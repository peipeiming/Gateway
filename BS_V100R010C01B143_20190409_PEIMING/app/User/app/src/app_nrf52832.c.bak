#include "includes.h"

static uint8_t Receivedata[256];   /*NRF数据缓存*/
static uint16_t BraceletNumber=0;  /*SRAM中缓存的手环记录条数*/

/*
*********************************************************************************************************
 * 函数名：app_nrf_ReadData
 * 描述  ：nrf串口数据解析
 * 输入  ：无
 * 返回  : 
 *       ：SUCCESS,成功；ERROR,失败
*********************************************************************************************************
 */
static ErrorStatus app_nrf_ReadData(void)
{
	uint8_t i,len,dataflag,check_results; 
	uint8_t Receivebuf[256];
	
	while(1)    //从fifo中寻找待返回的有效数据
	{
		len=0;
		dataflag=0;
		memset(Receivedata,0,256);
		while(comGetChar(NRF_PORT,&Receivebuf[len++]))
		{ 
			if(0x5a==Receivebuf[len-1])
			{
				dataflag=1;
				break;
			}
			len%=255;
		}
		if(!dataflag)         //已读空fifo
		{
			return ERROR;   
		}
  
		memset(Receivebuf,0,256);
		Receivebuf[0]=0x5a;
		for(i=1;i<4;i++)      //接收数据头
		{
			comGetChar(NRF_PORT,&Receivebuf[i]);
		}
		len=Receivebuf[2]*256+Receivebuf[3];
		if(len>240)
		{
			continue;     			/*防止数组访问越界*/
		}
		
		for(i=0;i<len+2;i++)  //有效数据
		{
			comGetChar(NRF_PORT,&Receivebuf[4+i]);
		}
				
		if(0xca!=Receivebuf[len+5])  //判断是否为结束符号
		{
			continue;
		}
		
		check_results=Receivebuf[1];                                  
		for(i=2;(i<len+4);i++)     				     //CMD字段到数据字段进行校验 第一个2：表示偏移 第二个2：固定字符长度
		{
			check_results^=Receivebuf[i];
		}
		
		if(check_results==Receivebuf[4+len])   //检查校验
		{			
			memcpy(Receivedata,Receivebuf,len+6);
			return SUCCESS;
		}
  }
}

/*
*********************************************************************************************************
 * 函数名：app_nrf_AttendanceDetermine
 * 描述  ：考勤判断算法
 * 输入  ：
 *       : station,基站地址
 *       : location,位置数据
 *       : bracelet,手环
 *       : sramaddr,手环历史数据位置
 * 返回  : 
 *       ：SUCCESS,成功；ERROR,失败
*********************************************************************************************************
 */
static void app_nrf_AttendanceDetermine(uint8_t *station , uint8_t *location , uint8_t *bracelet , uint8_t sramaddr)
{
	uint8_t i=0,j=0;
	uint8_t *pBytes;
	pBytes = (uint8_t *)EXT_SRAM_ADDR;          /*外部SRAM地址*/
	
	for(i=0;i<sysCfg.parameter.beacount;i++)
	{		
		if(location[1] == (sysCfg.parameter.bealist[i][0]+sysCfg.parameter.bealist[i][1]*256))
		{
			for(j=0;i<sysCfg.parameter.beacount;i++)
			{
				if(location[3] == (sysCfg.parameter.bealist[i][2]+sysCfg.parameter.bealist[i][3]*256))
				{	
					/*进门考勤*/
					#if NRF_DEBUG
					for(j=0;j<6;j++)
					{
						printf("%02x ",bracelet[j]);
					}
					printf("Attendance:in   ");
					for(j=0;j<8;j++)
					{
						printf("%02x ",station[j]);
					}
					printf("\r\n");
					#endif
					app_plat_AttendancePublish( bracelet , location , station , 1 );
					break;
			  }
			}
			return;
		}
		else if(location[1] == (sysCfg.parameter.bealist[i][2]+sysCfg.parameter.bealist[i][3]*256))
		{
			for(i=0;i<sysCfg.parameter.beacount;i++)
			{
				if(location[3] == (sysCfg.parameter.bealist[i][0]+sysCfg.parameter.bealist[i][1]*256))
				{	
					/*进门考勤*/
					#if NRF_DEBUG
					for(j=0;j<6;j++)
					{
						printf("%02x ",bracelet[j]);
					}
					printf("Attendance:out   ");
					for(j=0;j<8;j++)
					{
						printf("%02x ",station[j]);
					}
					printf("\r\n");
					#endif
					app_plat_AttendancePublish( bracelet , location , station , 2 );
					break;
			  }
			}
			return;
		}
	}
}

/*
************************************************************************************************************
 * 函数名：app_nrf_GapInfoGet
 * 描述  ：获取广播数据
 * 输入  ：
 *       : station,基站地址
 * 返回  : 无
 * 传输方向 ：蓝牙网关-->蓝牙基站
【协议格式】：起始(1Byte)+消息ID(1Byte)+有效信息长度(2Byte)+要获取广播的读头ID(8Byte)+校验(1Byte)+结束(1Byte)
 *   合计   : 14(Byte)
************************************************************************************************************
 */
void app_nrf_GetBleData(uint8_t *station)
{
	uint8_t i=0;
	uint8_t check_results=0;
	uint8_t Sendbuf[14]={0x5A,0x41,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0xCA};

	Sendbuf[1]=GETBLEDATA;        /*消息ID*/
	memcpy(&Sendbuf[4],station,8);   /*读头地址*/
	
	check_results=Sendbuf[1];
	for(i=2;i<(Sendbuf[3]+2+3-1);i++)   //CMD字段到数据字段进行校验
		check_results^=Sendbuf[i];
	Sendbuf[i]=check_results;           //校验值
	Sendbuf[i+1]=0xca;                  //结束符
	
	comSendBuf( NRF_PORT , Sendbuf , 14 );       //发送数据包
}

/*
*********************************************************************************************************
 * 函数名：app_nrf_ConnectBle
 * 描述  ：连接目标手环
 * 输入  ：
 *       : station,基站地址
 *       : bracelet,手环
 * 返回  : 
 *       ：SUCCESS,成功；ERROR,失败
 * 传输方向 ：蓝牙网关-->蓝牙基站
【协议格式】：起始(1Byte)+消息ID(1Byte)+有效信息长度(2Byte)+读头ID(8Byte)+手环MAC地址(6Byte)
+校验(1Byte)+结束(1Byte)
 *   合计   : 20(Byte)
*********************************************************************************************************
 */
ErrorStatus app_nrf_ConnectBle(uint8_t *station,uint8_t *bracelet)
{
	uint8_t i=0;
	uint8_t count=0;
	uint8_t check_results=0;
	uint8_t Sendbuf[20]={0x5A,0x42,0x00,0x0E,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
	
	Sendbuf[1]=CONNECTBLE;              /*消息ID*/
	 
	memcpy(&Sendbuf[4],station,8);      /*基站地址*/
	memcpy(&Sendbuf[12],bracelet,6);    /*MAC地址*/
		                            
	check_results=Sendbuf[1];   
	for(i=2;i<(Sendbuf[3]+2+3-1);i++)   //CMD字段到数据字段进行校验
		check_results^=Sendbuf[i];
	Sendbuf[i]=check_results;           //校验值
	Sendbuf[i+1]=0xca;                  //结束符	
		
	comClearRxFifo(NRF_PORT);			      //发送数据包
	comSendBuf( NRF_PORT , Sendbuf , 20 );  	
  
	while(count<30)                     //等待响应
	{
		vTaskDelay(1000);
		IWDG_Feed();
		if(SUCCESS == app_nrf_ReadData())
		{ 
			for(i=0;i<sizeof(Sendbuf);i++)
			{
				if(Receivedata[i]!=Sendbuf[i])
				{
					break;
				}
			}
			if(sizeof(Sendbuf)==i)
			{
				return SUCCESS;
			}
		}
		count++;
  }	
  
	#if NRF_DEBUG
	printf("app_nrf_LinkTargetBracelet:no responsed!\r\n");
	#endif
	return ERROR;
}

/*
**************************************************************************************************
 * 函数名：app_nrf_DisconnectBle
 * 描述  ：断开蓝牙连接
 *       : station,基站地址
 * 返回  : 
 *       ：SUCCESS,成功；ERROR,失败
 * 传输方向 ：蓝牙网关-->蓝牙基站
【协议格式】：起始(1Byte)+消息ID(1Byte)+有效信息长度(2Byte)+读头ID(8Byte)+校验(1Byte)+结束(1Byte)
**************************************************************************************************
*/
ErrorStatus app_nrf_DisconnectBle(uint8_t *station)
{
	uint8_t i=0;
	uint8_t check_results=0;
	uint8_t Sendbuf[14]={0x5A,0x40,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
	
	memcpy(&Sendbuf[4],station,8);
	
	Sendbuf[1]=DISCONNECTBLE;
	check_results=Sendbuf[1];   
	for(i=2;i<(Sendbuf[3]+2+3-1);i++)   //CMD字段到数据字段进行校验
	{
		check_results^=Sendbuf[i];
	}
	Sendbuf[12]=check_results;          //校验值
	Sendbuf[13]=0xca;                   //结束符	
	
  comClearRxFifo(NRF_PORT);			      //清空缓存
	
	for(i=0;i<10;i++)
	{
		comSendBuf( NRF_PORT , Sendbuf , Sendbuf[2]*256+Sendbuf[3]+6 );  	 //发送数据
		vTaskDelay(500);
		IWDG_Feed();
		if(SUCCESS == app_nrf_ReadData())
		{ 
			for(i=0;i<sizeof(Sendbuf);i++)
			{
				if(Receivedata[i]!=Sendbuf[i])
				{
					break;
				}
			}
			if(sizeof(Sendbuf)==i)
			{
				return SUCCESS;
			}
		}
	}
	return ERROR;
}

/*
*********************************************************************************************************
 * 函数名：app_nrf_LeaveMessage
 * 描述  ：手环信息留言
 * 输入  ：
 *       : station,基站地址
 *       ：message，留言信息数据
 *       ：len，留言信息数据长度
 * 返回  : 
 *       ：SUCCESS,成功；ERROR,失败
 * 传输方向 ：蓝牙网关-->蓝牙基站
【协议格式】：起始(1Byte)+消息ID(1Byte)+有效信息长度(2Byte)+读头ID(8Byte)+消息内容(NByte)
+校验(1Byte)+结束(1Byte)
*********************************************************************************************************
 */
ErrorStatus app_nrf_LeaveMessage(uint8_t *station,uint8_t *message,uint16_t len)
{
	uint8_t i=0;
	uint8_t check_results=0;
	uint8_t Sendbuf[1024]={0x5A,0x43,0x00,0x0E,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x20,0x05};
  
	Sendbuf[1]=SEND_MESSAGE;            /*消息ID*/
	
  Sendbuf[2]=(len+8)/256;               
  Sendbuf[3]=(len+8)%256;

	memcpy(&Sendbuf[4],station,8);      /*基站设备地址*/
	memcpy(&Sendbuf[12],message,len);   /*消息*/
	
	check_results=Sendbuf[1];   
	for(i=2;i<(Sendbuf[3]+2+3-1);i++)   //CMD字段到数据字段进行校验
	{
		check_results^=Sendbuf[i];
	}
	Sendbuf[len+8+4]=check_results;     //校验值
	Sendbuf[len+8+5]=0xca;              //结束符
		
	comClearRxFifo(NRF_PORT);   				//清空接收缓冲
	comClearTxFifo(NRF_PORT);           //清空发送缓冲
	
	comSendBuf( NRF_PORT , Sendbuf , Sendbuf[2]*256+Sendbuf[3]+6 );        
	
	for(i=0;i<30;i++)                   //等待响应
	{
		IWDG_Feed();
		vTaskDelay(1000);
		if(SUCCESS == app_nrf_ReadData())
		{ 
			if(Receivedata[1] == SEND_MESSAGE)
			{
				for(i=0;i<8;i++)
				{
					if(Receivedata[4+i]!=station[i])
					{
						break;
					}
				}
				if(8 == i)
				{
					return SUCCESS;
				}
			}
		}
  }	
	#if NRF_DEBUG
	printf("Leave a message fail_2!\r\n");
  #endif
	return ERROR;
}


/*
*********************************************************************************************************
 * 函数名：app_nrf_DealBleData
 * 描述  ：处理nrf串口数据
 * 输入  ：无
 * 返回  : 无
*********************************************************************************************************
*/
void app_nrf_DealBleData(void)
{
	uint8_t *pBytes;
	uint16_t i,j,loopcoutnt=0;	
	pBytes = (uint8_t *)EXT_SRAM_ADDR;          /*外部SRAM地址*/
	
	if((nowdate.time.year[0]+nowdate.time.year[1]*256-2000)<0
		||(nowdate.time.year[0]+nowdate.time.year[1]*256-2000)>100)
	{
		return;
	}
	
	while( (SUCCESS == app_nrf_ReadData()) && (loopcoutnt<20) )  /*每次最大处理20包数据*/
	{	
		loopcoutnt++;		
		if(Receivedata[1]==GETBLEDATA)
		{
			/*滤重算法*/
			for(i=0;i<BraceletNumber;i++)
			{
				for(j=0;j<6;j++)
				{
					if(*(pBytes+BRACELET_RECORD_LEN*i+j)!=Receivedata[12+j])  { break; }
				}
				if(j==6)  /*有该手环记录*/
				{
					/*运动参数改变判断*/
					for(j=0;j<6;j++)
					{
						if(*(pBytes+BRACELET_RECORD_LEN*i+8+j)!=Receivedata[12+6+5+j])  { break; }
					}
				  if(j!=6)
					{
						/*存储、上报数据*/
						memcpy((uint8_t *)(pBytes+BRACELET_RECORD_LEN*i+8),&Receivedata[12+6+5],6);							
						app_plat_SportDataPublish(&Receivedata[12],&Receivedata[12+6+5]);
					}	
					
					/*判断心率参数是否改变*/
					if(*(pBytes+BRACELET_RECORD_LEN*i+14)!=Receivedata[12+6+5+6]&&
						Receivedata[12+6+5+6]!=0)
					{
						/*存储、上报数据*/
						*(pBytes+BRACELET_RECORD_LEN*i+14)=Receivedata[12+6+5+6];										
						app_plat_HeartratePublish(&Receivedata[12],Receivedata[12+6+5+6]);
					}

					/*考勤、位置数据改变上报*/
					if(*(pBytes+BRACELET_RECORD_LEN*i+6)!=Receivedata[12+6+1]||
						*(pBytes+BRACELET_RECORD_LEN*i+7)!=Receivedata[12+6+3])
					{
              /*位置数据*/						
							app_plat_LocationPublish(&Receivedata[12],&Receivedata[12+6],Receivedata[12+6+5+6+3],&Receivedata[4]);
						  app_nrf_AttendanceDetermine(&Receivedata[4],&Receivedata[12+6],&Receivedata[12], i );  /*考勤判断*/
							
						  /*保存数据*/
							*(pBytes+BRACELET_RECORD_LEN*i+6)=Receivedata[12+6+1];
						  *(pBytes+BRACELET_RECORD_LEN*i+7)=Receivedata[12+6+3];	
					}
					
					/*位置参数定时上报*/
					if(abs(nowdate.time.second-*(pBytes+BRACELET_RECORD_LEN*i+16))>3)
					{
					  *(pBytes+BRACELET_RECORD_LEN*i+16)=nowdate.time.second;
						app_plat_LocationPublish(&Receivedata[12],&Receivedata[12+6],Receivedata[12+6+5+6+3],&Receivedata[4]);
					}	
				
					/*手环电量参数改变判断*/
					if(*(pBytes+BRACELET_RECORD_LEN*i+15)!=Receivedata[12+6+5+6+2]) 
					{
						/*存储、上报数据*/
						*(pBytes+BRACELET_RECORD_LEN*i+15)=Receivedata[12+6+5+6+2];										
						app_plat_BraceletInfoPublish(&Receivedata[12],Receivedata[12+6+5+6+2]);
					}	
				  break;  /*退出查找*/
				}
			}
			
			/*没有该手环记录*/ 
			if(i == BraceletNumber)   
			{
				BraceletNumber++; /*SRAM中缓存手环个数加1*/  
				
				/*存储手环MAC*/
				for(j=0;j<6;j++)
				{
					*(pBytes+BRACELET_RECORD_LEN*i+j)=Receivedata[12+j];
				}
				
				/*存储、上报运动数据*/
				for(j=0;j<6;j++)
				{
					*(pBytes+BRACELET_RECORD_LEN*i+8+j)=Receivedata[12+6+5+j];
				}
				app_plat_SportDataPublish(&Receivedata[12],&Receivedata[12+6+5]); 

        if(Receivedata[12+6+5+6]!=0)
				{				
					/*存储、上报心率数据*/
					*(pBytes+BRACELET_RECORD_LEN*i+14)=Receivedata[12+6+5+6];								
					app_plat_HeartratePublish(&Receivedata[12],Receivedata[12+6+5+6]);	
				}					
				
				if(Receivedata[12+6+1]!=0||Receivedata[12+6+3!=0])
				{
					/*存储、上报位置数据*/
					*(pBytes+BRACELET_RECORD_LEN*i+6)=Receivedata[12+6+1];
					*(pBytes+BRACELET_RECORD_LEN*i+7)=Receivedata[12+6+3];
					app_plat_LocationPublish(&Receivedata[12],&Receivedata[12+6],Receivedata[12+6+5+6+3],&Receivedata[4]);
				}
								
				/*存储、上报手环电量数据*/
				*(pBytes+BRACELET_RECORD_LEN*i+15)=Receivedata[12+6+5+6+2];
				app_plat_BraceletInfoPublish(&Receivedata[12],Receivedata[12+6+5+6+2]);
				
				/*当前时间秒字节*/
				*(pBytes+BRACELET_RECORD_LEN*i+16)=nowdate.time.second;
			}
		}
	}
}
