; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\flash\obj\wizchip_conf.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\wizchip_conf.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931,870 -I..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\User\bsp -I..\..\User\bsp\inc -I..\..\User -I..\..\Libraries\CMSIS\Include -I..\..\FreeRTOS\include -I..\..\FreeRTOS\portable\RVDS\ARM_CM3 -I..\..\MQTT -I..\..\Ethernet -I..\..\Ethernet\W5500 -I..\..\Internet\DHCP -I..\..\Internet\DNS -I..\..\User\app\src -I..\..\User\app\inc -I..\..\Internet\NTP -I..\..\Internet\HTTP -I.\RTE\_Flash -ID:\MDK5\ARM\CMSIS\5.0.1\CMSIS\Include -ID:\MDK5\Keil\STM32F1xx_DFP\2.0.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=523 -D_RTE_ -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=.\flash\obj\wizchip_conf.crf ..\..\Ethernet\wizchip_conf.c]
                          THUMB

                          AREA ||i.ctlnetwork||, CODE, READONLY, ALIGN=1

                  ctlnetwork PROC
;;;263    
;;;264    int8_t ctlnetwork(ctlnetwork_type cntype, void* arg)
000000  b570              PUSH     {r4-r6,lr}
;;;265    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;266       
;;;267       switch(cntype)
000006  2d06              CMP      r5,#6
000008  d21c              BCS      |L1.68|
00000a  e8dff005          TBB      [pc,r5]
00000e  0307              DCB      0x03,0x07
000010  0b0f1317          DCB      0x0b,0x0f,0x13,0x17
;;;268       {
;;;269          case CN_SET_NETINFO:
;;;270             wizchip_setnetinfo((wiz_NetInfo*)arg);
000014  4620              MOV      r0,r4
000016  f7fffffe          BL       wizchip_setnetinfo
;;;271             break;
00001a  e016              B        |L1.74|
;;;272          case CN_GET_NETINFO:
;;;273             wizchip_getnetinfo((wiz_NetInfo*)arg);
00001c  4620              MOV      r0,r4
00001e  f7fffffe          BL       wizchip_getnetinfo
;;;274             break;
000022  e012              B        |L1.74|
;;;275          case CN_SET_NETMODE:
;;;276             return wizchip_setnetmode(*(netmode_type*)arg);
000024  7820              LDRB     r0,[r4,#0]
000026  f7fffffe          BL       wizchip_setnetmode
                  |L1.42|
;;;277          case CN_GET_NETMODE:
;;;278             *(netmode_type*)arg = wizchip_getnetmode();
;;;279             break;
;;;280          case CN_SET_TIMEOUT:
;;;281             wizchip_settimeout((wiz_NetTimeout*)arg);
;;;282             break;
;;;283          case CN_GET_TIMEOUT:
;;;284             wizchip_gettimeout((wiz_NetTimeout*)arg);
;;;285             break;
;;;286          default:
;;;287             return -1;
;;;288       }
;;;289       return 0;
;;;290    }
00002a  bd70              POP      {r4-r6,pc}
00002c  f7fffffe          BL       wizchip_getnetmode
000030  7020              STRB     r0,[r4,#0]            ;278
000032  e00a              B        |L1.74|
000034  4620              MOV      r0,r4                 ;281
000036  f7fffffe          BL       wizchip_settimeout
00003a  e006              B        |L1.74|
00003c  4620              MOV      r0,r4                 ;284
00003e  f7fffffe          BL       wizchip_gettimeout
000042  e002              B        |L1.74|
                  |L1.68|
000044  f04f30ff          MOV      r0,#0xffffffff        ;287
000048  e7ef              B        |L1.42|
                  |L1.74|
00004a  bf00              NOP                            ;271
00004c  2000              MOVS     r0,#0                 ;289
00004e  e7ec              B        |L1.42|
;;;291    
                          ENDP


                          AREA ||i.ctlwizchip||, CODE, READONLY, ALIGN=2

                  ctlwizchip PROC
;;;187    
;;;188    int8_t ctlwizchip(ctlwizchip_type cwtype, void* arg)
000000  e92d41fc          PUSH     {r2-r8,lr}
;;;189    {
000004  4606              MOV      r6,r0
000006  460c              MOV      r4,r1
;;;190       uint8_t tmp = 0;
000008  2500              MOVS     r5,#0
;;;191       uint8_t* ptmp[2] = {0,0};
00000a  2000              MOVS     r0,#0
00000c  9000              STR      r0,[sp,#0]
00000e  9001              STR      r0,[sp,#4]
;;;192       switch(cwtype)
000010  2e10              CMP      r6,#0x10
000012  d279              BCS      |L2.264|
000014  e8dff006          TBB      [pc,r6]
000018  080b1a16          DCB      0x08,0x0b,0x1a,0x16
00001c  1e222632          DCB      0x1e,0x22,0x26,0x32
000020  3f515458          DCB      0x3f,0x51,0x54,0x58
000024  5c5d616c          DCB      0x5c,0x5d,0x61,0x6c
;;;193       {
;;;194          case CW_RESET_WIZCHIP:
;;;195             wizchip_sw_reset();
000028  f7fffffe          BL       wizchip_sw_reset
;;;196             break;
00002c  e06f              B        |L2.270|
;;;197          case CW_INIT_WIZCHIP:
;;;198             if(arg != 0) 
00002e  b11c              CBZ      r4,|L2.56|
;;;199             {
;;;200                ptmp[0] = (uint8_t*)arg;
000030  9400              STR      r4,[sp,#0]
;;;201                ptmp[1] = ptmp[0] + _WIZCHIP_SOCK_NUM_;
000032  9800              LDR      r0,[sp,#0]
000034  3008              ADDS     r0,r0,#8
000036  9001              STR      r0,[sp,#4]
                  |L2.56|
;;;202             }
;;;203             return wizchip_init(ptmp[0], ptmp[1]);
000038  e9dd0100          LDRD     r0,r1,[sp,#0]
00003c  f7fffffe          BL       wizchip_init
                  |L2.64|
;;;204          case CW_CLR_INTERRUPT:
;;;205             wizchip_clrinterrupt(*((intr_kind*)arg));
;;;206             break;
;;;207          case CW_GET_INTERRUPT:
;;;208            *((intr_kind*)arg) = wizchip_getinterrupt();
;;;209             break;
;;;210          case CW_SET_INTRMASK:
;;;211             wizchip_setinterruptmask(*((intr_kind*)arg));
;;;212             break;         
;;;213          case CW_GET_INTRMASK:
;;;214             *((intr_kind*)arg) = wizchip_getinterruptmask();
;;;215             break;
;;;216       #if _WIZCHIP_ > 5100
;;;217          case CW_SET_INTRTIME:
;;;218             setINTLEVEL(*(uint16_t*)arg);
;;;219             break;
;;;220          case CW_GET_INTRTIME:
;;;221             *(uint16_t*)arg = getINTLEVEL();
;;;222             break;
;;;223       #endif
;;;224          case CW_GET_ID:
;;;225             ((uint8_t*)arg)[0] = WIZCHIP.id[0];
;;;226             ((uint8_t*)arg)[1] = WIZCHIP.id[1];
;;;227             ((uint8_t*)arg)[2] = WIZCHIP.id[2];
;;;228             ((uint8_t*)arg)[3] = WIZCHIP.id[3];
;;;229             ((uint8_t*)arg)[4] = WIZCHIP.id[4];
;;;230             ((uint8_t*)arg)[5] = 0;
;;;231             break;
;;;232       #if _WIZCHIP_ ==  5500
;;;233          case CW_RESET_PHY:
;;;234             wizphy_reset();
;;;235             break;
;;;236          case CW_SET_PHYCONF:
;;;237             wizphy_setphyconf((wiz_PhyConf*)arg);
;;;238             break;
;;;239          case CW_GET_PHYCONF:
;;;240             wizphy_getphyconf((wiz_PhyConf*)arg);
;;;241             break;
;;;242          case CW_GET_PHYSTATUS:  
;;;243             break;
;;;244          case CW_SET_PHYPOWMODE:
;;;245             return wizphy_setphypmode(*(uint8_t*)arg);
;;;246       #endif
;;;247          case CW_GET_PHYPOWMODE:
;;;248             tmp = wizphy_getphypmode();
;;;249             if((int8_t)tmp == -1) return -1;
;;;250             *(uint8_t*)arg = tmp;
;;;251             break;
;;;252          case CW_GET_PHYLINK:
;;;253             tmp = wizphy_getphylink();
;;;254             if((int8_t)tmp == -1) return -1;
;;;255             *(uint8_t*)arg = tmp;
;;;256             break;
;;;257          default:
;;;258             return -1;
;;;259       }
;;;260       return 0;
;;;261    }
000040  e8bd81fc          POP      {r2-r8,pc}
000044  8820              LDRH     r0,[r4,#0]            ;205
000046  f7fffffe          BL       wizchip_clrinterrupt
00004a  e060              B        |L2.270|
00004c  f7fffffe          BL       wizchip_getinterrupt
000050  8020              STRH     r0,[r4,#0]            ;208
000052  e05c              B        |L2.270|
000054  8820              LDRH     r0,[r4,#0]            ;211
000056  f7fffffe          BL       wizchip_setinterruptmask
00005a  e058              B        |L2.270|
00005c  f7fffffe          BL       wizchip_getinterruptmask
000060  8020              STRH     r0,[r4,#0]            ;214
000062  e054              B        |L2.270|
000064  8820              LDRH     r0,[r4,#0]            ;218
000066  1201              ASRS     r1,r0,#8              ;218
000068  f44f5098          MOV      r0,#0x1300            ;218
00006c  f7fffffe          BL       WIZCHIP_WRITE
000070  7821              LDRB     r1,[r4,#0]            ;218
000072  f44f50a0          MOV      r0,#0x1400            ;218
000076  f7fffffe          BL       WIZCHIP_WRITE
00007a  e048              B        |L2.270|
00007c  f44f50a0          MOV      r0,#0x1400            ;221
000080  f7fffffe          BL       WIZCHIP_READ
000084  4607              MOV      r7,r0                 ;221
000086  f44f5098          MOV      r0,#0x1300            ;221
00008a  f7fffffe          BL       WIZCHIP_READ
00008e  eb072000          ADD      r0,r7,r0,LSL #8       ;221
000092  8020              STRH     r0,[r4,#0]            ;221
000094  e03b              B        |L2.270|
000096  481f              LDR      r0,|L2.276|
000098  7880              LDRB     r0,[r0,#2]            ;225  ; WIZCHIP
00009a  7020              STRB     r0,[r4,#0]            ;225
00009c  481d              LDR      r0,|L2.276|
00009e  78c0              LDRB     r0,[r0,#3]            ;226
0000a0  7060              STRB     r0,[r4,#1]            ;226
0000a2  481c              LDR      r0,|L2.276|
0000a4  7900              LDRB     r0,[r0,#4]            ;227
0000a6  70a0              STRB     r0,[r4,#2]            ;227
0000a8  481a              LDR      r0,|L2.276|
0000aa  7940              LDRB     r0,[r0,#5]            ;228
0000ac  70e0              STRB     r0,[r4,#3]            ;228
0000ae  4819              LDR      r0,|L2.276|
0000b0  7980              LDRB     r0,[r0,#6]            ;229
0000b2  7120              STRB     r0,[r4,#4]            ;229
0000b4  2000              MOVS     r0,#0                 ;230
0000b6  7160              STRB     r0,[r4,#5]            ;230
0000b8  e029              B        |L2.270|
0000ba  f7fffffe          BL       wizphy_reset
0000be  e026              B        |L2.270|
0000c0  4620              MOV      r0,r4                 ;237
0000c2  f7fffffe          BL       wizphy_setphyconf
0000c6  e022              B        |L2.270|
0000c8  4620              MOV      r0,r4                 ;240
0000ca  f7fffffe          BL       wizphy_getphyconf
0000ce  e01e              B        |L2.270|
0000d0  e01d              B        |L2.270|
0000d2  7820              LDRB     r0,[r4,#0]            ;245
0000d4  f7fffffe          BL       wizphy_setphypmode
0000d8  e7b2              B        |L2.64|
0000da  f7fffffe          BL       wizphy_getphypmode
0000de  b2c5              UXTB     r5,r0                 ;248
0000e0  b268              SXTB     r0,r5                 ;249
0000e2  1c40              ADDS     r0,r0,#1              ;249
0000e4  b910              CBNZ     r0,|L2.236|
0000e6  f04f30ff          MOV      r0,#0xffffffff        ;249
0000ea  e7a9              B        |L2.64|
                  |L2.236|
0000ec  7025              STRB     r5,[r4,#0]            ;250
0000ee  e00e              B        |L2.270|
0000f0  f7fffffe          BL       wizphy_getphylink
0000f4  b2c5              UXTB     r5,r0                 ;253
0000f6  b268              SXTB     r0,r5                 ;254
0000f8  1c40              ADDS     r0,r0,#1              ;254
0000fa  b918              CBNZ     r0,|L2.260|
0000fc  f04f30ff          MOV      r0,#0xffffffff        ;254
000100  e79e              B        |L2.64|
000102  e001              B        |L2.264|
                  |L2.260|
000104  7025              STRB     r5,[r4,#0]            ;255
000106  e002              B        |L2.270|
                  |L2.264|
000108  f04f30ff          MOV      r0,#0xffffffff        ;258
00010c  e798              B        |L2.64|
                  |L2.270|
00010e  bf00              NOP                            ;196
000110  2000              MOVS     r0,#0                 ;260
000112  e795              B        |L2.64|
;;;262    
                          ENDP

                  |L2.276|
                          DCD      WIZCHIP

                          AREA ||i.reg_wizchip_bus_cbfunc||, CODE, READONLY, ALIGN=2

                  reg_wizchip_bus_cbfunc PROC
;;;155    
;;;156    void reg_wizchip_bus_cbfunc(uint8_t(*bus_rb)(uint32_t addr), void (*bus_wb)(uint32_t addr, uint8_t wb))
000000  bf00              NOP      
                  |L3.2|
;;;157    {
;;;158       while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_BUS_));
000002  4a09              LDR      r2,|L3.40|
000004  8812              LDRH     r2,[r2,#0]  ; WIZCHIP
000006  f4027280          AND      r2,r2,#0x100
00000a  2a00              CMP      r2,#0
00000c  d0f9              BEQ      |L3.2|
;;;159       
;;;160       if(!bus_rb || !bus_wb)
00000e  b100              CBZ      r0,|L3.18|
000010  b931              CBNZ     r1,|L3.32|
                  |L3.18|
;;;161       {
;;;162          WIZCHIP.IF.BUS._read_byte   = wizchip_bus_readbyte;
000012  4a06              LDR      r2,|L3.44|
000014  4b04              LDR      r3,|L3.40|
000016  619a              STR      r2,[r3,#0x18]  ; WIZCHIP
;;;163          WIZCHIP.IF.BUS._write_byte  = wizchip_bus_writebyte;
000018  4b05              LDR      r3,|L3.48|
00001a  4a03              LDR      r2,|L3.40|
00001c  61d3              STR      r3,[r2,#0x1c]
00001e  e002              B        |L3.38|
                  |L3.32|
;;;164       }
;;;165       else
;;;166       {
;;;167          WIZCHIP.IF.BUS._read_byte   = bus_rb;
000020  4a01              LDR      r2,|L3.40|
000022  6190              STR      r0,[r2,#0x18]  ; WIZCHIP
;;;168          WIZCHIP.IF.BUS._write_byte  = bus_wb;
000024  61d1              STR      r1,[r2,#0x1c]
                  |L3.38|
;;;169       }
;;;170    }
000026  4770              BX       lr
;;;171    
                          ENDP

                  |L3.40|
                          DCD      WIZCHIP
                  |L3.44|
                          DCD      wizchip_bus_readbyte
                  |L3.48|
                          DCD      wizchip_bus_writebyte

                          AREA ||i.reg_wizchip_cris_cbfunc||, CODE, READONLY, ALIGN=2

                  reg_wizchip_cris_cbfunc PROC
;;;127    
;;;128    void reg_wizchip_cris_cbfunc(void(*cris_en)(void), void(*cris_ex)(void))
000000  b100              CBZ      r0,|L4.4|
;;;129    {
;;;130       if(!cris_en || !cris_ex)
000002  b931              CBNZ     r1,|L4.18|
                  |L4.4|
;;;131       {
;;;132          WIZCHIP.CRIS._enter = wizchip_cris_enter;
000004  4a05              LDR      r2,|L4.28|
000006  4b06              LDR      r3,|L4.32|
000008  609a              STR      r2,[r3,#8]  ; WIZCHIP
;;;133          WIZCHIP.CRIS._exit  = wizchip_cris_exit;
00000a  4b06              LDR      r3,|L4.36|
00000c  4a04              LDR      r2,|L4.32|
00000e  60d3              STR      r3,[r2,#0xc]
000010  e002              B        |L4.24|
                  |L4.18|
;;;134       }
;;;135       else
;;;136       {
;;;137          WIZCHIP.CRIS._enter = cris_en;
000012  4a03              LDR      r2,|L4.32|
000014  6090              STR      r0,[r2,#8]  ; WIZCHIP
;;;138          WIZCHIP.CRIS._exit  = cris_ex;
000016  60d1              STR      r1,[r2,#0xc]
                  |L4.24|
;;;139       }
;;;140    }
000018  4770              BX       lr
;;;141    
                          ENDP

00001a  0000              DCW      0x0000
                  |L4.28|
                          DCD      wizchip_cris_enter
                  |L4.32|
                          DCD      WIZCHIP
                  |L4.36|
                          DCD      wizchip_cris_exit

                          AREA ||i.reg_wizchip_cs_cbfunc||, CODE, READONLY, ALIGN=2

                  reg_wizchip_cs_cbfunc PROC
;;;141    
;;;142    void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
000000  b100              CBZ      r0,|L5.4|
;;;143    {
;;;144       if(!cs_sel || !cs_desel)
000002  b931              CBNZ     r1,|L5.18|
                  |L5.4|
;;;145       {
;;;146          WIZCHIP.CS._select   = wizchip_cs_select;
000004  4a05              LDR      r2,|L5.28|
000006  4b06              LDR      r3,|L5.32|
000008  611a              STR      r2,[r3,#0x10]  ; WIZCHIP
;;;147          WIZCHIP.CS._deselect = wizchip_cs_deselect;
00000a  4b06              LDR      r3,|L5.36|
00000c  4a04              LDR      r2,|L5.32|
00000e  6153              STR      r3,[r2,#0x14]
000010  e002              B        |L5.24|
                  |L5.18|
;;;148       }
;;;149       else
;;;150       {
;;;151          WIZCHIP.CS._select   = cs_sel;
000012  4a03              LDR      r2,|L5.32|
000014  6110              STR      r0,[r2,#0x10]  ; WIZCHIP
;;;152          WIZCHIP.CS._deselect = cs_desel;
000016  6151              STR      r1,[r2,#0x14]
                  |L5.24|
;;;153       }
;;;154    }
000018  4770              BX       lr
;;;155    
                          ENDP

00001a  0000              DCW      0x0000
                  |L5.28|
                          DCD      wizchip_cs_select
                  |L5.32|
                          DCD      WIZCHIP
                  |L5.36|
                          DCD      wizchip_cs_deselect

                          AREA ||i.reg_wizchip_spi_cbfunc||, CODE, READONLY, ALIGN=2

                  reg_wizchip_spi_cbfunc PROC
;;;171    
;;;172    void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
000000  bf00              NOP      
                  |L6.2|
;;;173    {
;;;174       while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
000002  4a09              LDR      r2,|L6.40|
000004  8812              LDRH     r2,[r2,#0]  ; WIZCHIP
000006  f4027200          AND      r2,r2,#0x200
00000a  2a00              CMP      r2,#0
00000c  d0f9              BEQ      |L6.2|
;;;175       
;;;176       if(!spi_rb || !spi_wb)
00000e  b100              CBZ      r0,|L6.18|
000010  b931              CBNZ     r1,|L6.32|
                  |L6.18|
;;;177       {
;;;178          WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
000012  4a06              LDR      r2,|L6.44|
000014  4b04              LDR      r3,|L6.40|
000016  619a              STR      r2,[r3,#0x18]  ; WIZCHIP
;;;179          WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
000018  4b05              LDR      r3,|L6.48|
00001a  4a03              LDR      r2,|L6.40|
00001c  61d3              STR      r3,[r2,#0x1c]
00001e  e002              B        |L6.38|
                  |L6.32|
;;;180       }
;;;181       else
;;;182       {
;;;183          WIZCHIP.IF.SPI._read_byte   = spi_rb;
000020  4a01              LDR      r2,|L6.40|
000022  6190              STR      r0,[r2,#0x18]  ; WIZCHIP
;;;184          WIZCHIP.IF.SPI._write_byte  = spi_wb;
000024  61d1              STR      r1,[r2,#0x1c]
                  |L6.38|
;;;185       }
;;;186    }
000026  4770              BX       lr
;;;187    
                          ENDP

                  |L6.40|
                          DCD      WIZCHIP
                  |L6.44|
                          DCD      wizchip_spi_readbyte
                  |L6.48|
                          DCD      wizchip_spi_writebyte

                          AREA ||i.wizchip_bus_readbyte||, CODE, READONLY, ALIGN=1

                  wizchip_bus_readbyte PROC
;;;83     //uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *) AddrSel); };
;;;84     uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); };
000000  4601              MOV      r1,r0
000002  7808              LDRB     r0,[r1,#0]
000004  4770              BX       lr
;;;85     /**
                          ENDP


                          AREA ||i.wizchip_bus_writebyte||, CODE, READONLY, ALIGN=1

                  wizchip_bus_writebyte PROC
;;;92     //void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*) AddrSel) = wb; };
;;;93     void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; };
000000  7001              STRB     r1,[r0,#0]
000002  4770              BX       lr
;;;94     
                          ENDP


                          AREA ||i.wizchip_clrinterrupt||, CODE, READONLY, ALIGN=1

                  wizchip_clrinterrupt PROC
;;;331    
;;;332    void wizchip_clrinterrupt(intr_kind intr)
000000  b570              PUSH     {r4-r6,lr}
;;;333    {
000002  4604              MOV      r4,r0
;;;334       uint8_t ir  = (uint8_t)intr;
000004  b2e5              UXTB     r5,r4
;;;335       uint8_t sir = (uint8_t)((uint16_t)intr >> 8);
000006  1226              ASRS     r6,r4,#8
;;;336    #if _WIZCHIP_ < 5500
;;;337       ir |= (1<<4); // IK_WOL
;;;338    #endif
;;;339    #if _WIZCHIP_ == 5200
;;;340       ir |= (1 << 6);
;;;341    #endif
;;;342       
;;;343    #if _WIZCHIP_ < 5200
;;;344       sir &= 0x0F;
;;;345    #endif
;;;346    
;;;347    #if _WIZCHIP_ == 5100
;;;348       ir |= sir;
;;;349       setIR(ir);
;;;350    #else
;;;351       setIR(ir);
000008  f00501f0          AND      r1,r5,#0xf0
00000c  f44f50a8          MOV      r0,#0x1500
000010  f7fffffe          BL       WIZCHIP_WRITE
;;;352       setSIR(sir);
000014  4631              MOV      r1,r6
000016  f44f50b8          MOV      r0,#0x1700
00001a  f7fffffe          BL       WIZCHIP_WRITE
;;;353    #endif   
;;;354    }
00001e  bd70              POP      {r4-r6,pc}
;;;355    
                          ENDP


                          AREA ||i.wizchip_cris_enter||, CODE, READONLY, ALIGN=1

                  wizchip_cris_enter PROC
;;;57      */
;;;58     void 	  wizchip_cris_enter(void)           {};
000000  4770              BX       lr
;;;59     /**
                          ENDP


                          AREA ||i.wizchip_cris_exit||, CODE, READONLY, ALIGN=1

                  wizchip_cris_exit PROC
;;;63      */
;;;64     void 	  wizchip_cris_exit(void)          {};
000000  4770              BX       lr
;;;65     /**
                          ENDP


                          AREA ||i.wizchip_cs_deselect||, CODE, READONLY, ALIGN=1

                  wizchip_cs_deselect PROC
;;;75      */
;;;76     void 	wizchip_cs_deselect(void)          {};
000000  4770              BX       lr
;;;77     /**
                          ENDP


                          AREA ||i.wizchip_cs_select||, CODE, READONLY, ALIGN=1

                  wizchip_cs_select PROC
;;;69      */
;;;70     void 	wizchip_cs_select(void)            {};
000000  4770              BX       lr
;;;71     /**
                          ENDP


                          AREA ||i.wizchip_getinterrupt||, CODE, READONLY, ALIGN=1

                  wizchip_getinterrupt PROC
;;;355    
;;;356    intr_kind wizchip_getinterrupt(void)
000000  b570              PUSH     {r4-r6,lr}
;;;357    {
;;;358       uint8_t ir  = 0;
000002  2600              MOVS     r6,#0
;;;359       uint8_t sir = 0;
000004  2400              MOVS     r4,#0
;;;360       uint16_t ret = 0;
000006  2500              MOVS     r5,#0
;;;361    #if _WIZCHIP_ == 5100
;;;362       ir = getIR();
;;;363       sir = ir 0x0F;
;;;364    #else
;;;365       ir  = getIR();
000008  f44f50a8          MOV      r0,#0x1500
00000c  f7fffffe          BL       WIZCHIP_READ
000010  f00006f0          AND      r6,r0,#0xf0
;;;366       sir = getSIR();
000014  f44f50b8          MOV      r0,#0x1700
000018  f7fffffe          BL       WIZCHIP_READ
00001c  4604              MOV      r4,r0
;;;367    #endif         
;;;368    
;;;369    #if _WIZCHIP_ < 5500
;;;370       ir &= ~(1<<4); // IK_WOL
;;;371    #endif
;;;372    #if _WIZCHIP_ == 5200
;;;373       ir &= ~(1 << 6);
;;;374    #endif
;;;375      ret = sir;
00001e  4625              MOV      r5,r4
;;;376      ret = (ret << 8) + ir;
000020  eb062005          ADD      r0,r6,r5,LSL #8
000024  b285              UXTH     r5,r0
;;;377      return (intr_kind)ret;
000026  4628              MOV      r0,r5
;;;378    }
000028  bd70              POP      {r4-r6,pc}
;;;379    
                          ENDP


                          AREA ||i.wizchip_getinterruptmask||, CODE, READONLY, ALIGN=1

                  wizchip_getinterruptmask PROC
;;;403    
;;;404    intr_kind wizchip_getinterruptmask(void)
000000  b570              PUSH     {r4-r6,lr}
;;;405    {
;;;406       uint8_t imr  = 0;
000002  2600              MOVS     r6,#0
;;;407       uint8_t simr = 0;
000004  2400              MOVS     r4,#0
;;;408       uint16_t ret = 0;
000006  2500              MOVS     r5,#0
;;;409    #if _WIZCHIP_ == 5100
;;;410       imr  = getIMR();
;;;411       simr = imr 0x0F;
;;;412    #else
;;;413       imr  = getIMR();
000008  f44f50b0          MOV      r0,#0x1600
00000c  f7fffffe          BL       WIZCHIP_READ
000010  4606              MOV      r6,r0
;;;414       simr = getSIMR();
000012  f44f50c0          MOV      r0,#0x1800
000016  f7fffffe          BL       WIZCHIP_READ
00001a  4604              MOV      r4,r0
;;;415    #endif         
;;;416    
;;;417    #if _WIZCHIP_ < 5500
;;;418       imr &= ~(1<<4); // IK_WOL
;;;419    #endif
;;;420    #if _WIZCHIP_ == 5200
;;;421       imr &= ~(1 << 6);  // IK_DEST_UNREACH
;;;422    #endif
;;;423      ret = simr;
00001c  4625              MOV      r5,r4
;;;424      ret = (ret << 8) + imr;
00001e  eb062005          ADD      r0,r6,r5,LSL #8
000022  b285              UXTH     r5,r0
;;;425      return (intr_kind)ret;
000024  4628              MOV      r0,r5
;;;426    }
000026  bd70              POP      {r4-r6,pc}
;;;427    
                          ENDP


                          AREA ||i.wizchip_getnetinfo||, CODE, READONLY, ALIGN=2

                  wizchip_getnetinfo PROC
;;;594    
;;;595    void wizchip_getnetinfo(wiz_NetInfo* pnetinfo)
000000  b510              PUSH     {r4,lr}
;;;596    {
000002  4604              MOV      r4,r0
;;;597       getSHAR(pnetinfo->mac);
000004  2206              MOVS     r2,#6
000006  4621              MOV      r1,r4
000008  f44f6010          MOV      r0,#0x900
00000c  f7fffffe          BL       WIZCHIP_READ_BUF
;;;598       getGAR(pnetinfo->gw);
000010  2204              MOVS     r2,#4
000012  f104010e          ADD      r1,r4,#0xe
000016  0190              LSLS     r0,r2,#6
000018  f7fffffe          BL       WIZCHIP_READ_BUF
;;;599       getSUBR(pnetinfo->sn);
00001c  2204              MOVS     r2,#4
00001e  f104010a          ADD      r1,r4,#0xa
000022  f44f60a0          MOV      r0,#0x500
000026  f7fffffe          BL       WIZCHIP_READ_BUF
;;;600       getSIPR(pnetinfo->ip);
00002a  2204              MOVS     r2,#4
00002c  1da1              ADDS     r1,r4,#6
00002e  f44f6070          MOV      r0,#0xf00
000032  f7fffffe          BL       WIZCHIP_READ_BUF
;;;601       pnetinfo->dns[0]= _DNS_[0];
000036  4807              LDR      r0,|L16.84|
000038  7800              LDRB     r0,[r0,#0]  ; _DNS_
00003a  74a0              STRB     r0,[r4,#0x12]
;;;602       pnetinfo->dns[1]= _DNS_[1];
00003c  4805              LDR      r0,|L16.84|
00003e  7841              LDRB     r1,[r0,#1]  ; _DNS_
000040  74e1              STRB     r1,[r4,#0x13]
;;;603       pnetinfo->dns[2]= _DNS_[2];
000042  7881              LDRB     r1,[r0,#2]  ; _DNS_
000044  7521              STRB     r1,[r4,#0x14]
;;;604       pnetinfo->dns[3]= _DNS_[3];
000046  78c1              LDRB     r1,[r0,#3]  ; _DNS_
000048  7561              STRB     r1,[r4,#0x15]
;;;605       pnetinfo->dhcp  = _DHCP_;
00004a  4803              LDR      r0,|L16.88|
00004c  7800              LDRB     r0,[r0,#0]  ; _DHCP_
00004e  75a0              STRB     r0,[r4,#0x16]
;;;606    }
000050  bd10              POP      {r4,pc}
;;;607    
                          ENDP

000052  0000              DCW      0x0000
                  |L16.84|
                          DCD      _DNS_
                  |L16.88|
                          DCD      _DHCP_

                          AREA ||i.wizchip_getnetmode||, CODE, READONLY, ALIGN=1

                  wizchip_getnetmode PROC
;;;621    
;;;622    netmode_type wizchip_getnetmode(void)
000000  b510              PUSH     {r4,lr}
;;;623    {
;;;624       return (netmode_type) getMR();
000002  2000              MOVS     r0,#0
000004  f7fffffe          BL       WIZCHIP_READ
;;;625    }
000008  bd10              POP      {r4,pc}
;;;626    
                          ENDP


                          AREA ||i.wizchip_gettimeout||, CODE, READONLY, ALIGN=1

                  wizchip_gettimeout PROC
;;;632    
;;;633    void wizchip_gettimeout(wiz_NetTimeout* nettime)
000000  b570              PUSH     {r4-r6,lr}
;;;634    {
000002  4604              MOV      r4,r0
;;;635       nettime->retry_cnt = getRCR();
000004  f44f50d8          MOV      r0,#0x1b00
000008  f7fffffe          BL       WIZCHIP_READ
00000c  7020              STRB     r0,[r4,#0]
;;;636       nettime->time_100us = getRTR();
00000e  f44f50d0          MOV      r0,#0x1a00
000012  f7fffffe          BL       WIZCHIP_READ
000016  4605              MOV      r5,r0
000018  f44f50c8          MOV      r0,#0x1900
00001c  f7fffffe          BL       WIZCHIP_READ
000020  eb052000          ADD      r0,r5,r0,LSL #8
000024  8060              STRH     r0,[r4,#2]
;;;637    }
000026  bd70              POP      {r4-r6,pc}
                          ENDP


                          AREA ||i.wizchip_init||, CODE, READONLY, ALIGN=1

                  wizchip_init PROC
;;;305    
;;;306    int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;307    {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
;;;308       int8_t i;
;;;309       int8_t tmp = 0;
000008  2700              MOVS     r7,#0
;;;310       wizchip_sw_reset();
00000a  f7fffffe          BL       wizchip_sw_reset
;;;311       if(txsize)
00000e  b1f5              CBZ      r5,|L19.78|
;;;312       {
;;;313          tmp = 0;
000010  bf00              NOP      
;;;314          for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
000012  2400              MOVS     r4,#0
000014  e004              B        |L19.32|
                  |L19.22|
;;;315             tmp += txsize[i];
000016  5d28              LDRB     r0,[r5,r4]
000018  4438              ADD      r0,r0,r7
00001a  b247              SXTB     r7,r0
00001c  1c60              ADDS     r0,r4,#1              ;314
00001e  b244              SXTB     r4,r0                 ;314
                  |L19.32|
000020  2c08              CMP      r4,#8                 ;314
000022  dbf8              BLT      |L19.22|
;;;316          if(tmp > 16) return -1;
000024  2f10              CMP      r7,#0x10
000026  dd03              BLE      |L19.48|
000028  f04f30ff          MOV      r0,#0xffffffff
                  |L19.44|
;;;317          for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
;;;318             setSn_TXBUF_SIZE(i, txsize[i]);
;;;319       }
;;;320       if(rxsize)
;;;321       {
;;;322          tmp = 0;
;;;323          for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
;;;324             tmp += rxsize[i];
;;;325          if(tmp > 16) return -1;
;;;326          for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
;;;327             setSn_RXBUF_SIZE(i, rxsize[i]);
;;;328       }
;;;329       return 0;
;;;330    }
00002c  e8bd81f0          POP      {r4-r8,pc}
                  |L19.48|
000030  2400              MOVS     r4,#0                 ;317
000032  e00a              B        |L19.74|
                  |L19.52|
000034  5d29              LDRB     r1,[r5,r4]            ;318
000036  00a2              LSLS     r2,r4,#2              ;318
000038  1c52              ADDS     r2,r2,#1              ;318
00003a  f44f53f8          MOV      r3,#0x1f00            ;318
00003e  eb0300c2          ADD      r0,r3,r2,LSL #3       ;318
000042  f7fffffe          BL       WIZCHIP_WRITE
000046  1c60              ADDS     r0,r4,#1              ;317
000048  b244              SXTB     r4,r0                 ;317
                  |L19.74|
00004a  2c08              CMP      r4,#8                 ;317
00004c  dbf2              BLT      |L19.52|
                  |L19.78|
00004e  b1ee              CBZ      r6,|L19.140|
000050  2700              MOVS     r7,#0                 ;322
000052  2400              MOVS     r4,#0                 ;323
000054  e004              B        |L19.96|
                  |L19.86|
000056  5d30              LDRB     r0,[r6,r4]            ;324
000058  4438              ADD      r0,r0,r7              ;324
00005a  b247              SXTB     r7,r0                 ;324
00005c  1c60              ADDS     r0,r4,#1              ;323
00005e  b244              SXTB     r4,r0                 ;323
                  |L19.96|
000060  2c08              CMP      r4,#8                 ;323
000062  dbf8              BLT      |L19.86|
000064  2f10              CMP      r7,#0x10              ;325
000066  dd02              BLE      |L19.110|
000068  f04f30ff          MOV      r0,#0xffffffff        ;325
00006c  e7de              B        |L19.44|
                  |L19.110|
00006e  2400              MOVS     r4,#0                 ;326
000070  e00a              B        |L19.136|
                  |L19.114|
000072  5d31              LDRB     r1,[r6,r4]            ;327
000074  00a2              LSLS     r2,r4,#2              ;327
000076  1c52              ADDS     r2,r2,#1              ;327
000078  f44f53f0          MOV      r3,#0x1e00            ;327
00007c  eb0300c2          ADD      r0,r3,r2,LSL #3       ;327
000080  f7fffffe          BL       WIZCHIP_WRITE
000084  1c60              ADDS     r0,r4,#1              ;326
000086  b244              SXTB     r4,r0                 ;326
                  |L19.136|
000088  2c08              CMP      r4,#8                 ;326
00008a  dbf2              BLT      |L19.114|
                  |L19.140|
00008c  2000              MOVS     r0,#0                 ;329
00008e  e7cd              B        |L19.44|
;;;331    
                          ENDP


                          AREA ||i.wizchip_setinterruptmask||, CODE, READONLY, ALIGN=1

                  wizchip_setinterruptmask PROC
;;;379    
;;;380    void wizchip_setinterruptmask(intr_kind intr)
000000  b570              PUSH     {r4-r6,lr}
;;;381    {
000002  4604              MOV      r4,r0
;;;382       uint8_t imr  = (uint8_t)intr;
000004  b2e5              UXTB     r5,r4
;;;383       uint8_t simr = (uint8_t)((uint16_t)intr >> 8);
000006  1226              ASRS     r6,r4,#8
;;;384    #if _WIZCHIP_ < 5500
;;;385       imr &= ~(1<<4); // IK_WOL
;;;386    #endif
;;;387    #if _WIZCHIP_ == 5200
;;;388       imr &= ~(1 << 6);
;;;389    #endif
;;;390       
;;;391    #if _WIZCHIP_ < 5200
;;;392       simr &= 0x0F;
;;;393    #endif
;;;394    
;;;395    #if _WIZCHIP_ == 5100
;;;396       imr |= simr;
;;;397       setIMR(imr);
;;;398    #else
;;;399       setIMR(imr);
000008  4629              MOV      r1,r5
00000a  f44f50b0          MOV      r0,#0x1600
00000e  f7fffffe          BL       WIZCHIP_WRITE
;;;400       setSIMR(simr);
000012  4631              MOV      r1,r6
000014  f44f50c0          MOV      r0,#0x1800
000018  f7fffffe          BL       WIZCHIP_WRITE
;;;401    #endif   
;;;402    }
00001c  bd70              POP      {r4-r6,pc}
;;;403    
                          ENDP


                          AREA ||i.wizchip_setnetinfo||, CODE, READONLY, ALIGN=2

                  wizchip_setnetinfo PROC
;;;581    
;;;582    void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
000000  b510              PUSH     {r4,lr}
;;;583    {
000002  4604              MOV      r4,r0
;;;584       setSHAR(pnetinfo->mac);
000004  2206              MOVS     r2,#6
000006  4621              MOV      r1,r4
000008  f44f6010          MOV      r0,#0x900
00000c  f7fffffe          BL       WIZCHIP_WRITE_BUF
;;;585       setGAR(pnetinfo->gw);
000010  2204              MOVS     r2,#4
000012  f104010e          ADD      r1,r4,#0xe
000016  0190              LSLS     r0,r2,#6
000018  f7fffffe          BL       WIZCHIP_WRITE_BUF
;;;586       setSUBR(pnetinfo->sn);
00001c  2204              MOVS     r2,#4
00001e  f104010a          ADD      r1,r4,#0xa
000022  f44f60a0          MOV      r0,#0x500
000026  f7fffffe          BL       WIZCHIP_WRITE_BUF
;;;587       setSIPR(pnetinfo->ip);
00002a  2204              MOVS     r2,#4
00002c  1da1              ADDS     r1,r4,#6
00002e  f44f6070          MOV      r0,#0xf00
000032  f7fffffe          BL       WIZCHIP_WRITE_BUF
;;;588       _DNS_[0] = pnetinfo->dns[0];
000036  7ca0              LDRB     r0,[r4,#0x12]
000038  4905              LDR      r1,|L21.80|
00003a  7008              STRB     r0,[r1,#0]
;;;589       _DNS_[1] = pnetinfo->dns[1];
00003c  7ce0              LDRB     r0,[r4,#0x13]
00003e  7048              STRB     r0,[r1,#1]
;;;590       _DNS_[2] = pnetinfo->dns[2];
000040  7d20              LDRB     r0,[r4,#0x14]
000042  7088              STRB     r0,[r1,#2]
;;;591       _DNS_[3] = pnetinfo->dns[3];
000044  7d60              LDRB     r0,[r4,#0x15]
000046  70c8              STRB     r0,[r1,#3]
;;;592       _DHCP_   = pnetinfo->dhcp;
000048  7da0              LDRB     r0,[r4,#0x16]
00004a  4902              LDR      r1,|L21.84|
00004c  7008              STRB     r0,[r1,#0]
;;;593    }
00004e  bd10              POP      {r4,pc}
;;;594    
                          ENDP

                  |L21.80|
                          DCD      _DNS_
                  |L21.84|
                          DCD      _DHCP_

                          AREA ||i.wizchip_setnetmode||, CODE, READONLY, ALIGN=1

                  wizchip_setnetmode PROC
;;;607    
;;;608    int8_t wizchip_setnetmode(netmode_type netmode)
000000  b570              PUSH     {r4-r6,lr}
;;;609    {
000002  4604              MOV      r4,r0
;;;610       uint8_t tmp = 0;
000004  2500              MOVS     r5,#0
;;;611    #if _WIZCHIP_ != 5500   
;;;612       if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK)) return -1;
;;;613    #else
;;;614       if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK | NM_FORCEARP)) return -1;
000006  f024003a          BIC      r0,r4,#0x3a
00000a  b108              CBZ      r0,|L22.16|
00000c  1e68              SUBS     r0,r5,#1
                  |L22.14|
;;;615    #endif      
;;;616       tmp = getMR();
;;;617       tmp |= (uint8_t)netmode;
;;;618       setMR(tmp);
;;;619       return 0;
;;;620    }
00000e  bd70              POP      {r4-r6,pc}
                  |L22.16|
000010  2000              MOVS     r0,#0                 ;616
000012  f7fffffe          BL       WIZCHIP_READ
000016  4605              MOV      r5,r0                 ;616
000018  4325              ORRS     r5,r5,r4              ;617
00001a  4629              MOV      r1,r5                 ;618
00001c  2000              MOVS     r0,#0                 ;618
00001e  f7fffffe          BL       WIZCHIP_WRITE
000022  2000              MOVS     r0,#0                 ;619
000024  e7f3              B        |L22.14|
;;;621    
                          ENDP


                          AREA ||i.wizchip_settimeout||, CODE, READONLY, ALIGN=1

                  wizchip_settimeout PROC
;;;626    
;;;627    void wizchip_settimeout(wiz_NetTimeout* nettime)
000000  b510              PUSH     {r4,lr}
;;;628    {
000002  4604              MOV      r4,r0
;;;629       setRCR(nettime->retry_cnt);
000004  7821              LDRB     r1,[r4,#0]
000006  f44f50d8          MOV      r0,#0x1b00
00000a  f7fffffe          BL       WIZCHIP_WRITE
;;;630       setRTR(nettime->time_100us);
00000e  8860              LDRH     r0,[r4,#2]
000010  1201              ASRS     r1,r0,#8
000012  f44f50c8          MOV      r0,#0x1900
000016  f7fffffe          BL       WIZCHIP_WRITE
00001a  78a1              LDRB     r1,[r4,#2]
00001c  f44f50d0          MOV      r0,#0x1a00
000020  f7fffffe          BL       WIZCHIP_WRITE
;;;631    }
000024  bd10              POP      {r4,pc}
;;;632    
                          ENDP


                          AREA ||i.wizchip_spi_readbyte||, CODE, READONLY, ALIGN=1

                  wizchip_spi_readbyte PROC
;;;99      */
;;;100    uint8_t wizchip_spi_readbyte(void)        {return 0;};
000000  2000              MOVS     r0,#0
000002  4770              BX       lr
;;;101    /**
                          ENDP


                          AREA ||i.wizchip_spi_writebyte||, CODE, READONLY, ALIGN=1

                  wizchip_spi_writebyte PROC
;;;105     */
;;;106    void 	wizchip_spi_writebyte(uint8_t wb) {};
000000  4770              BX       lr
;;;107    
                          ENDP


                          AREA ||i.wizchip_sw_reset||, CODE, READONLY, ALIGN=1

                  wizchip_sw_reset PROC
;;;291    
;;;292    void wizchip_sw_reset(void)
000000  b500              PUSH     {lr}
;;;293    {
000002  b085              SUB      sp,sp,#0x14
;;;294       uint8_t gw[4], sn[4], sip[4];
;;;295       uint8_t mac[6];
;;;296       getSHAR(mac);
000004  2206              MOVS     r2,#6
000006  4669              MOV      r1,sp
000008  f44f6010          MOV      r0,#0x900
00000c  f7fffffe          BL       WIZCHIP_READ_BUF
;;;297       getGAR(gw);  getSUBR(sn);  getSIPR(sip);
000010  2204              MOVS     r2,#4
000012  a904              ADD      r1,sp,#0x10
000014  0190              LSLS     r0,r2,#6
000016  f7fffffe          BL       WIZCHIP_READ_BUF
00001a  2204              MOVS     r2,#4
00001c  a903              ADD      r1,sp,#0xc
00001e  f44f60a0          MOV      r0,#0x500
000022  f7fffffe          BL       WIZCHIP_READ_BUF
000026  2204              MOVS     r2,#4
000028  a902              ADD      r1,sp,#8
00002a  f44f6070          MOV      r0,#0xf00
00002e  f7fffffe          BL       WIZCHIP_READ_BUF
;;;298       setMR(MR_RST);
000032  2180              MOVS     r1,#0x80
000034  2000              MOVS     r0,#0
000036  f7fffffe          BL       WIZCHIP_WRITE
;;;299       getMR(); // for delay
00003a  2000              MOVS     r0,#0
00003c  f7fffffe          BL       WIZCHIP_READ
;;;300       setSHAR(mac);
000040  2206              MOVS     r2,#6
000042  4669              MOV      r1,sp
000044  f44f6010          MOV      r0,#0x900
000048  f7fffffe          BL       WIZCHIP_WRITE_BUF
;;;301       setGAR(gw);
00004c  2204              MOVS     r2,#4
00004e  a904              ADD      r1,sp,#0x10
000050  0190              LSLS     r0,r2,#6
000052  f7fffffe          BL       WIZCHIP_WRITE_BUF
;;;302       setSUBR(sn);
000056  2204              MOVS     r2,#4
000058  a903              ADD      r1,sp,#0xc
00005a  f44f60a0          MOV      r0,#0x500
00005e  f7fffffe          BL       WIZCHIP_WRITE_BUF
;;;303       setSIPR(sip);
000062  2204              MOVS     r2,#4
000064  a902              ADD      r1,sp,#8
000066  f44f6070          MOV      r0,#0xf00
00006a  f7fffffe          BL       WIZCHIP_WRITE_BUF
;;;304    }
00006e  b005              ADD      sp,sp,#0x14
000070  bd00              POP      {pc}
;;;305    
                          ENDP


                          AREA ||i.wizphy_getphyconf||, CODE, READONLY, ALIGN=1

                  wizphy_getphyconf PROC
;;;509    
;;;510    void wizphy_getphyconf(wiz_PhyConf* phyconf)
000000  b570              PUSH     {r4-r6,lr}
;;;511    {
000002  4604              MOV      r4,r0
;;;512       uint8_t tmp = 0;
000004  2500              MOVS     r5,#0
;;;513       tmp = getPHYCFGR();
000006  f44f5038          MOV      r0,#0x2e00
00000a  f7fffffe          BL       WIZCHIP_READ
00000e  4605              MOV      r5,r0
;;;514       phyconf->by   = (tmp & PHYCFGR_OPMD) ? PHY_CONFBY_SW : PHY_CONFBY_HW;
000010  f3c51080          UBFX     r0,r5,#6,#1
000014  7020              STRB     r0,[r4,#0]
;;;515       switch(tmp & PHYCFGR_OPMDC_ALLA)
000016  f0050038          AND      r0,r5,#0x38
00001a  2820              CMP      r0,#0x20
00001c  d002              BEQ      |L27.36|
00001e  2838              CMP      r0,#0x38
000020  d103              BNE      |L27.42|
;;;516       {
;;;517          case PHYCFGR_OPMDC_ALLA:
;;;518          case PHYCFGR_OPMDC_100FA: 
000022  bf00              NOP      
                  |L27.36|
;;;519             phyconf->mode = PHY_MODE_AUTONEGO;
000024  2001              MOVS     r0,#1
000026  7060              STRB     r0,[r4,#1]
;;;520             break;
000028  e002              B        |L27.48|
                  |L27.42|
;;;521          default:
;;;522             phyconf->mode = PHY_MODE_MANUAL;
00002a  2000              MOVS     r0,#0
00002c  7060              STRB     r0,[r4,#1]
;;;523             break;
00002e  bf00              NOP      
                  |L27.48|
000030  bf00              NOP                            ;520
;;;524       }
;;;525       switch(tmp & PHYCFGR_OPMDC_ALLA)
000032  f0050038          AND      r0,r5,#0x38
000036  2810              CMP      r0,#0x10
000038  d005              BEQ      |L27.70|
00003a  2818              CMP      r0,#0x18
00003c  d002              BEQ      |L27.68|
00003e  2820              CMP      r0,#0x20
000040  d104              BNE      |L27.76|
;;;526       {
;;;527          case PHYCFGR_OPMDC_100FA:
;;;528          case PHYCFGR_OPMDC_100F:
000042  bf00              NOP      
                  |L27.68|
;;;529          case PHYCFGR_OPMDC_100H:
000044  bf00              NOP      
                  |L27.70|
;;;530             phyconf->speed = PHY_SPEED_100;
000046  2001              MOVS     r0,#1
000048  70a0              STRB     r0,[r4,#2]
;;;531             break;
00004a  e002              B        |L27.82|
                  |L27.76|
;;;532          default:
;;;533             phyconf->speed = PHY_SPEED_10;
00004c  2000              MOVS     r0,#0
00004e  70a0              STRB     r0,[r4,#2]
;;;534             break;
000050  bf00              NOP      
                  |L27.82|
000052  bf00              NOP                            ;531
;;;535       }
;;;536       switch(tmp & PHYCFGR_OPMDC_ALLA)
000054  f0050038          AND      r0,r5,#0x38
000058  2808              CMP      r0,#8
00005a  d005              BEQ      |L27.104|
00005c  2818              CMP      r0,#0x18
00005e  d002              BEQ      |L27.102|
000060  2820              CMP      r0,#0x20
000062  d104              BNE      |L27.110|
;;;537       {
;;;538          case PHYCFGR_OPMDC_100FA:
;;;539          case PHYCFGR_OPMDC_100F:
000064  bf00              NOP      
                  |L27.102|
;;;540          case PHYCFGR_OPMDC_10F:
000066  bf00              NOP      
                  |L27.104|
;;;541             phyconf->duplex = PHY_DUPLEX_FULL;
000068  2001              MOVS     r0,#1
00006a  70e0              STRB     r0,[r4,#3]
;;;542             break;
00006c  e002              B        |L27.116|
                  |L27.110|
;;;543          default:
;;;544             phyconf->duplex = PHY_DUPLEX_HALF;
00006e  2000              MOVS     r0,#0
000070  70e0              STRB     r0,[r4,#3]
;;;545             break;
000072  bf00              NOP      
                  |L27.116|
000074  bf00              NOP                            ;542
;;;546       }
;;;547    }
000076  bd70              POP      {r4-r6,pc}
;;;548    
                          ENDP


                          AREA ||i.wizphy_getphylink||, CODE, READONLY, ALIGN=1

                  wizphy_getphylink PROC
;;;427    
;;;428    int8_t wizphy_getphylink(void)
000000  b510              PUSH     {r4,lr}
;;;429    {
;;;430       int8_t tmp;
;;;431    #if   _WIZCHIP_ == 5200
;;;432       if(getPHYSTATUS() & PHYSTATUS_LINK)
;;;433          tmp = PHY_LINK_ON;
;;;434       else
;;;435          tmp = PHY_LINK_OFF;
;;;436    #elif _WIZCHIP_ == 5500
;;;437       if(getPHYCFGR() & PHYCFGR_LNK_ON)
000002  f44f5038          MOV      r0,#0x2e00
000006  f7fffffe          BL       WIZCHIP_READ
00000a  f0000001          AND      r0,r0,#1
00000e  b108              CBZ      r0,|L28.20|
;;;438          tmp = PHY_LINK_ON;
000010  2401              MOVS     r4,#1
000012  e000              B        |L28.22|
                  |L28.20|
;;;439       else
;;;440          tmp = PHY_LINK_OFF;
000014  2400              MOVS     r4,#0
                  |L28.22|
;;;441    #else
;;;442       tmp = -1;
;;;443    #endif
;;;444       return tmp;
000016  4620              MOV      r0,r4
;;;445    }
000018  bd10              POP      {r4,pc}
;;;446    
                          ENDP


                          AREA ||i.wizphy_getphypmode||, CODE, READONLY, ALIGN=1

                  wizphy_getphypmode PROC
;;;448    
;;;449    int8_t wizphy_getphypmode(void)
000000  b510              PUSH     {r4,lr}
;;;450    {
;;;451       int8_t tmp = 0;
000002  2400              MOVS     r4,#0
;;;452       #if   _WIZCHIP_ == 5200
;;;453          if(getPHYSTATUS() & PHYSTATUS_POWERDOWN)
;;;454             tmp = PHY_POWER_DOWN;
;;;455          else          
;;;456             tmp = PHY_POWER_NORM;
;;;457       #elif _WIZCHIP_ == 5500
;;;458          if(getPHYCFGR() & PHYCFGR_OPMDC_PDOWN)
000004  f44f5038          MOV      r0,#0x2e00
000008  f7fffffe          BL       WIZCHIP_READ
00000c  f0000030          AND      r0,r0,#0x30
000010  b108              CBZ      r0,|L29.22|
;;;459             tmp = PHY_POWER_DOWN;
000012  2401              MOVS     r4,#1
000014  e000              B        |L29.24|
                  |L29.22|
;;;460          else 
;;;461             tmp = PHY_POWER_NORM;
000016  2400              MOVS     r4,#0
                  |L29.24|
;;;462       #else
;;;463          tmp = -1;
;;;464       #endif
;;;465       return tmp;
000018  4620              MOV      r0,r4
;;;466    }
00001a  bd10              POP      {r4,pc}
;;;467    #endif
                          ENDP


                          AREA ||i.wizphy_getphystat||, CODE, READONLY, ALIGN=1

                  wizphy_getphystat PROC
;;;548    
;;;549    void wizphy_getphystat(wiz_PhyConf* phyconf)
000000  b570              PUSH     {r4-r6,lr}
;;;550    {
000002  4604              MOV      r4,r0
;;;551       uint8_t tmp = getPHYCFGR();
000004  f44f5038          MOV      r0,#0x2e00
000008  f7fffffe          BL       WIZCHIP_READ
00000c  4605              MOV      r5,r0
;;;552       phyconf->duplex = (tmp & PHYCFGR_DPX_FULL) ? PHY_DUPLEX_FULL : PHY_DUPLEX_HALF;
00000e  f3c50080          UBFX     r0,r5,#2,#1
000012  70e0              STRB     r0,[r4,#3]
;;;553       phyconf->speed  = (tmp & PHYCFGR_SPD_100) ? PHY_SPEED_100 : PHY_SPEED_10;
000014  f3c50040          UBFX     r0,r5,#1,#1
000018  70a0              STRB     r0,[r4,#2]
;;;554    }
00001a  bd70              POP      {r4-r6,pc}
;;;555    
                          ENDP


                          AREA ||i.wizphy_reset||, CODE, READONLY, ALIGN=1

                  wizphy_reset PROC
;;;469    #if _WIZCHIP_ == 5500
;;;470    void wizphy_reset(void)
000000  b510              PUSH     {r4,lr}
;;;471    {
;;;472       uint8_t tmp = getPHYCFGR();
000002  f44f5038          MOV      r0,#0x2e00
000006  f7fffffe          BL       WIZCHIP_READ
00000a  4604              MOV      r4,r0
;;;473       tmp &= PHYCFGR_RST;
00000c  f0240480          BIC      r4,r4,#0x80
;;;474       setPHYCFGR(tmp);
000010  4621              MOV      r1,r4
000012  f44f5038          MOV      r0,#0x2e00
000016  f7fffffe          BL       WIZCHIP_WRITE
;;;475       tmp = getPHYCFGR(); 
00001a  f44f5038          MOV      r0,#0x2e00
00001e  f7fffffe          BL       WIZCHIP_READ
000022  4604              MOV      r4,r0
;;;476       tmp |= ~PHYCFGR_RST;
000024  f0440480          ORR      r4,r4,#0x80
;;;477       setPHYCFGR(tmp);
000028  4621              MOV      r1,r4
00002a  f44f5038          MOV      r0,#0x2e00
00002e  f7fffffe          BL       WIZCHIP_WRITE
;;;478    }
000032  bd10              POP      {r4,pc}
;;;479    
                          ENDP


                          AREA ||i.wizphy_setphyconf||, CODE, READONLY, ALIGN=1

                  wizphy_setphyconf PROC
;;;479    
;;;480    void wizphy_setphyconf(wiz_PhyConf* phyconf)
000000  b570              PUSH     {r4-r6,lr}
;;;481    {
000002  4605              MOV      r5,r0
;;;482       uint8_t tmp = 0;
000004  2400              MOVS     r4,#0
;;;483       if(phyconf->by == PHY_CONFBY_SW)
000006  7828              LDRB     r0,[r5,#0]
000008  2801              CMP      r0,#1
00000a  d102              BNE      |L32.18|
;;;484          tmp |= PHYCFGR_OPMD;
00000c  f0440440          ORR      r4,r4,#0x40
000010  e001              B        |L32.22|
                  |L32.18|
;;;485       else
;;;486          tmp &= ~PHYCFGR_OPMD;
000012  f0240440          BIC      r4,r4,#0x40
                  |L32.22|
;;;487       if(phyconf->mode == PHY_MODE_AUTONEGO)
000016  7868              LDRB     r0,[r5,#1]
000018  2801              CMP      r0,#1
00001a  d102              BNE      |L32.34|
;;;488          tmp |= PHYCFGR_OPMDC_ALLA;
00001c  f0440438          ORR      r4,r4,#0x38
000020  e012              B        |L32.72|
                  |L32.34|
;;;489       else
;;;490       {
;;;491          if(phyconf->duplex == PHY_DUPLEX_FULL)
000022  78e8              LDRB     r0,[r5,#3]
000024  2801              CMP      r0,#1
000026  d108              BNE      |L32.58|
;;;492          {
;;;493             if(phyconf->speed == PHY_SPEED_100)
000028  78a8              LDRB     r0,[r5,#2]
00002a  2801              CMP      r0,#1
00002c  d102              BNE      |L32.52|
;;;494                tmp |= PHYCFGR_OPMDC_100F;
00002e  f0440418          ORR      r4,r4,#0x18
000032  e009              B        |L32.72|
                  |L32.52|
;;;495             else
;;;496                tmp |= PHYCFGR_OPMDC_10F;
000034  f0440408          ORR      r4,r4,#8
000038  e006              B        |L32.72|
                  |L32.58|
;;;497          }   
;;;498          else
;;;499          {
;;;500             if(phyconf->speed == PHY_SPEED_100)
00003a  78a8              LDRB     r0,[r5,#2]
00003c  2801              CMP      r0,#1
00003e  d102              BNE      |L32.70|
;;;501                tmp |= PHYCFGR_OPMDC_100H;
000040  f0440410          ORR      r4,r4,#0x10
000044  e000              B        |L32.72|
                  |L32.70|
;;;502             else
;;;503                tmp |= PHYCFGR_OPMDC_10H;
000046  bf00              NOP      
                  |L32.72|
;;;504          }
;;;505       }
;;;506       setPHYCFGR(tmp);
000048  4621              MOV      r1,r4
00004a  f44f5038          MOV      r0,#0x2e00
00004e  f7fffffe          BL       WIZCHIP_WRITE
;;;507       wizphy_reset();
000052  f7fffffe          BL       wizphy_reset
;;;508    }
000056  bd70              POP      {r4-r6,pc}
;;;509    
                          ENDP


                          AREA ||i.wizphy_setphypmode||, CODE, READONLY, ALIGN=1

                  wizphy_setphypmode PROC
;;;555    
;;;556    int8_t wizphy_setphypmode(uint8_t pmode)
000000  b570              PUSH     {r4-r6,lr}
;;;557    {
000002  4605              MOV      r5,r0
;;;558       uint8_t tmp = 0;
000004  2400              MOVS     r4,#0
;;;559       tmp = getPHYCFGR();
000006  f44f5038          MOV      r0,#0x2e00
00000a  f7fffffe          BL       WIZCHIP_READ
00000e  4604              MOV      r4,r0
;;;560       if((tmp & PHYCFGR_OPMD)== 0) return -1;
000010  f0040040          AND      r0,r4,#0x40
000014  b910              CBNZ     r0,|L33.28|
000016  f04f30ff          MOV      r0,#0xffffffff
                  |L33.26|
;;;561       tmp &= ~PHYCFGR_OPMDC_ALLA;         
;;;562       if( pmode == PHY_POWER_DOWN)
;;;563          tmp |= PHYCFGR_OPMDC_PDOWN;
;;;564       else
;;;565          tmp |= PHYCFGR_OPMDC_ALLA;
;;;566       setPHYCFGR(tmp);
;;;567       wizphy_reset();
;;;568       tmp = getPHYCFGR();
;;;569       if( pmode == PHY_POWER_DOWN)
;;;570       {
;;;571          if(tmp & PHYCFGR_OPMDC_PDOWN) return 0;
;;;572       }
;;;573       else
;;;574       {
;;;575          if(tmp & PHYCFGR_OPMDC_ALLA) return 0;
;;;576       }
;;;577       return -1;
;;;578    }
00001a  bd70              POP      {r4-r6,pc}
                  |L33.28|
00001c  f0240438          BIC      r4,r4,#0x38           ;561
000020  2d01              CMP      r5,#1                 ;562
000022  d102              BNE      |L33.42|
000024  f0440430          ORR      r4,r4,#0x30           ;563
000028  e001              B        |L33.46|
                  |L33.42|
00002a  f0440438          ORR      r4,r4,#0x38           ;565
                  |L33.46|
00002e  4621              MOV      r1,r4                 ;566
000030  f44f5038          MOV      r0,#0x2e00            ;566
000034  f7fffffe          BL       WIZCHIP_WRITE
000038  f7fffffe          BL       wizphy_reset
00003c  f44f5038          MOV      r0,#0x2e00            ;568
000040  f7fffffe          BL       WIZCHIP_READ
000044  4604              MOV      r4,r0                 ;568
000046  2d01              CMP      r5,#1                 ;569
000048  d104              BNE      |L33.84|
00004a  f0040030          AND      r0,r4,#0x30           ;571
00004e  b130              CBZ      r0,|L33.94|
000050  2000              MOVS     r0,#0                 ;571
000052  e7e2              B        |L33.26|
                  |L33.84|
000054  f0040038          AND      r0,r4,#0x38           ;575
000058  b108              CBZ      r0,|L33.94|
00005a  2000              MOVS     r0,#0                 ;575
00005c  e7dd              B        |L33.26|
                  |L33.94|
00005e  f04f30ff          MOV      r0,#0xffffffff        ;577
000062  e7da              B        |L33.26|
;;;579    #endif
                          ENDP


                          AREA ||.data||, DATA, ALIGN=2

                  WIZCHIP
000000  0201              DCW      0x0201
000002  5735              DCB      0x57,0x35
000004  35303000          DCB      0x35,0x30,0x30,0x00
                          DCD      wizchip_cris_enter
                          DCD      wizchip_cris_exit
                          DCD      wizchip_cs_select
                          DCD      wizchip_cs_deselect
                          DCD      wizchip_bus_readbyte
                          DCD      wizchip_bus_writebyte
                  _DNS_
                          DCD      0x00000000
                  _DHCP_
000024  00                DCB      0x00
