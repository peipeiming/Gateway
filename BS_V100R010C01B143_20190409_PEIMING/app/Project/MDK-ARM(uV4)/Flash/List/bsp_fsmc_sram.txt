; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\flash\obj\bsp_fsmc_sram.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\bsp_fsmc_sram.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931,870 -I..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\User\bsp -I..\..\User\bsp\inc -I..\..\User -I..\..\Libraries\CMSIS\Include -I..\..\FreeRTOS\include -I..\..\FreeRTOS\portable\RVDS\ARM_CM3 -I..\..\MQTT -I..\..\Ethernet -I..\..\Ethernet\W5500 -I..\..\Internet\DHCP -I..\..\Internet\DNS -I..\..\User\app\src -I..\..\User\app\inc -I..\..\Internet\NTP -I..\..\Internet\HTTP -I.\RTE\_Flash -ID:\MDK5\ARM\CMSIS\5.0.1\CMSIS\Include -ID:\MDK5\Keil\STM32F1xx_DFP\2.0.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=523 -D_RTE_ -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=.\flash\obj\bsp_fsmc_sram.crf ..\..\User\bsp\src\bsp_fsmc_sram.c]
                          THUMB

                          AREA ||i.bsp_InitExtSRAM||, CODE, READONLY, ALIGN=2

                  bsp_InitExtSRAM PROC
;;;27     */
;;;28     void bsp_InitExtSRAM(void)
000000  b500              PUSH     {lr}
;;;29     {
000002  b097              SUB      sp,sp,#0x5c
;;;30     	FSMC_NORSRAMInitTypeDef  FSMC_NORSRAMInitStructure;
;;;31     	FSMC_NORSRAMTimingInitTypeDef  p;
;;;32     	GPIO_InitTypeDef GPIO_InitStructure; 
;;;33     
;;;34     	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_FSMC, ENABLE);
000004  2101              MOVS     r1,#1
000006  0208              LSLS     r0,r1,#8
000008  f7fffffe          BL       RCC_AHBPeriphClockCmd
;;;35     		
;;;36     	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOD | RCC_APB2Periph_GPIOG | RCC_APB2Periph_GPIOE |
00000c  2101              MOVS     r1,#1
00000e  f44f70f0          MOV      r0,#0x1e0
000012  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;37     	                     RCC_APB2Periph_GPIOF, ENABLE);
;;;38     	
;;;39     	/* 配置SRAM数据线 */
;;;40     	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_8 | GPIO_Pin_9 |
000016  f24c7003          MOV      r0,#0xc703
00001a  f8ad0000          STRH     r0,[sp,#0]
;;;41     	                            GPIO_Pin_10 | GPIO_Pin_14 | GPIO_Pin_15;
;;;42     	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
00001e  2018              MOVS     r0,#0x18
000020  f88d0003          STRB     r0,[sp,#3]
;;;43     	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
000024  2003              MOVS     r0,#3
000026  f88d0002          STRB     r0,[sp,#2]
;;;44     	GPIO_Init(GPIOD, &GPIO_InitStructure); 
00002a  4669              MOV      r1,sp
00002c  4830              LDR      r0,|L1.240|
00002e  f7fffffe          BL       GPIO_Init
;;;45     	
;;;46     	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_7 | GPIO_Pin_8 | GPIO_Pin_9 | GPIO_Pin_10 |
000032  f64f7080          MOV      r0,#0xff80
000036  f8ad0000          STRH     r0,[sp,#0]
;;;47     	                            GPIO_Pin_11 | GPIO_Pin_12 | GPIO_Pin_13 | GPIO_Pin_14 | 
;;;48     	                            GPIO_Pin_15;
;;;49     	GPIO_Init(GPIOE, &GPIO_InitStructure);
00003a  4669              MOV      r1,sp
00003c  482d              LDR      r0,|L1.244|
00003e  f7fffffe          BL       GPIO_Init
;;;50     	
;;;51     	/* 配置SRAM 地址线 */
;;;52     	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_2 | GPIO_Pin_3 | 
000042  f24f003f          MOV      r0,#0xf03f
000046  f8ad0000          STRH     r0,[sp,#0]
;;;53     	                            GPIO_Pin_4 | GPIO_Pin_5 | GPIO_Pin_12 | GPIO_Pin_13 | 
;;;54     	                            GPIO_Pin_14 | GPIO_Pin_15;
;;;55     	GPIO_Init(GPIOF, &GPIO_InitStructure);
00004a  4669              MOV      r1,sp
00004c  482a              LDR      r0,|L1.248|
00004e  f7fffffe          BL       GPIO_Init
;;;56     	
;;;57     	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_2 | GPIO_Pin_3 | 
000052  203f              MOVS     r0,#0x3f
000054  f8ad0000          STRH     r0,[sp,#0]
;;;58     	                            GPIO_Pin_4 | GPIO_Pin_5;
;;;59     	GPIO_Init(GPIOG, &GPIO_InitStructure);
000058  4669              MOV      r1,sp
00005a  4828              LDR      r0,|L1.252|
00005c  f7fffffe          BL       GPIO_Init
;;;60     	
;;;61     	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_11 | GPIO_Pin_12 | GPIO_Pin_13; 
000060  f44f5060          MOV      r0,#0x3800
000064  f8ad0000          STRH     r0,[sp,#0]
;;;62     	GPIO_Init(GPIOD, &GPIO_InitStructure);
000068  4669              MOV      r1,sp
00006a  4821              LDR      r0,|L1.240|
00006c  f7fffffe          BL       GPIO_Init
;;;63     	
;;;64     	/* 配置 NOE 和 NWE */  
;;;65     	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_4 |GPIO_Pin_5;
000070  2030              MOVS     r0,#0x30
000072  f8ad0000          STRH     r0,[sp,#0]
;;;66     	GPIO_Init(GPIOD, &GPIO_InitStructure);
000076  4669              MOV      r1,sp
000078  481d              LDR      r0,|L1.240|
00007a  f7fffffe          BL       GPIO_Init
;;;67     	
;;;68     	/* 配置 NE3 */
;;;69     	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10; 
00007e  f44f6080          MOV      r0,#0x400
000082  f8ad0000          STRH     r0,[sp,#0]
;;;70     	GPIO_Init(GPIOG, &GPIO_InitStructure);
000086  4669              MOV      r1,sp
000088  481c              LDR      r0,|L1.252|
00008a  f7fffffe          BL       GPIO_Init
;;;71     	
;;;72     	/* 配置 NBL0, NBL1 */
;;;73     	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1; 
00008e  2003              MOVS     r0,#3
000090  f8ad0000          STRH     r0,[sp,#0]
;;;74     	GPIO_Init(GPIOE, &GPIO_InitStructure); 
000094  4669              MOV      r1,sp
000096  4817              LDR      r0,|L1.244|
000098  f7fffffe          BL       GPIO_Init
;;;75     	
;;;76     	/* 配置FSMC */
;;;77     	p.FSMC_AddressSetupTime = 0;
00009c  2000              MOVS     r0,#0
00009e  9001              STR      r0,[sp,#4]
;;;78     	p.FSMC_AddressHoldTime = 0;
0000a0  9002              STR      r0,[sp,#8]
;;;79     	p.FSMC_DataSetupTime = 3;           /* 根据SRAM的最大速度进行调整  */
0000a2  2003              MOVS     r0,#3
0000a4  9003              STR      r0,[sp,#0xc]
;;;80     	p.FSMC_BusTurnAroundDuration = 0;
0000a6  2000              MOVS     r0,#0
0000a8  9004              STR      r0,[sp,#0x10]
;;;81     	p.FSMC_CLKDivision = 0;
0000aa  9005              STR      r0,[sp,#0x14]
;;;82     	p.FSMC_DataLatency = 0;
0000ac  9006              STR      r0,[sp,#0x18]
;;;83     	p.FSMC_AccessMode = FSMC_AccessMode_A;
0000ae  9007              STR      r0,[sp,#0x1c]
;;;84     	
;;;85     	FSMC_NORSRAMInitStructure.FSMC_Bank = FSMC_Bank1_NORSRAM3;
0000b0  2004              MOVS     r0,#4
0000b2  9008              STR      r0,[sp,#0x20]
;;;86     	FSMC_NORSRAMInitStructure.FSMC_DataAddressMux = FSMC_DataAddressMux_Disable;
0000b4  2000              MOVS     r0,#0
0000b6  9009              STR      r0,[sp,#0x24]
;;;87     	FSMC_NORSRAMInitStructure.FSMC_MemoryType = FSMC_MemoryType_SRAM;
0000b8  900a              STR      r0,[sp,#0x28]
;;;88     	FSMC_NORSRAMInitStructure.FSMC_MemoryDataWidth = FSMC_MemoryDataWidth_16b;
0000ba  2010              MOVS     r0,#0x10
0000bc  900b              STR      r0,[sp,#0x2c]
;;;89     	FSMC_NORSRAMInitStructure.FSMC_BurstAccessMode = FSMC_BurstAccessMode_Disable;
0000be  2000              MOVS     r0,#0
0000c0  900c              STR      r0,[sp,#0x30]
;;;90     	FSMC_NORSRAMInitStructure.FSMC_AsynchronousWait = FSMC_AsynchronousWait_Disable;  
0000c2  900d              STR      r0,[sp,#0x34]
;;;91     	FSMC_NORSRAMInitStructure.FSMC_WaitSignalPolarity = FSMC_WaitSignalPolarity_Low;
0000c4  900e              STR      r0,[sp,#0x38]
;;;92     	FSMC_NORSRAMInitStructure.FSMC_WrapMode = FSMC_WrapMode_Disable;
0000c6  900f              STR      r0,[sp,#0x3c]
;;;93     	FSMC_NORSRAMInitStructure.FSMC_WaitSignalActive = FSMC_WaitSignalActive_BeforeWaitState;
0000c8  9010              STR      r0,[sp,#0x40]
;;;94     	FSMC_NORSRAMInitStructure.FSMC_WriteOperation = FSMC_WriteOperation_Enable;
0000ca  f44f5080          MOV      r0,#0x1000
0000ce  9011              STR      r0,[sp,#0x44]
;;;95     	FSMC_NORSRAMInitStructure.FSMC_WaitSignal = FSMC_WaitSignal_Disable;
0000d0  2000              MOVS     r0,#0
0000d2  9012              STR      r0,[sp,#0x48]
;;;96     	FSMC_NORSRAMInitStructure.FSMC_ExtendedMode = FSMC_ExtendedMode_Disable;
0000d4  9013              STR      r0,[sp,#0x4c]
;;;97     	FSMC_NORSRAMInitStructure.FSMC_WriteBurst = FSMC_WriteBurst_Disable;
0000d6  9014              STR      r0,[sp,#0x50]
;;;98     	FSMC_NORSRAMInitStructure.FSMC_ReadWriteTimingStruct = &p;
0000d8  a801              ADD      r0,sp,#4
0000da  9015              STR      r0,[sp,#0x54]
;;;99     	FSMC_NORSRAMInitStructure.FSMC_WriteTimingStruct = &p;
0000dc  9016              STR      r0,[sp,#0x58]
;;;100    	
;;;101    	FSMC_NORSRAMInit(&FSMC_NORSRAMInitStructure); 
0000de  a808              ADD      r0,sp,#0x20
0000e0  f7fffffe          BL       FSMC_NORSRAMInit
;;;102    	
;;;103    	/*!< Enable FSMC Bank1_SRAM Bank */
;;;104    	FSMC_NORSRAMCmd(FSMC_Bank1_NORSRAM3, ENABLE);  
0000e4  2101              MOVS     r1,#1
0000e6  2004              MOVS     r0,#4
0000e8  f7fffffe          BL       FSMC_NORSRAMCmd
;;;105    }
0000ec  b017              ADD      sp,sp,#0x5c
0000ee  bd00              POP      {pc}
;;;106    
                          ENDP

                  |L1.240|
                          DCD      0x40011400
                  |L1.244|
                          DCD      0x40011800
                  |L1.248|
                          DCD      0x40011c00
                  |L1.252|
                          DCD      0x40012000

                          AREA ||i.bsp_TestExtSRAM||, CODE, READONLY, ALIGN=2

                  bsp_TestExtSRAM PROC
;;;114    */
;;;115    uint32_t bsp_TestExtSRAM(void)
000000  b5f8              PUSH     {r3-r7,lr}
;;;116    {
;;;117    	uint32_t i;
;;;118    	uint32_t *pSRAM;
;;;119    	uint8_t *pBytes;
;;;120    	uint32_t err;
;;;121    	const uint8_t ByteBuf[4] = {0x55, 0xA5, 0x5A, 0xAA};
000002  a020              ADR      r0,|L2.132|
000004  6800              LDR      r0,[r0,#0]
000006  9000              STR      r0,[sp,#0]
;;;122    
;;;123    	/* 写SRAM */
;;;124    	pSRAM = (uint32_t *)EXT_SRAM_ADDR;
000008  f04f47d0          MOV      r7,#0x68000000
;;;125    	for (i = 0; i < EXT_SRAM_SIZE / 4; i++)
00000c  2400              MOVS     r4,#0
00000e  e001              B        |L2.20|
                  |L2.16|
;;;126    	{
;;;127    		*pSRAM++ = i;
000010  c710              STM      r7!,{r4}
000012  1c64              ADDS     r4,r4,#1              ;125
                  |L2.20|
000014  f5b42f80          CMP      r4,#0x40000           ;125
000018  d3fa              BCC      |L2.16|
;;;128    	}
;;;129    
;;;130    	/* 读SRAM */
;;;131    	err = 0;
00001a  2500              MOVS     r5,#0
;;;132    	pSRAM = (uint32_t *)EXT_SRAM_ADDR;
00001c  f04f47d0          MOV      r7,#0x68000000
;;;133    	for (i = 0; i < EXT_SRAM_SIZE / 4; i++)
000020  2400              MOVS     r4,#0
000022  e004              B        |L2.46|
                  |L2.36|
;;;134    	{
;;;135    		if (*pSRAM++ != i)
000024  cf02              LDM      r7!,{r1}
000026  42a1              CMP      r1,r4
000028  d000              BEQ      |L2.44|
;;;136    		{
;;;137    			err++;
00002a  1c6d              ADDS     r5,r5,#1
                  |L2.44|
00002c  1c64              ADDS     r4,r4,#1              ;133
                  |L2.46|
00002e  f5b42f80          CMP      r4,#0x40000           ;133
000032  d3f7              BCC      |L2.36|
;;;138    		}
;;;139    	}
;;;140    
;;;141    	if (err >  0)
000034  b125              CBZ      r5,|L2.64|
;;;142    	{
;;;143    		printf("TestExtSRAM:write word error.\r\n");
000036  a014              ADR      r0,|L2.136|
000038  f7fffffe          BL       __2printf
;;;144    		return  (4 * err);
00003c  00a8              LSLS     r0,r5,#2
                  |L2.62|
;;;145    	}
;;;146    
;;;147    	/* 测试按字节方式访问, 目的是验证 FSMC_NBL0 、 FSMC_NBL1 口线 */
;;;148    	pBytes = (uint8_t *)EXT_SRAM_ADDR;
;;;149    	for (i = 0; i < sizeof(ByteBuf); i++)
;;;150    	{
;;;151    		*pBytes++ = ByteBuf[i];
;;;152    	}
;;;153    
;;;154    	/* 比较SRAM的数据 */
;;;155    	err = 0;
;;;156    	pBytes = (uint8_t *)EXT_SRAM_ADDR;
;;;157    	for (i = 0; i < sizeof(ByteBuf); i++)
;;;158    	{
;;;159    		if (*pBytes++ != ByteBuf[i])
;;;160    		{
;;;161    			
;;;162    			err++;
;;;163    		}
;;;164    	}
;;;165    	if (err >  0)
;;;166    	{
;;;167    		printf("TestExtSRAM:write bytes error.\r\n");
;;;168    		return err;
;;;169    	}
;;;170    	return 0;
;;;171    }
00003e  bdf8              POP      {r3-r7,pc}
                  |L2.64|
000040  f04f46d0          MOV      r6,#0x68000000        ;148
000044  2400              MOVS     r4,#0                 ;149
000046  e004              B        |L2.82|
                  |L2.72|
000048  f81d0004          LDRB     r0,[sp,r4]            ;151
00004c  f8060b01          STRB     r0,[r6],#1            ;151
000050  1c64              ADDS     r4,r4,#1              ;149
                  |L2.82|
000052  2c04              CMP      r4,#4                 ;149
000054  d3f8              BCC      |L2.72|
000056  2500              MOVS     r5,#0                 ;155
000058  f04f46d0          MOV      r6,#0x68000000        ;156
00005c  2400              MOVS     r4,#0                 ;157
00005e  e007              B        |L2.112|
                  |L2.96|
000060  f8161b01          LDRB     r1,[r6],#1            ;159
000064  f81d0004          LDRB     r0,[sp,r4]            ;159
000068  4281              CMP      r1,r0                 ;159
00006a  d000              BEQ      |L2.110|
00006c  1c6d              ADDS     r5,r5,#1              ;162
                  |L2.110|
00006e  1c64              ADDS     r4,r4,#1              ;157
                  |L2.112|
000070  2c04              CMP      r4,#4                 ;157
000072  d3f5              BCC      |L2.96|
000074  b125              CBZ      r5,|L2.128|
000076  a00c              ADR      r0,|L2.168|
000078  f7fffffe          BL       __2printf
00007c  4628              MOV      r0,r5                 ;168
00007e  e7de              B        |L2.62|
                  |L2.128|
000080  2000              MOVS     r0,#0                 ;170
000082  e7dc              B        |L2.62|
;;;172    
                          ENDP

                  |L2.132|
000084  55a55aaa          DCB      "U",165,"Z",170
                  |L2.136|
000088  54657374          DCB      "TestExtSRAM:write word error.\r\n",0
00008c  45787453
000090  52414d3a
000094  77726974
000098  6520776f
00009c  72642065
0000a0  72726f72
0000a4  2e0d0a00
                  |L2.168|
0000a8  54657374          DCB      "TestExtSRAM:write bytes error.\r\n",0
0000ac  45787453
0000b0  52414d3a
0000b4  77726974
0000b8  65206279
0000bc  74657320
0000c0  6572726f
0000c4  722e0d0a
0000c8  00      
0000c9  00                DCB      0
0000ca  00                DCB      0
0000cb  00                DCB      0

;*** Start embedded assembler ***

#line 1 "..\\..\\User\\bsp\\src\\bsp_fsmc_sram.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___15_bsp_fsmc_sram_c_4f10e948____REV16|
#line 114 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___15_bsp_fsmc_sram_c_4f10e948____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___15_bsp_fsmc_sram_c_4f10e948____REVSH|
#line 128
|__asm___15_bsp_fsmc_sram_c_4f10e948____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
