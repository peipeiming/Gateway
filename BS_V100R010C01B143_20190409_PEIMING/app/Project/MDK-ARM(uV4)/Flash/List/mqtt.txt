; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\flash\obj\mqtt.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\mqtt.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931,870 -I..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\User\bsp -I..\..\User\bsp\inc -I..\..\User -I..\..\Libraries\CMSIS\Include -I..\..\FreeRTOS\include -I..\..\FreeRTOS\portable\RVDS\ARM_CM3 -I..\..\MQTT -I..\..\Ethernet -I..\..\Ethernet\W5500 -I..\..\Internet\DHCP -I..\..\Internet\DNS -I..\..\User\app\src -I..\..\User\app\inc -I..\..\Internet\NTP -I..\..\Internet\HTTP -I.\RTE\_Flash -ID:\MDK5\ARM\CMSIS\5.0.1\CMSIS\Include -ID:\MDK5\Keil\STM32F1xx_DFP\2.0.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=523 -D_RTE_ -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=.\flash\obj\mqtt.crf ..\..\User\mqtt.c]
                          THUMB

                          AREA ||i.Heartbeat||, CODE, READONLY, ALIGN=1

                  Heartbeat PROC
;;;23       */
;;;24     int Heartbeat(uint8_t socket)
000000  b5f0              PUSH     {r4-r7,lr}
;;;25     {
000002  b099              SUB      sp,sp,#0x64
000004  4605              MOV      r5,r0
;;;26     	uint8_t len,rc;
;;;27     	uint8_t buf[100]={0};
000006  2164              MOVS     r1,#0x64
000008  4668              MOV      r0,sp
00000a  f7fffffe          BL       __aeabi_memclr4
;;;28     	uint8_t buflen = sizeof(buf);
00000e  2764              MOVS     r7,#0x64
;;;29     	len = MQTTSerialize_pingreq(buf,buflen);
000010  4639              MOV      r1,r7
000012  4668              MOV      r0,sp
000014  f7fffffe          BL       MQTTSerialize_pingreq
000018  b2c4              UXTB     r4,r0
;;;30     	rc = transport_sendPacketBuffer(socket,buf, len);//返回发送的长度
00001a  4622              MOV      r2,r4
00001c  4669              MOV      r1,sp
00001e  4628              MOV      r0,r5
000020  f7fffffe          BL       transport_sendPacketBuffer
000024  b2c6              UXTB     r6,r0
;;;31     	if(rc != len)
000026  42a6              CMP      r6,r4
000028  d00b              BEQ      |L1.66|
;;;32     	{
;;;33     		bsp_LedOff(2);     /*蓝色*/
00002a  2002              MOVS     r0,#2
00002c  f7fffffe          BL       bsp_LedOff
;;;34     		bsp_LedOff(3);     /*绿色*/
000030  2003              MOVS     r0,#3
000032  f7fffffe          BL       bsp_LedOff
;;;35     		bsp_LedOff(4);     /*红色*/
000036  2004              MOVS     r0,#4
000038  f7fffffe          BL       bsp_LedOff
;;;36     		#if APP_DEBUG
;;;37     		printf("%d:Heartbeat fail\n\r",socket);
;;;38     		#endif
;;;39     		return 0;	
00003c  2000              MOVS     r0,#0
                  |L1.62|
;;;40     	}
;;;41     	return 1;
;;;42     }	
00003e  b019              ADD      sp,sp,#0x64
000040  bdf0              POP      {r4-r7,pc}
                  |L1.66|
000042  2001              MOVS     r0,#1                 ;41
000044  e7fb              B        |L1.62|
;;;43     /**
                          ENDP


                          AREA ||i.mqtt_connect||, CODE, READONLY, ALIGN=2

                  mqtt_connect PROC
;;;48       */
;;;49     int mqtt_connect(uint8_t socket,uint8_t * addr, uint16_t port, char *name, char *word)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;50     {
000004  f5ad7d1d          SUB      sp,sp,#0x274
000008  4606              MOV      r6,r0
00000a  4688              MOV      r8,r1
00000c  4691              MOV      r9,r2
00000e  461f              MOV      r7,r3
000010  f8dda298          LDR      r10,[sp,#0x298]
;;;51     	int32_t len,rc;
;;;52     	unsigned char buf[512];
;;;53     	int buflen = sizeof(buf);
000014  f44f7b00          MOV      r11,#0x200
;;;54     	
;;;55     	while(!transport_open(socket,addr, port));  //打开本地端口，连接到远程端口
000018  bf00              NOP      
                  |L2.26|
00001a  464a              MOV      r2,r9
00001c  4641              MOV      r1,r8
00001e  4630              MOV      r0,r6
000020  f7fffffe          BL       transport_open
000024  2800              CMP      r0,#0
000026  d0f8              BEQ      |L2.26|
;;;56     	  	
;;;57     	MQTTPacket_connectData data = MQTTPacket_connectData_initializer;
000028  2258              MOVS     r2,#0x58
00002a  4923              LDR      r1,|L2.184|
00002c  a807              ADD      r0,sp,#0x1c
00002e  f7fffffe          BL       __aeabi_memcpy4
;;;58     
;;;59     	uint16_t crcdata;
;;;60     	uint8_t will_topic_str[17]={0x0D,0x00,0x59,0x00,0x00,0x01,0x01,0x01,0x01,0x01,0x01,0x00,0x00,0x00,0x00,0x01,0x01};
000032  2214              MOVS     r2,#0x14
000034  a121              ADR      r1,|L2.188|
000036  a801              ADD      r0,sp,#4
000038  f7fffffe          BL       __aeabi_memcpy4
;;;61     
;;;62     	data.clientID.cstring = (char *)sysCfg.parameter.client_id;
00003c  4824              LDR      r0,|L2.208|
00003e  900a              STR      r0,[sp,#0x28]
;;;63       data.keepAliveInterval = 120;
000040  2078              MOVS     r0,#0x78
000042  f8ad0034          STRH     r0,[sp,#0x34]
;;;64       data.cleansession = 1;
000046  2001              MOVS     r0,#1
000048  f88d0036          STRB     r0,[sp,#0x36]
;;;65     	data.username.cstring = name;
00004c  9717              STR      r7,[sp,#0x5c]
;;;66     	data.password.cstring = word;
00004e  f8cda068          STR      r10,[sp,#0x68]
;;;67     	
;;;68     	/************** modify 2018/07/31 by PM will config ************************/
;;;69     	memcpy(&will_topic_str[5],sysCfg.parameter.client_mac,6);
000052  481f              LDR      r0,|L2.208|
000054  3012              ADDS     r0,r0,#0x12
000056  6801              LDR      r1,[r0,#0]  ; sysCfg
000058  f8cd1009          STR      r1,[sp,#9]
00005c  8880              LDRH     r0,[r0,#4]  ; sysCfg
00005e  f8ad000d          STRH     r0,[sp,#0xd]
;;;70     	crcdata=app_plat_usMBCRC16(will_topic_str,15);
000062  210f              MOVS     r1,#0xf
000064  a801              ADD      r0,sp,#4
000066  f7fffffe          BL       app_plat_usMBCRC16
00006a  9006              STR      r0,[sp,#0x18]
;;;71     	memcpy(&will_topic_str[15],(uint8_t *)&crcdata,2);
00006c  f8bd0018          LDRH     r0,[sp,#0x18]
000070  f8ad0013          STRH     r0,[sp,#0x13]
;;;72     	
;;;73     	data.willFlag = 1;
000074  2001              MOVS     r0,#1
000076  f88d0037          STRB     r0,[sp,#0x37]
;;;74     	data.will.topicName.cstring = WILL_TOPIC;
00007a  a116              ADR      r1,|L2.212|
00007c  9110              STR      r1,[sp,#0x40]
;;;75     	data.will.message.lenstring.len = sizeof(will_topic_str);
00007e  2111              MOVS     r1,#0x11
000080  9114              STR      r1,[sp,#0x50]
;;;76     	data.will.message.lenstring.data = (char *)will_topic_str;
000082  a901              ADD      r1,sp,#4
000084  9115              STR      r1,[sp,#0x54]
;;;77     	/***************************************************************************/
;;;78     
;;;79     	len = MQTTSerialize_connect(buf, buflen, &data); 
000086  aa07              ADD      r2,sp,#0x1c
000088  4659              MOV      r1,r11
00008a  a81d              ADD      r0,sp,#0x74
00008c  f7fffffe          BL       MQTTSerialize_connect
000090  4604              MOV      r4,r0
;;;80     	rc = transport_sendPacketBuffer(socket,buf,len);	//返回发送的长度
000092  4622              MOV      r2,r4
000094  a91d              ADD      r1,sp,#0x74
000096  4630              MOV      r0,r6
000098  f7fffffe          BL       transport_sendPacketBuffer
00009c  4605              MOV      r5,r0
;;;81       if(rc != len){
00009e  42a5              CMP      r5,r4
0000a0  d007              BEQ      |L2.178|
;;;82     		#if APP_DEBUG
;;;83         printf("Connect:connect transport_sendPacketBuffer error code:%d\n\r",rc);
;;;84     		#endif
;;;85     		if(socket == SOCK_TCPS)
0000a2  b90e              CBNZ     r6,|L2.168|
;;;86     		{
;;;87     			while(1);
0000a4  bf00              NOP      
                  |L2.166|
0000a6  e7fe              B        |L2.166|
                  |L2.168|
;;;88     		}
;;;89     		return 0;	
0000a8  2000              MOVS     r0,#0
                  |L2.170|
;;;90       }
;;;91     
;;;92     	return rc;
;;;93     }
0000aa  f50d7d1d          ADD      sp,sp,#0x274
0000ae  e8bd8ff0          POP      {r4-r11,pc}
                  |L2.178|
0000b2  4628              MOV      r0,r5                 ;92
0000b4  e7f9              B        |L2.170|
;;;94     
                          ENDP

0000b6  0000              DCW      0x0000
                  |L2.184|
                          DCD      ||.constdata||+0x200
                  |L2.188|
0000bc  0d00              DCB      "\r",0
0000be  5900              DCB      "Y",0
0000c0  00                DCB      0
0000c1  01010101          DCB      1,1,1,1,1,1,0
0000c5  010100  
0000c8  00                DCB      0
0000c9  00                DCB      0
0000ca  00                DCB      0
0000cb  010100            DCB      1,1,0
0000ce  00                DCB      0
0000cf  00                DCB      0
                  |L2.208|
                          DCD      sysCfg+0xc8
                  |L2.212|
0000d4  2f696f74          DCB      "/iot_gateway/offline_will/report",0
0000d8  5f676174
0000dc  65776179
0000e0  2f6f6666
0000e4  6c696e65
0000e8  5f77696c
0000ec  6c2f7265
0000f0  706f7274
0000f4  00      
0000f5  00                DCB      0
0000f6  00                DCB      0
0000f7  00                DCB      0

                          AREA ||i.mqtt_disconnect||, CODE, READONLY, ALIGN=2

                  mqtt_disconnect PROC
;;;3      
;;;4      void mqtt_disconnect(void)
000000  b530              PUSH     {r4,r5,lr}
;;;5      {
000002  b099              SUB      sp,sp,#0x64
;;;6      	uint8_t len;
;;;7      	uint8_t buf[100]={0};
000004  2164              MOVS     r1,#0x64
000006  4668              MOV      r0,sp
000008  f7fffffe          BL       __aeabi_memclr4
;;;8      	uint8_t buflen = sizeof(buf);
00000c  2564              MOVS     r5,#0x64
;;;9      	
;;;10     	len = MQTTSerialize_disconnect(buf,buflen);
00000e  4629              MOV      r1,r5
000010  4668              MOV      r0,sp
000012  f7fffffe          BL       MQTTSerialize_disconnect
000016  b2c4              UXTB     r4,r0
;;;11     	transport_sendPacketBuffer(SOCK_TCPS, buf, len);		//返回发送的长度
000018  4622              MOV      r2,r4
00001a  4669              MOV      r1,sp
00001c  2000              MOVS     r0,#0
00001e  f7fffffe          BL       transport_sendPacketBuffer
;;;12     	if(sysCfg.parameter.data_socket == SOCK_TCP)
000022  4805              LDR      r0,|L3.56|
000024  f89000c0          LDRB     r0,[r0,#0xc0]  ; sysCfg
000028  2801              CMP      r0,#1
00002a  d103              BNE      |L3.52|
;;;13     	{
;;;14     		transport_sendPacketBuffer(SOCK_TCP, buf, len);
00002c  4622              MOV      r2,r4
00002e  4669              MOV      r1,sp
000030  f7fffffe          BL       transport_sendPacketBuffer
                  |L3.52|
;;;15     	}
;;;16     }	
000034  b019              ADD      sp,sp,#0x64
000036  bd30              POP      {r4,r5,pc}
;;;17     
                          ENDP

                  |L3.56|
                          DCD      sysCfg

                          AREA ||i.mqtt_publish||, CODE, READONLY, ALIGN=1

                  mqtt_publish PROC
;;;101      */
;;;102    int mqtt_publish(uint8_t socket,char *pTopic,char *pMessage,int msglen)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;103    {
000004  b0ca              SUB      sp,sp,#0x128
000006  4680              MOV      r8,r0
000008  460c              MOV      r4,r1
00000a  4615              MOV      r5,r2
00000c  461e              MOV      r6,r3
;;;104      int32_t len,rc;
;;;105      unsigned char buf[256];
;;;106      MQTTString topicString = MQTTString_initializer;
00000e  2000              MOVS     r0,#0
000010  9007              STR      r0,[sp,#0x1c]
000012  9008              STR      r0,[sp,#0x20]
000014  9009              STR      r0,[sp,#0x24]
;;;107    	
;;;108    	#if 0  /*modify by pei 2018-1-29*/
;;;109      int msglen = strlen(pMessage);
;;;110    	#endif
;;;111    	
;;;112      int buflen = sizeof(buf);
000016  f44f7a80          MOV      r10,#0x100
;;;113    	/*publishh*/
;;;114      topicString.cstring = pTopic;
00001a  9407              STR      r4,[sp,#0x1c]
;;;115      len= MQTTSerialize_publish(buf, buflen, 0, 0, 0, 0, topicString, (unsigned char*)pMessage, msglen); /* 2 */
00001c  e9cd5605          STRD     r5,r6,[sp,#0x14]
000020  a807              ADD      r0,sp,#0x1c
000022  c807              LDM      r0,{r0-r2}
000024  af02              ADD      r7,sp,#8
000026  c707              STM      r7!,{r0-r2}
000028  2000              MOVS     r0,#0
00002a  9000              STR      r0,[sp,#0]
00002c  4603              MOV      r3,r0
00002e  4602              MOV      r2,r0
000030  4651              MOV      r1,r10
000032  9001              STR      r0,[sp,#4]
000034  a80a              ADD      r0,sp,#0x28
000036  f7fffffe          BL       MQTTSerialize_publish
00003a  4607              MOV      r7,r0
;;;116      //len += MQTTSerialize_disconnect(buf + len, buflen - len); /* 3 */
;;;117      rc = transport_sendPacketBuffer(socket,buf,len);
00003c  463a              MOV      r2,r7
00003e  a90a              ADD      r1,sp,#0x28
000040  4640              MOV      r0,r8
000042  f7fffffe          BL       transport_sendPacketBuffer
000046  4681              MOV      r9,r0
;;;118    	if (rc == len)
000048  45b9              CMP      r9,r7
00004a  d103              BNE      |L4.84|
;;;119    	{
;;;120    		#if 0
;;;121    		printf("Published OK\r\n");
;;;122    		#endif
;;;123    		return 1;
00004c  2001              MOVS     r0,#1
                  |L4.78|
;;;124    	}
;;;125    	else
;;;126    	{
;;;127    		//printf("Publish failed\r\n");
;;;128    		return 0;
;;;129    	}
;;;130    	
;;;131    //如果需要发送完消息，即关闭端口，需要一定延时 QOS=1，发布消息时，服务器端会返回PUBACK
;;;132    //	 if (MQTTPacket_read(buf, buflen, transport_getdata) == PUBACK) 	
;;;133    //	{
;;;134    //	
;;;135    //	}
;;;136    	
;;;137    }
00004e  b04a              ADD      sp,sp,#0x128
000050  e8bd87f0          POP      {r4-r10,pc}
                  |L4.84|
000054  2000              MOVS     r0,#0                 ;128
000056  e7fa              B        |L4.78|
;;;138    /**
                          ENDP


                          AREA ||i.mqtt_subscrib||, CODE, READONLY, ALIGN=1

                  mqtt_subscrib PROC
;;;142      */
;;;143    int mqtt_subscrib(uint8_t socket,char *pTopic)
000000  e92d43f0          PUSH     {r4-r9,lr}
;;;144    {
000004  b0a7              SUB      sp,sp,#0x9c
000006  4604              MOV      r4,r0
000008  460d              MOV      r5,r1
;;;145    	MQTTString topicString = MQTTString_initializer;
00000a  2000              MOVS     r0,#0
00000c  9024              STR      r0,[sp,#0x90]
00000e  9025              STR      r0,[sp,#0x94]
000010  9026              STR      r0,[sp,#0x98]
;;;146    	unsigned char buf[128];
;;;147    	int buflen = sizeof(buf);
000012  f04f0980          MOV      r9,#0x80
;;;148    	int rc = 0;
000016  2600              MOVS     r6,#0
;;;149    	int msgid = 1;
000018  2701              MOVS     r7,#1
;;;150    	int req_qos =1;
00001a  2001              MOVS     r0,#1
00001c  9003              STR      r0,[sp,#0xc]
;;;151    	int len = 0;
00001e  f04f0800          MOV      r8,#0
;;;152    	/* subscribe */
;;;153    	topicString.cstring = pTopic;
000022  9524              STR      r5,[sp,#0x90]
;;;154    	len = MQTTSerialize_subscribe(buf, buflen, 0, msgid, 1, &topicString, &req_qos);
000024  a803              ADD      r0,sp,#0xc
000026  a924              ADD      r1,sp,#0x90
000028  2201              MOVS     r2,#1
00002a  463b              MOV      r3,r7
00002c  e9cd2100          STRD     r2,r1,[sp,#0]
000030  9002              STR      r0,[sp,#8]
000032  2200              MOVS     r2,#0
000034  4649              MOV      r1,r9
000036  a804              ADD      r0,sp,#0x10
000038  f7fffffe          BL       MQTTSerialize_subscribe
00003c  4680              MOV      r8,r0
;;;155    	rc = transport_sendPacketBuffer(socket,buf, len);
00003e  4642              MOV      r2,r8
000040  a904              ADD      r1,sp,#0x10
000042  4620              MOV      r0,r4
000044  f7fffffe          BL       transport_sendPacketBuffer
000048  4606              MOV      r6,r0
;;;156      if(rc != len)
00004a  4546              CMP      r6,r8
00004c  d010              BEQ      |L5.112|
;;;157    	{
;;;158    		#if APP_DEBUG
;;;159        printf("Subscrib:connect transport_sendPacketBuffer error\n\r");
;;;160    		printf("rc:%d\r\n",rc);
;;;161    		#endif
;;;162    		if(socket == SOCK_TCPS)
00004e  b90c              CBNZ     r4,|L5.84|
;;;163    		{
;;;164    			while(1);
000050  bf00              NOP      
                  |L5.82|
000052  e7fe              B        |L5.82|
                  |L5.84|
;;;165    		}
;;;166    		
;;;167    		bsp_LedOn(4);
000054  2004              MOVS     r0,#4
000056  f7fffffe          BL       bsp_LedOn
;;;168    		vTaskDelay(1000);
00005a  f44f707a          MOV      r0,#0x3e8
00005e  f7fffffe          BL       vTaskDelay
;;;169    		bsp_LedOff(4);
000062  2004              MOVS     r0,#4
000064  f7fffffe          BL       bsp_LedOff
;;;170    		return 0;
000068  2000              MOVS     r0,#0
                  |L5.106|
;;;171      }
;;;172    	
;;;173      return rc;
;;;174    }
00006a  b027              ADD      sp,sp,#0x9c
00006c  e8bd83f0          POP      {r4-r9,pc}
                  |L5.112|
000070  4630              MOV      r0,r6                 ;173
000072  e7fa              B        |L5.106|
;;;175    
                          ENDP


                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  aucCRCHi
000000  00c18140          DCB      0x00,0xc1,0x81,0x40
000004  01c08041          DCB      0x01,0xc0,0x80,0x41
000008  01c08041          DCB      0x01,0xc0,0x80,0x41
00000c  00c18140          DCB      0x00,0xc1,0x81,0x40
000010  01c08041          DCB      0x01,0xc0,0x80,0x41
000014  00c18140          DCB      0x00,0xc1,0x81,0x40
000018  00c18140          DCB      0x00,0xc1,0x81,0x40
00001c  01c08041          DCB      0x01,0xc0,0x80,0x41
000020  01c08041          DCB      0x01,0xc0,0x80,0x41
000024  00c18140          DCB      0x00,0xc1,0x81,0x40
000028  00c18140          DCB      0x00,0xc1,0x81,0x40
00002c  01c08041          DCB      0x01,0xc0,0x80,0x41
000030  00c18140          DCB      0x00,0xc1,0x81,0x40
000034  01c08041          DCB      0x01,0xc0,0x80,0x41
000038  01c08041          DCB      0x01,0xc0,0x80,0x41
00003c  00c18140          DCB      0x00,0xc1,0x81,0x40
000040  01c08041          DCB      0x01,0xc0,0x80,0x41
000044  00c18140          DCB      0x00,0xc1,0x81,0x40
000048  00c18140          DCB      0x00,0xc1,0x81,0x40
00004c  01c08041          DCB      0x01,0xc0,0x80,0x41
000050  00c18140          DCB      0x00,0xc1,0x81,0x40
000054  01c08041          DCB      0x01,0xc0,0x80,0x41
000058  01c08041          DCB      0x01,0xc0,0x80,0x41
00005c  00c18140          DCB      0x00,0xc1,0x81,0x40
000060  00c18140          DCB      0x00,0xc1,0x81,0x40
000064  01c08041          DCB      0x01,0xc0,0x80,0x41
000068  01c08041          DCB      0x01,0xc0,0x80,0x41
00006c  00c18140          DCB      0x00,0xc1,0x81,0x40
000070  01c08041          DCB      0x01,0xc0,0x80,0x41
000074  00c18140          DCB      0x00,0xc1,0x81,0x40
000078  00c18140          DCB      0x00,0xc1,0x81,0x40
00007c  01c08041          DCB      0x01,0xc0,0x80,0x41
000080  01c08041          DCB      0x01,0xc0,0x80,0x41
000084  00c18140          DCB      0x00,0xc1,0x81,0x40
000088  00c18140          DCB      0x00,0xc1,0x81,0x40
00008c  01c08041          DCB      0x01,0xc0,0x80,0x41
000090  00c18140          DCB      0x00,0xc1,0x81,0x40
000094  01c08041          DCB      0x01,0xc0,0x80,0x41
000098  01c08041          DCB      0x01,0xc0,0x80,0x41
00009c  00c18140          DCB      0x00,0xc1,0x81,0x40
0000a0  00c18140          DCB      0x00,0xc1,0x81,0x40
0000a4  01c08041          DCB      0x01,0xc0,0x80,0x41
0000a8  01c08041          DCB      0x01,0xc0,0x80,0x41
0000ac  00c18140          DCB      0x00,0xc1,0x81,0x40
0000b0  01c08041          DCB      0x01,0xc0,0x80,0x41
0000b4  00c18140          DCB      0x00,0xc1,0x81,0x40
0000b8  00c18140          DCB      0x00,0xc1,0x81,0x40
0000bc  01c08041          DCB      0x01,0xc0,0x80,0x41
0000c0  00c18140          DCB      0x00,0xc1,0x81,0x40
0000c4  01c08041          DCB      0x01,0xc0,0x80,0x41
0000c8  01c08041          DCB      0x01,0xc0,0x80,0x41
0000cc  00c18140          DCB      0x00,0xc1,0x81,0x40
0000d0  01c08041          DCB      0x01,0xc0,0x80,0x41
0000d4  00c18140          DCB      0x00,0xc1,0x81,0x40
0000d8  00c18140          DCB      0x00,0xc1,0x81,0x40
0000dc  01c08041          DCB      0x01,0xc0,0x80,0x41
0000e0  01c08041          DCB      0x01,0xc0,0x80,0x41
0000e4  00c18140          DCB      0x00,0xc1,0x81,0x40
0000e8  00c18140          DCB      0x00,0xc1,0x81,0x40
0000ec  01c08041          DCB      0x01,0xc0,0x80,0x41
0000f0  00c18140          DCB      0x00,0xc1,0x81,0x40
0000f4  01c08041          DCB      0x01,0xc0,0x80,0x41
0000f8  01c08041          DCB      0x01,0xc0,0x80,0x41
0000fc  00c18140          DCB      0x00,0xc1,0x81,0x40
                  aucCRCLo
000100  00c0c101          DCB      0x00,0xc0,0xc1,0x01
000104  c30302c2          DCB      0xc3,0x03,0x02,0xc2
000108  c60607c7          DCB      0xc6,0x06,0x07,0xc7
00010c  05c5c404          DCB      0x05,0xc5,0xc4,0x04
000110  cc0c0dcd          DCB      0xcc,0x0c,0x0d,0xcd
000114  0fcfce0e          DCB      0x0f,0xcf,0xce,0x0e
000118  0acacb0b          DCB      0x0a,0xca,0xcb,0x0b
00011c  c90908c8          DCB      0xc9,0x09,0x08,0xc8
000120  d81819d9          DCB      0xd8,0x18,0x19,0xd9
000124  1bdbda1a          DCB      0x1b,0xdb,0xda,0x1a
000128  1ededf1f          DCB      0x1e,0xde,0xdf,0x1f
00012c  dd1d1cdc          DCB      0xdd,0x1d,0x1c,0xdc
000130  14d4d515          DCB      0x14,0xd4,0xd5,0x15
000134  d71716d6          DCB      0xd7,0x17,0x16,0xd6
000138  d21213d3          DCB      0xd2,0x12,0x13,0xd3
00013c  11d1d010          DCB      0x11,0xd1,0xd0,0x10
000140  f03031f1          DCB      0xf0,0x30,0x31,0xf1
000144  33f3f232          DCB      0x33,0xf3,0xf2,0x32
000148  36f6f737          DCB      0x36,0xf6,0xf7,0x37
00014c  f53534f4          DCB      0xf5,0x35,0x34,0xf4
000150  3cfcfd3d          DCB      0x3c,0xfc,0xfd,0x3d
000154  ff3f3efe          DCB      0xff,0x3f,0x3e,0xfe
000158  fa3a3bfb          DCB      0xfa,0x3a,0x3b,0xfb
00015c  39f9f838          DCB      0x39,0xf9,0xf8,0x38
000160  28e8e929          DCB      0x28,0xe8,0xe9,0x29
000164  eb2b2aea          DCB      0xeb,0x2b,0x2a,0xea
000168  ee2e2fef          DCB      0xee,0x2e,0x2f,0xef
00016c  2dedec2c          DCB      0x2d,0xed,0xec,0x2c
000170  e42425e5          DCB      0xe4,0x24,0x25,0xe5
000174  27e7e626          DCB      0x27,0xe7,0xe6,0x26
000178  22e2e323          DCB      0x22,0xe2,0xe3,0x23
00017c  e12120e0          DCB      0xe1,0x21,0x20,0xe0
000180  a06061a1          DCB      0xa0,0x60,0x61,0xa1
000184  63a3a262          DCB      0x63,0xa3,0xa2,0x62
000188  66a6a767          DCB      0x66,0xa6,0xa7,0x67
00018c  a56564a4          DCB      0xa5,0x65,0x64,0xa4
000190  6cacad6d          DCB      0x6c,0xac,0xad,0x6d
000194  af6f6eae          DCB      0xaf,0x6f,0x6e,0xae
000198  aa6a6bab          DCB      0xaa,0x6a,0x6b,0xab
00019c  69a9a868          DCB      0x69,0xa9,0xa8,0x68
0001a0  78b8b979          DCB      0x78,0xb8,0xb9,0x79
0001a4  bb7b7aba          DCB      0xbb,0x7b,0x7a,0xba
0001a8  be7e7fbf          DCB      0xbe,0x7e,0x7f,0xbf
0001ac  7dbdbc7c          DCB      0x7d,0xbd,0xbc,0x7c
0001b0  b47475b5          DCB      0xb4,0x74,0x75,0xb5
0001b4  77b7b676          DCB      0x77,0xb7,0xb6,0x76
0001b8  72b2b373          DCB      0x72,0xb2,0xb3,0x73
0001bc  b17170b0          DCB      0xb1,0x71,0x70,0xb0
0001c0  50909151          DCB      0x50,0x90,0x91,0x51
0001c4  93535292          DCB      0x93,0x53,0x52,0x92
0001c8  96565797          DCB      0x96,0x56,0x57,0x97
0001cc  55959454          DCB      0x55,0x95,0x94,0x54
0001d0  9c5c5d9d          DCB      0x9c,0x5c,0x5d,0x9d
0001d4  5f9f9e5e          DCB      0x5f,0x9f,0x9e,0x5e
0001d8  5a9a9b5b          DCB      0x5a,0x9a,0x9b,0x5b
0001dc  99595898          DCB      0x99,0x59,0x58,0x98
0001e0  88484989          DCB      0x88,0x48,0x49,0x89
0001e4  4b8b8a4a          DCB      0x4b,0x8b,0x8a,0x4a
0001e8  4e8e8f4f          DCB      0x4e,0x8e,0x8f,0x4f
0001ec  8d4d4c8c          DCB      0x8d,0x4d,0x4c,0x8c
0001f0  44848545          DCB      0x44,0x84,0x85,0x45
0001f4  87474686          DCB      0x87,0x47,0x46,0x86
0001f8  82424383          DCB      0x82,0x42,0x43,0x83
0001fc  41818040          DCB      0x41,0x81,0x80,0x40
000200  4d515443          DCB      0x4d,0x51,0x54,0x43
                          DCD      0x00000000
000208  04000000          DCB      0x04,0x00,0x00,0x00
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
000218  003c              DCW      0x003c
00021a  0100              DCB      0x01,0x00
00021c  4d515457          DCB      0x4d,0x51,0x54,0x57
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
00023c  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000

                          AREA ||.data||, DATA, ALIGN=2

                  xHandleTaskUserIF
                          DCD      0x00000000
                  xHandleCheckNet
                          DCD      0x00000000
                  xHandleTaskWEB
                          DCD      0x00000000
                  xHandleTaskMsgPro
                          DCD      0x00000000
                  xHandleTaskStart
                          DCD      0x00000000
                  xSemaphore
                          DCD      0x00000000
                  xMutex
                          DCD      0x00000000
                  xPingTimers
                          DCD      0x00000000
                  xNoNetTimers
                          DCD      0x00000000
                  xCreatedEventGroup
                          DCD      0x00000000
                  xUpdataEventGroup
                          DCD      0x00000000
                  xQueue1
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\..\\User\\mqtt.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___6_mqtt_c_4b74c0a7____REV16|
#line 114 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___6_mqtt_c_4b74c0a7____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___6_mqtt_c_4b74c0a7____REVSH|
#line 128
|__asm___6_mqtt_c_4b74c0a7____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
