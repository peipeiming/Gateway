; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\flash\obj\app_nrf52832.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\app_nrf52832.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931,870 -I..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\User\bsp -I..\..\User\bsp\inc -I..\..\User -I..\..\Libraries\CMSIS\Include -I..\..\FreeRTOS\include -I..\..\FreeRTOS\portable\RVDS\ARM_CM3 -I..\..\MQTT -I..\..\Ethernet -I..\..\Ethernet\W5500 -I..\..\Internet\DHCP -I..\..\Internet\DNS -I..\..\User\app\src -I..\..\User\app\inc -I..\..\Internet\NTP -I..\..\Internet\HTTP -I.\RTE\_Flash -ID:\MDK5\ARM\CMSIS\5.0.1\CMSIS\Include -ID:\MDK5\Keil\STM32F1xx_DFP\2.0.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=523 -D_RTE_ -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=.\flash\obj\app_nrf52832.crf ..\..\User\app\src\app_nrf52832.c]
                          THUMB

                          AREA ||i.app_nrf_ConnectBle||, CODE, READONLY, ALIGN=2

                  app_nrf_ConnectBle PROC
;;;339     */
;;;340    ErrorStatus app_nrf_ConnectBle(uint8_t *station,uint8_t *bracelet)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;341    {
000004  b092              SUB      sp,sp,#0x48
000006  4605              MOV      r5,r0
000008  460e              MOV      r6,r1
;;;342    	uint8_t i=0;
00000a  2400              MOVS     r4,#0
;;;343    	uint8_t check_results=0;
00000c  2700              MOVS     r7,#0
;;;344    	uint8_t readbuf[MAX_BLE_RESPONSE_LEN] = {0};
00000e  2134              MOVS     r1,#0x34
000010  a805              ADD      r0,sp,#0x14
000012  f7fffffe          BL       __aeabi_memclr4
;;;345    	uint8_t Sendbuf[20]={0x5A,0x42,0x00,0x0E,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
000016  2214              MOVS     r2,#0x14
000018  a12b              ADR      r1,|L1.200|
00001a  4668              MOV      r0,sp
00001c  f7fffffe          BL       __aeabi_memcpy4
;;;346    	
;;;347    	Sendbuf[1]=CONNECTBLE;              /*消息ID*/
000020  2042              MOVS     r0,#0x42
000022  f88d0001          STRB     r0,[sp,#1]
;;;348    	 
;;;349    	memcpy(&Sendbuf[4],station,8);      /*基站地址*/
000026  6828              LDR      r0,[r5,#0]
000028  9001              STR      r0,[sp,#4]
00002a  6868              LDR      r0,[r5,#4]
00002c  9002              STR      r0,[sp,#8]
;;;350    	memcpy(&Sendbuf[12],bracelet,6);    /*MAC地址*/
00002e  6830              LDR      r0,[r6,#0]
000030  9003              STR      r0,[sp,#0xc]
000032  88b0              LDRH     r0,[r6,#4]
000034  f8ad0010          STRH     r0,[sp,#0x10]
;;;351    		        
;;;352      #if APP_DEBUG
;;;353    	printf("connect to:");
;;;354    	for(uint8_t i = 0; i < 6; i++)
;;;355    	{
;;;356    		printf("%02X ",bracelet[i]);
;;;357    	}
;;;358    	printf("\r\n");
;;;359      #endif  
;;;360    		
;;;361    	check_results=Sendbuf[1];   
000038  f89d7001          LDRB     r7,[sp,#1]
;;;362    	for(i=2;i<(Sendbuf[3]+2+3-1);i++)   //CMD字段到数据字段进行校验
00003c  2402              MOVS     r4,#2
00003e  e004              B        |L1.74|
                  |L1.64|
;;;363    		check_results^=Sendbuf[i];
000040  f81d0004          LDRB     r0,[sp,r4]
000044  4047              EORS     r7,r7,r0
000046  1c60              ADDS     r0,r4,#1              ;362
000048  b2c4              UXTB     r4,r0                 ;362
                  |L1.74|
00004a  f89d0003          LDRB     r0,[sp,#3]            ;362
00004e  1d00              ADDS     r0,r0,#4              ;362
000050  42a0              CMP      r0,r4                 ;362
000052  dcf5              BGT      |L1.64|
;;;364    	Sendbuf[i]=check_results;           //校验值
000054  f80d7004          STRB     r7,[sp,r4]
;;;365    	Sendbuf[i+1]=0xca;                  //结束符	
000058  21ca              MOVS     r1,#0xca
00005a  1c60              ADDS     r0,r4,#1
00005c  f80d1000          STRB     r1,[sp,r0]
;;;366    		
;;;367    //	while(SUCCESS == app_nrf_ReadData(readbuf))  /*读空接收缓存*/
;;;368    //	{
;;;369    //		IWDG_Feed();
;;;370    //	}
;;;371    	
;;;372    	comSendBuf( NRF_PORT , Sendbuf , sizeof(Sendbuf) );  	
000060  2214              MOVS     r2,#0x14
000062  4669              MOV      r1,sp
000064  2002              MOVS     r0,#2
000066  f7fffffe          BL       comSendBuf
;;;373      
;;;374    	for(i = 0; i < 60; i++)
00006a  2400              MOVS     r4,#0
00006c  e028              B        |L1.192|
                  |L1.110|
;;;375    	{
;;;376    		vTaskDelay(1000);
00006e  f44f707a          MOV      r0,#0x3e8
000072  f7fffffe          BL       vTaskDelay
;;;377    		IWDG_Feed();
000076  f7fffffe          BL       IWDG_Feed
;;;378    		for(uint8_t j = 0; j < 50; j++)
00007a  f04f0800          MOV      r8,#0
00007e  e01a              B        |L1.182|
                  |L1.128|
;;;379    		{
;;;380    			memset(readbuf,0x00,sizeof(readbuf));
000080  2134              MOVS     r1,#0x34
000082  a805              ADD      r0,sp,#0x14
000084  f7fffffe          BL       __aeabi_memclr4
;;;381    			if(SUCCESS == app_nrf_ReadData(readbuf) && readbuf[1] == 0x42)
000088  a805              ADD      r0,sp,#0x14
00008a  f7fffffe          BL       app_nrf_ReadData
00008e  2801              CMP      r0,#1
000090  d10d              BNE      |L1.174|
000092  f89d0015          LDRB     r0,[sp,#0x15]
000096  2842              CMP      r0,#0x42
000098  d109              BNE      |L1.174|
;;;382    			{ 
;;;383    				if(0 == memcmp(&readbuf[12],&Sendbuf[12],6))
00009a  2206              MOVS     r2,#6
00009c  a903              ADD      r1,sp,#0xc
00009e  a808              ADD      r0,sp,#0x20
0000a0  f7fffffe          BL       memcmp
0000a4  b918              CBNZ     r0,|L1.174|
;;;384    				{
;;;385    					return SUCCESS;
0000a6  2001              MOVS     r0,#1
                  |L1.168|
;;;386    				}
;;;387    			}
;;;388    		}
;;;389      }	
;;;390      
;;;391    	#if APP_DEBUG
;;;392    	printf("app_nrf_LinkTargetBracelet:no responsed!\r\n");
;;;393    	#endif
;;;394    	return ERROR;
;;;395    }
0000a8  b012              ADD      sp,sp,#0x48
0000aa  e8bd81f0          POP      {r4-r8,pc}
                  |L1.174|
0000ae  f1080001          ADD      r0,r8,#1              ;378
0000b2  f00008ff          AND      r8,r0,#0xff           ;378
                  |L1.182|
0000b6  f1b80f32          CMP      r8,#0x32              ;378
0000ba  dbe1              BLT      |L1.128|
0000bc  1c60              ADDS     r0,r4,#1              ;374
0000be  b2c4              UXTB     r4,r0                 ;374
                  |L1.192|
0000c0  2c3c              CMP      r4,#0x3c              ;374
0000c2  dbd4              BLT      |L1.110|
0000c4  2000              MOVS     r0,#0                 ;394
0000c6  e7ef              B        |L1.168|
;;;396    
                          ENDP

                  |L1.200|
0000c8  5a4200            DCB      "ZB",0
0000cb  0e00              DCB      14,0
0000cd  00                DCB      0
0000ce  00                DCB      0
0000cf  00                DCB      0
0000d0  00                DCB      0
0000d1  00                DCB      0
0000d2  00                DCB      0
0000d3  00                DCB      0
0000d4  00                DCB      0
0000d5  00                DCB      0
0000d6  00                DCB      0
0000d7  00                DCB      0
0000d8  00                DCB      0
0000d9  00                DCB      0
0000da  00                DCB      0
0000db  00                DCB      0

                          AREA ||i.app_nrf_DealBleData||, CODE, READONLY, ALIGN=2

                  app_nrf_DealBleData PROC
;;;573    */
;;;574    void app_nrf_DealBleData(void)
000000  b5f0              PUSH     {r4-r7,lr}
;;;575    {		
000002  b093              SUB      sp,sp,#0x4c
;;;576    	uint8_t readbuf[MAX_BLE_RESPONSE_LEN] = {0};
000004  2134              MOVS     r1,#0x34
000006  a806              ADD      r0,sp,#0x18
000008  f7fffffe          BL       __aeabi_memclr4
;;;577    		
;;;578    	uint16_t i = 0;
00000c  2400              MOVS     r4,#0
;;;579    	
;;;580    	uint32_t nowsec = 0;
00000e  2500              MOVS     r5,#0
;;;581    
;;;582    	DateTime nowtime;
;;;583    	static uint32_t BraceletNumber = 0;
;;;584    	
;;;585    	get_ntp_time(&nowtime);
000010  a804              ADD      r0,sp,#0x10
000012  f7fffffe          BL       get_ntp_time
;;;586    	
;;;587    	if((nowtime.time.year[0]+nowtime.time.year[1]*256-2000)<0
000016  f89d1010          LDRB     r1,[sp,#0x10]
00001a  f89d0011          LDRB     r0,[sp,#0x11]
00001e  eb012000          ADD      r0,r1,r0,LSL #8
000022  f5a060fa          SUB      r0,r0,#0x7d0
000026  2800              CMP      r0,#0
000028  d409              BMI      |L2.62|
;;;588    		||(nowtime.time.year[0]+nowtime.time.year[1]*256-2000)>100)
00002a  f89d1010          LDRB     r1,[sp,#0x10]
00002e  f89d0011          LDRB     r0,[sp,#0x11]
000032  eb012000          ADD      r0,r1,r0,LSL #8
000036  f5a060fa          SUB      r0,r0,#0x7d0
00003a  2864              CMP      r0,#0x64
00003c  dd01              BLE      |L2.66|
                  |L2.62|
;;;589    	{
;;;590    		return;
;;;591    	}
;;;592    
;;;593    	#ifdef MCBR03
;;;594    	if(0 == nowtime.time.minute % 40 && 0 == nowtime.time.second % 59)
;;;595    	{
;;;596    		app_plat_SHTDataPublish();
;;;597    		nowtime.time.second += 2;
;;;598    	}
;;;599      #endif
;;;600    	
;;;601    	nowsec = app_nrf_TimeTosec(nowtime.time.year[0]+nowtime.time.year[1]*256,nowtime.time.month,
;;;602    	nowtime.time.day,nowtime.time.hour,nowtime.time.minute,nowtime.time.second);
;;;603    	
;;;604    	while(SUCCESS == app_nrf_ReadData(readbuf))   
;;;605    	{	
;;;606    		if(readbuf[1] == GETBLEDATA)
;;;607    		{										
;;;608    			/*滤重算法*/
;;;609    			for(i=0; i < BraceletNumber; i++)
;;;610    			{		
;;;611    				/*是该手环记录*/
;;;612    				if(0 == memcmp(Bracelet[i],&readbuf[12],6)) 
;;;613    				{					
;;;614    					/*运动参数改变判断*/
;;;615    					if(0 != memcmp(&Bracelet[i][8],&readbuf[12+6+6+5],6))
;;;616    					{
;;;617    						memcpy((uint8_t *)&Bracelet[i][8],&readbuf[12+6+6+5],6);						
;;;618    						app_plat_SportDataPublish(&readbuf[12],&readbuf[12+6+6+5]);
;;;619    					}	
;;;620    					
;;;621    			
;;;622    					/*睡眠数据上报*/
;;;623    					if(0 != memcmp(&Bracelet[i][18],&readbuf[12+6+1],6))
;;;624    					{
;;;625    						memcpy((uint8_t *)&Bracelet[i][18],&readbuf[12+6+1],6);						
;;;626    						app_plat_SleepDataPublish(&readbuf[12],&readbuf[12+6+1]);   
;;;627    					}
;;;628    					
;;;629    					/*判断心率参数是否改变*/
;;;630    					if(Bracelet[i][14] != readbuf[12+6+6+5+6] && readbuf[12+6+6+5+6] != 0 )
;;;631    					{
;;;632    						Bracelet[i][14] = readbuf[12+6+6+5+6];										
;;;633    						app_plat_HeartratePublish(&readbuf[12],readbuf[12+6+6+5+6]);
;;;634    					}
;;;635    					
;;;636    					/*判断SOS状态是否改变*/
;;;637    					if(Bracelet[i][17] != readbuf[12+6+6+5+6+1])
;;;638    					{
;;;639    						uint8_t bracelet[8] = {0};
;;;640    						
;;;641    						Bracelet[i][17] = readbuf[12+6+6+5+6+1];		
;;;642    						if(0x01==Bracelet[i][17])
;;;643    						{
;;;644    //							printf("SOS:");
;;;645    //							for(uint8_t k = 0; k < 6; k++)
;;;646    //						  {
;;;647    //								printf("%02X",readbuf[12+k]);
;;;648    //							}
;;;649    //							printf("\r\n");
;;;650    							memcpy(bracelet,&readbuf[12],6);
;;;651    							ErrorLog(BRACELET,bracelet,WARN,SOS_WARN,0,NULL); 	/*设备告警*/
;;;652    						}
;;;653    						else
;;;654    						{
;;;655    //							printf("SOS QUIT:");
;;;656    //							for(uint8_t k = 0; k < 6; k++)
;;;657    //						  {
;;;658    //								printf("%02X",readbuf[12+k]);
;;;659    //							}
;;;660    //							printf("\r\n");
;;;661    							
;;;662    							memcpy(bracelet,&readbuf[12],6);
;;;663    							ErrorLog(BRACELET,bracelet,WARN,SOS_QUIT,0,NULL); 	/*设备告警*/
;;;664    						}
;;;665    					}
;;;666    					
;;;667    					/*考勤、位置数据改变上报*/
;;;668              if(Bracelet[i][6] != readbuf[12+6+6+1] || Bracelet[i][7] != readbuf[12+6+6+3]) 
;;;669    					{			
;;;670    						//app_nrf_AttendanceDetermine(&readbuf[4],&readbuf[12+6],&readbuf[12], i ); 	/*考勤判断*/
;;;671    						app_plat_LocationPublish(&readbuf[12],&readbuf[12+6],readbuf[12+6+6+5+6+3],&readbuf[4]);
;;;672    						
;;;673    						Bracelet[i][6] = readbuf[12+6+6+1];
;;;674    						Bracelet[i][7] = readbuf[12+6+6+3];	
;;;675    						
;;;676    						Bracelet[i][16] = nowsec % 100; 	 
;;;677    					}
;;;678    					else if( nowsec % 100 - Bracelet[i][16] > 10)  /*位置参数定时上报*/
;;;679    					{
;;;680    						Bracelet[i][16] = nowsec % 100;
;;;681    						app_plat_LocationPublish(&readbuf[12],&readbuf[12+6],readbuf[12+6+6+5+6+3],&readbuf[4]);
;;;682    					}			
;;;683    				
;;;684    					/*手环电量参数改变判断*/
;;;685    					if(Bracelet[i][15] != readbuf[12+6+6+5+6+2] && readbuf[12+6+6+5+6+2] != 0) 
;;;686    					{
;;;687    						Bracelet[i][15] = readbuf[12+6+6+5+6+2];										
;;;688    						app_plat_BraceletInfoPublish(&readbuf[12],readbuf[12+6+6+5+6+2]);
;;;689    					}		
;;;690    					
;;;691    					break;  /*退出查找*/
;;;692    				}
;;;693    			}
;;;694    			
;;;695    			/*没有该手环记录*/ 
;;;696    			if(i == BraceletNumber)   
;;;697    			{
;;;698    				//printf("BraceletNumber:%d\r\n",BraceletNumber);
;;;699    				BraceletNumber++; 							
;;;700    				Bracelet[i][16] = nowsec % 100;      
;;;701    				BraceletNumber %= BRACELET_COUNT;
;;;702    				memcpy(Bracelet[i],&readbuf[12],6);  /*存储手环MAC*/
;;;703    
;;;704    				/*存储、上报运动数据*/
;;;705    				memcpy((uint8_t *)&Bracelet[i][8],&readbuf[12+6+6+5],6);
;;;706    				app_plat_SportDataPublish(&readbuf[12],&readbuf[12+6+6+5]); 
;;;707    			
;;;708    				/*存储、上报位置数据*/
;;;709    				Bracelet[i][6] = readbuf[12+6+6+1];
;;;710    				Bracelet[i][7] = readbuf[12+6+6+3];	
;;;711    				app_plat_LocationPublish(&readbuf[12],&readbuf[12+6],readbuf[12+6+6+5+6+3],&readbuf[4]);
;;;712    								
;;;713    				/*上报睡眠数据*/
;;;714    				app_plat_SleepDataPublish(&readbuf[12],&readbuf[12+6+1]);   
;;;715    				memcpy((uint8_t *)&Bracelet[i][18],&readbuf[12+6+1],6);					
;;;716    			} 
;;;717    	  }
;;;718    		else if(readbuf[1] == GET_STATION)
;;;719    		{			
;;;720    			app_nrf_NewStation( &readbuf[4] );  
;;;721    	  }
;;;722    		memset(readbuf,0x00,sizeof(readbuf));
;;;723      }
;;;724    }
00003e  b013              ADD      sp,sp,#0x4c
000040  bdf0              POP      {r4-r7,pc}
                  |L2.66|
000042  f89d0016          LDRB     r0,[sp,#0x16]         ;601
000046  f89d1015          LDRB     r1,[sp,#0x15]         ;601
00004a  e9cd1000          STRD     r1,r0,[sp,#0]         ;601
00004e  f89d7010          LDRB     r7,[sp,#0x10]         ;601
000052  f89d6011          LDRB     r6,[sp,#0x11]         ;601
000056  eb072606          ADD      r6,r7,r6,LSL #8       ;601
00005a  b2b0              UXTH     r0,r6                 ;601
00005c  f89d3014          LDRB     r3,[sp,#0x14]         ;601
000060  f89d2013          LDRB     r2,[sp,#0x13]         ;601
000064  f89d1012          LDRB     r1,[sp,#0x12]         ;601
000068  f7fffffe          BL       app_nrf_TimeTosec
00006c  4605              MOV      r5,r0                 ;601
00006e  e18c              B        |L2.906|
                  |L2.112|
000070  f89d0019          LDRB     r0,[sp,#0x19]         ;606
000074  2841              CMP      r0,#0x41              ;606
000076  d17d              BNE      |L2.372|
000078  2400              MOVS     r4,#0                 ;609
00007a  e114              B        |L2.678|
                  |L2.124|
00007c  eb040144          ADD      r1,r4,r4,LSL #1       ;612
000080  4ac6              LDR      r2,|L2.924|
000082  eb0200c1          ADD      r0,r2,r1,LSL #3       ;612
000086  2206              MOVS     r2,#6                 ;612
000088  a909              ADD      r1,sp,#0x24           ;612
00008a  f7fffffe          BL       memcmp
00008e  2800              CMP      r0,#0                 ;612
000090  d171              BNE      |L2.374|
000092  eb040144          ADD      r1,r4,r4,LSL #1       ;615
000096  4ac1              LDR      r2,|L2.924|
000098  eb0201c1          ADD      r1,r2,r1,LSL #3       ;615
00009c  f1010008          ADD      r0,r1,#8              ;615
0000a0  2206              MOVS     r2,#6                 ;615
0000a2  f10d0135          ADD      r1,sp,#0x35           ;615
0000a6  f7fffffe          BL       memcmp
0000aa  b178              CBZ      r0,|L2.204|
0000ac  eb040044          ADD      r0,r4,r4,LSL #1       ;617
0000b0  49ba              LDR      r1,|L2.924|
0000b2  eb0100c0          ADD      r0,r1,r0,LSL #3       ;617
0000b6  f8dd1035          LDR      r1,[sp,#0x35]         ;617
0000ba  6081              STR      r1,[r0,#8]            ;617
0000bc  f8bd1039          LDRH     r1,[sp,#0x39]         ;617
0000c0  8181              STRH     r1,[r0,#0xc]          ;617
0000c2  f10d0135          ADD      r1,sp,#0x35           ;618
0000c6  a809              ADD      r0,sp,#0x24           ;618
0000c8  f7fffffe          BL       app_plat_SportDataPublish
                  |L2.204|
0000cc  eb040144          ADD      r1,r4,r4,LSL #1       ;623
0000d0  4ab2              LDR      r2,|L2.924|
0000d2  eb0201c1          ADD      r1,r2,r1,LSL #3       ;623
0000d6  f1010012          ADD      r0,r1,#0x12           ;623
0000da  2206              MOVS     r2,#6                 ;623
0000dc  f10d012b          ADD      r1,sp,#0x2b           ;623
0000e0  f7fffffe          BL       memcmp
0000e4  b180              CBZ      r0,|L2.264|
0000e6  eb040044          ADD      r0,r4,r4,LSL #1       ;625
0000ea  49ac              LDR      r1,|L2.924|
0000ec  eb0100c0          ADD      r0,r1,r0,LSL #3       ;625
0000f0  f8dd102b          LDR      r1,[sp,#0x2b]         ;625
0000f4  f8c01012          STR      r1,[r0,#0x12]         ;625
0000f8  f8bd102f          LDRH     r1,[sp,#0x2f]         ;625
0000fc  82c1              STRH     r1,[r0,#0x16]         ;625
0000fe  f10d012b          ADD      r1,sp,#0x2b           ;626
000102  a809              ADD      r0,sp,#0x24           ;626
000104  f7fffffe          BL       app_plat_SleepDataPublish
                  |L2.264|
000108  eb040044          ADD      r0,r4,r4,LSL #1       ;630
00010c  49a3              LDR      r1,|L2.924|
00010e  eb0100c0          ADD      r0,r1,r0,LSL #3       ;630
000112  7b80              LDRB     r0,[r0,#0xe]          ;630
000114  f89d103b          LDRB     r1,[sp,#0x3b]         ;630
000118  4288              CMP      r0,r1                 ;630
00011a  d00f              BEQ      |L2.316|
00011c  f89d003b          LDRB     r0,[sp,#0x3b]         ;630
000120  b160              CBZ      r0,|L2.316|
000122  f89d003b          LDRB     r0,[sp,#0x3b]         ;632
000126  eb040144          ADD      r1,r4,r4,LSL #1       ;632
00012a  4a9c              LDR      r2,|L2.924|
00012c  eb0201c1          ADD      r1,r2,r1,LSL #3       ;632
000130  7388              STRB     r0,[r1,#0xe]          ;632
000132  f89d103b          LDRB     r1,[sp,#0x3b]         ;633
000136  a809              ADD      r0,sp,#0x24           ;633
000138  f7fffffe          BL       app_plat_HeartratePublish
                  |L2.316|
00013c  eb040044          ADD      r0,r4,r4,LSL #1       ;637
000140  4996              LDR      r1,|L2.924|
000142  eb0100c0          ADD      r0,r1,r0,LSL #3       ;637
000146  7c40              LDRB     r0,[r0,#0x11]         ;637
000148  f89d103c          LDRB     r1,[sp,#0x3c]         ;637
00014c  4288              CMP      r0,r1                 ;637
00014e  d037              BEQ      |L2.448|
000150  2000              MOVS     r0,#0                 ;639
000152  9002              STR      r0,[sp,#8]            ;639
000154  9003              STR      r0,[sp,#0xc]          ;639
000156  f89d003c          LDRB     r0,[sp,#0x3c]         ;641
00015a  eb040144          ADD      r1,r4,r4,LSL #1       ;641
00015e  4a8f              LDR      r2,|L2.924|
000160  eb0201c1          ADD      r1,r2,r1,LSL #3       ;641
000164  7448              STRB     r0,[r1,#0x11]         ;641
000166  eb040044          ADD      r0,r4,r4,LSL #1       ;642
00016a  4611              MOV      r1,r2                 ;642
00016c  eb0100c0          ADD      r0,r1,r0,LSL #3       ;642
000170  7c40              LDRB     r0,[r0,#0x11]         ;642
000172  e001              B        |L2.376|
                  |L2.372|
000174  e0fe              B        |L2.884|
                  |L2.374|
000176  e094              B        |L2.674|
                  |L2.376|
000178  2801              CMP      r0,#1                 ;642
00017a  d110              BNE      |L2.414|
00017c  9809              LDR      r0,[sp,#0x24]         ;650
00017e  9002              STR      r0,[sp,#8]            ;650
000180  f8bd0028          LDRH     r0,[sp,#0x28]         ;650
000184  f8ad000c          STRH     r0,[sp,#0xc]          ;650
000188  2000              MOVS     r0,#0                 ;651
00018a  9000              STR      r0,[sp,#0]            ;651
00018c  f240235e          MOV      r3,#0x25e             ;651
000190  2202              MOVS     r2,#2                 ;651
000192  a902              ADD      r1,sp,#8              ;651
000194  9001              STR      r0,[sp,#4]            ;651
000196  4610              MOV      r0,r2                 ;651
000198  f7fffffe          BL       ErrorLog
00019c  e00f              B        |L2.446|
                  |L2.414|
00019e  9809              LDR      r0,[sp,#0x24]         ;662
0001a0  9002              STR      r0,[sp,#8]            ;662
0001a2  f8bd0028          LDRH     r0,[sp,#0x28]         ;662
0001a6  f8ad000c          STRH     r0,[sp,#0xc]          ;662
0001aa  2000              MOVS     r0,#0                 ;663
0001ac  9000              STR      r0,[sp,#0]            ;663
0001ae  f240235f          MOV      r3,#0x25f             ;663
0001b2  2202              MOVS     r2,#2                 ;663
0001b4  a902              ADD      r1,sp,#8              ;663
0001b6  9001              STR      r0,[sp,#4]            ;663
0001b8  4610              MOV      r0,r2                 ;663
0001ba  f7fffffe          BL       ErrorLog
                  |L2.446|
0001be  bf00              NOP                            ;665
                  |L2.448|
0001c0  eb040044          ADD      r0,r4,r4,LSL #1       ;668
0001c4  4975              LDR      r1,|L2.924|
0001c6  eb0100c0          ADD      r0,r1,r0,LSL #3       ;668
0001ca  7980              LDRB     r0,[r0,#6]            ;668
0001cc  f89d1031          LDRB     r1,[sp,#0x31]         ;668
0001d0  4288              CMP      r0,r1                 ;668
0001d2  d109              BNE      |L2.488|
0001d4  eb040044          ADD      r0,r4,r4,LSL #1       ;668
0001d8  4970              LDR      r1,|L2.924|
0001da  eb0100c0          ADD      r0,r1,r0,LSL #3       ;668
0001de  79c0              LDRB     r0,[r0,#7]            ;668
0001e0  f89d1033          LDRB     r1,[sp,#0x33]         ;668
0001e4  4288              CMP      r0,r1                 ;668
0001e6  d021              BEQ      |L2.556|
                  |L2.488|
0001e8  f89d203e          LDRB     r2,[sp,#0x3e]         ;671
0001ec  ab07              ADD      r3,sp,#0x1c           ;671
0001ee  f10d012a          ADD      r1,sp,#0x2a           ;671
0001f2  a809              ADD      r0,sp,#0x24           ;671
0001f4  f7fffffe          BL       app_plat_LocationPublish
0001f8  f89d0031          LDRB     r0,[sp,#0x31]         ;673
0001fc  eb040144          ADD      r1,r4,r4,LSL #1       ;673
000200  4a66              LDR      r2,|L2.924|
000202  eb0201c1          ADD      r1,r2,r1,LSL #3       ;673
000206  7188              STRB     r0,[r1,#6]            ;673
000208  f89d0033          LDRB     r0,[sp,#0x33]         ;674
00020c  eb040144          ADD      r1,r4,r4,LSL #1       ;674
000210  eb0201c1          ADD      r1,r2,r1,LSL #3       ;674
000214  71c8              STRB     r0,[r1,#7]            ;674
000216  2064              MOVS     r0,#0x64              ;676
000218  fbb5f1f0          UDIV     r1,r5,r0              ;676
00021c  fb005011          MLS      r0,r0,r1,r5           ;676
000220  eb040144          ADD      r1,r4,r4,LSL #1       ;676
000224  eb0201c1          ADD      r1,r2,r1,LSL #3       ;676
000228  7408              STRB     r0,[r1,#0x10]         ;676
00022a  e01f              B        |L2.620|
                  |L2.556|
00022c  2064              MOVS     r0,#0x64              ;678
00022e  fbb5f1f0          UDIV     r1,r5,r0              ;678
000232  fb005011          MLS      r0,r0,r1,r5           ;678
000236  eb040144          ADD      r1,r4,r4,LSL #1       ;678
00023a  4a58              LDR      r2,|L2.924|
00023c  eb0201c1          ADD      r1,r2,r1,LSL #3       ;678
000240  7c09              LDRB     r1,[r1,#0x10]         ;678
000242  1a40              SUBS     r0,r0,r1              ;678
000244  280a              CMP      r0,#0xa               ;678
000246  d911              BLS      |L2.620|
000248  2064              MOVS     r0,#0x64              ;680
00024a  fbb5f1f0          UDIV     r1,r5,r0              ;680
00024e  fb005011          MLS      r0,r0,r1,r5           ;680
000252  eb040144          ADD      r1,r4,r4,LSL #1       ;680
000256  eb0201c1          ADD      r1,r2,r1,LSL #3       ;680
00025a  7408              STRB     r0,[r1,#0x10]         ;680
00025c  f89d203e          LDRB     r2,[sp,#0x3e]         ;681
000260  ab07              ADD      r3,sp,#0x1c           ;681
000262  f10d012a          ADD      r1,sp,#0x2a           ;681
000266  a809              ADD      r0,sp,#0x24           ;681
000268  f7fffffe          BL       app_plat_LocationPublish
                  |L2.620|
00026c  eb040044          ADD      r0,r4,r4,LSL #1       ;685
000270  494a              LDR      r1,|L2.924|
000272  eb0100c0          ADD      r0,r1,r0,LSL #3       ;685
000276  7bc0              LDRB     r0,[r0,#0xf]          ;685
000278  f89d103d          LDRB     r1,[sp,#0x3d]         ;685
00027c  4288              CMP      r0,r1                 ;685
00027e  d00f              BEQ      |L2.672|
000280  f89d003d          LDRB     r0,[sp,#0x3d]         ;685
000284  b160              CBZ      r0,|L2.672|
000286  f89d003d          LDRB     r0,[sp,#0x3d]         ;687
00028a  eb040144          ADD      r1,r4,r4,LSL #1       ;687
00028e  4a43              LDR      r2,|L2.924|
000290  eb0201c1          ADD      r1,r2,r1,LSL #3       ;687
000294  73c8              STRB     r0,[r1,#0xf]          ;687
000296  f89d103d          LDRB     r1,[sp,#0x3d]         ;688
00029a  a809              ADD      r0,sp,#0x24           ;688
00029c  f7fffffe          BL       app_plat_BraceletInfoPublish
                  |L2.672|
0002a0  e006              B        |L2.688|
                  |L2.674|
0002a2  1c60              ADDS     r0,r4,#1              ;609
0002a4  b284              UXTH     r4,r0                 ;609
                  |L2.678|
0002a6  483e              LDR      r0,|L2.928|
0002a8  6800              LDR      r0,[r0,#0]            ;609  ; BraceletNumber
0002aa  4284              CMP      r4,r0                 ;609
0002ac  f4ffaee6          BCC      |L2.124|
                  |L2.688|
0002b0  bf00              NOP                            ;691
0002b2  483b              LDR      r0,|L2.928|
0002b4  6800              LDR      r0,[r0,#0]            ;696  ; BraceletNumber
0002b6  4284              CMP      r4,r0                 ;696
0002b8  d163              BNE      |L2.898|
0002ba  4839              LDR      r0,|L2.928|
0002bc  6800              LDR      r0,[r0,#0]            ;699  ; BraceletNumber
0002be  1c40              ADDS     r0,r0,#1              ;699
0002c0  4937              LDR      r1,|L2.928|
0002c2  6008              STR      r0,[r1,#0]            ;699  ; BraceletNumber
0002c4  2064              MOVS     r0,#0x64              ;700
0002c6  fbb5f1f0          UDIV     r1,r5,r0              ;700
0002ca  fb005011          MLS      r0,r0,r1,r5           ;700
0002ce  eb040144          ADD      r1,r4,r4,LSL #1       ;700
0002d2  4a32              LDR      r2,|L2.924|
0002d4  eb0201c1          ADD      r1,r2,r1,LSL #3       ;700
0002d8  7408              STRB     r0,[r1,#0x10]         ;700
0002da  4831              LDR      r0,|L2.928|
0002dc  6800              LDR      r0,[r0,#0]            ;701  ; BraceletNumber
0002de  f44f7196          MOV      r1,#0x12c             ;701
0002e2  fbb0f2f1          UDIV     r2,r0,r1              ;701
0002e6  fb010012          MLS      r0,r1,r2,r0           ;701
0002ea  492d              LDR      r1,|L2.928|
0002ec  6008              STR      r0,[r1,#0]            ;701  ; BraceletNumber
0002ee  eb040044          ADD      r0,r4,r4,LSL #1       ;702
0002f2  492a              LDR      r1,|L2.924|
0002f4  eb0100c0          ADD      r0,r1,r0,LSL #3       ;702
0002f8  9909              LDR      r1,[sp,#0x24]         ;702
0002fa  6001              STR      r1,[r0,#0]            ;702
0002fc  f8bd1028          LDRH     r1,[sp,#0x28]         ;702
000300  8081              STRH     r1,[r0,#4]            ;702
000302  eb040044          ADD      r0,r4,r4,LSL #1       ;705
000306  4925              LDR      r1,|L2.924|
000308  eb0100c0          ADD      r0,r1,r0,LSL #3       ;705
00030c  f8dd1035          LDR      r1,[sp,#0x35]         ;705
000310  6081              STR      r1,[r0,#8]            ;705
000312  f8bd1039          LDRH     r1,[sp,#0x39]         ;705
000316  8181              STRH     r1,[r0,#0xc]          ;705
000318  f10d0135          ADD      r1,sp,#0x35           ;706
00031c  a809              ADD      r0,sp,#0x24           ;706
00031e  f7fffffe          BL       app_plat_SportDataPublish
000322  f89d0031          LDRB     r0,[sp,#0x31]         ;709
000326  eb040144          ADD      r1,r4,r4,LSL #1       ;709
00032a  4a1c              LDR      r2,|L2.924|
00032c  eb0201c1          ADD      r1,r2,r1,LSL #3       ;709
000330  7188              STRB     r0,[r1,#6]            ;709
000332  f89d0033          LDRB     r0,[sp,#0x33]         ;710
000336  eb040144          ADD      r1,r4,r4,LSL #1       ;710
00033a  eb0201c1          ADD      r1,r2,r1,LSL #3       ;710
00033e  71c8              STRB     r0,[r1,#7]            ;710
000340  f89d203e          LDRB     r2,[sp,#0x3e]         ;711
000344  ab07              ADD      r3,sp,#0x1c           ;711
000346  f10d012a          ADD      r1,sp,#0x2a           ;711
00034a  a809              ADD      r0,sp,#0x24           ;711
00034c  f7fffffe          BL       app_plat_LocationPublish
000350  f10d012b          ADD      r1,sp,#0x2b           ;714
000354  a809              ADD      r0,sp,#0x24           ;714
000356  f7fffffe          BL       app_plat_SleepDataPublish
00035a  eb040044          ADD      r0,r4,r4,LSL #1       ;715
00035e  490f              LDR      r1,|L2.924|
000360  eb0100c0          ADD      r0,r1,r0,LSL #3       ;715
000364  f8dd102b          LDR      r1,[sp,#0x2b]         ;715
000368  f8c01012          STR      r1,[r0,#0x12]         ;715
00036c  f8bd102f          LDRH     r1,[sp,#0x2f]         ;715
000370  82c1              STRH     r1,[r0,#0x16]         ;715
000372  e006              B        |L2.898|
                  |L2.884|
000374  f89d0019          LDRB     r0,[sp,#0x19]         ;718
000378  2844              CMP      r0,#0x44              ;718
00037a  d102              BNE      |L2.898|
00037c  a807              ADD      r0,sp,#0x1c           ;720
00037e  f7fffffe          BL       app_nrf_NewStation
                  |L2.898|
000382  2134              MOVS     r1,#0x34              ;722
000384  a806              ADD      r0,sp,#0x18           ;722
000386  f7fffffe          BL       __aeabi_memclr4
                  |L2.906|
00038a  a806              ADD      r0,sp,#0x18           ;604
00038c  f7fffffe          BL       app_nrf_ReadData
000390  2801              CMP      r0,#1                 ;604
000392  f43fae6d          BEQ      |L2.112|
000396  bf00              NOP      
000398  e651              B        |L2.62|
                          ENDP

00039a  0000              DCW      0x0000
                  |L2.924|
                          DCD      Bracelet
                  |L2.928|
                          DCD      BraceletNumber

                          AREA ||i.app_nrf_DisconnectBle||, CODE, READONLY, ALIGN=2

                  app_nrf_DisconnectBle PROC
;;;407    */
;;;408    ErrorStatus app_nrf_DisconnectBle(uint8_t *station)
000000  b5f0              PUSH     {r4-r7,lr}
;;;409    {
000002  b091              SUB      sp,sp,#0x44
000004  4605              MOV      r5,r0
;;;410    	uint8_t i=0;
000006  2400              MOVS     r4,#0
;;;411    	uint8_t check_results=0;
000008  2600              MOVS     r6,#0
;;;412    	uint8_t readbuf[MAX_BLE_RESPONSE_LEN] = {0};
00000a  2134              MOVS     r1,#0x34
00000c  a804              ADD      r0,sp,#0x10
00000e  f7fffffe          BL       __aeabi_memclr4
;;;413    	uint8_t Sendbuf[14]={0x5A,0x40,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
000012  a327              ADR      r3,|L3.176|
000014  cb0f              LDM      r3,{r0-r3}
000016  e88d000f          STM      sp,{r0-r3}
;;;414    	
;;;415    	memcpy(&Sendbuf[4],station,8);
00001a  6828              LDR      r0,[r5,#0]
00001c  9001              STR      r0,[sp,#4]
00001e  6868              LDR      r0,[r5,#4]
000020  9002              STR      r0,[sp,#8]
;;;416    	
;;;417    	Sendbuf[1]=DISCONNECTBLE;
000022  2040              MOVS     r0,#0x40
000024  f88d0001          STRB     r0,[sp,#1]
;;;418    	check_results=Sendbuf[1];   
000028  f89d6001          LDRB     r6,[sp,#1]
;;;419    	for(i=2;i<(Sendbuf[3]+2+3-1);i++)   //CMD字段到数据字段进行校验
00002c  2402              MOVS     r4,#2
00002e  e004              B        |L3.58|
                  |L3.48|
;;;420    	{
;;;421    		check_results^=Sendbuf[i];
000030  f81d0004          LDRB     r0,[sp,r4]
000034  4046              EORS     r6,r6,r0
000036  1c60              ADDS     r0,r4,#1              ;419
000038  b2c4              UXTB     r4,r0                 ;419
                  |L3.58|
00003a  f89d0003          LDRB     r0,[sp,#3]            ;419
00003e  1d00              ADDS     r0,r0,#4              ;419
000040  42a0              CMP      r0,r4                 ;419
000042  dcf5              BGT      |L3.48|
;;;422    	}
;;;423    	Sendbuf[12]=check_results;          //校验值
000044  f88d600c          STRB     r6,[sp,#0xc]
;;;424    	Sendbuf[13]=0xca;                   //结束符	
000048  20ca              MOVS     r0,#0xca
00004a  f88d000d          STRB     r0,[sp,#0xd]
;;;425    		
;;;426    	for(i=0;i<10;i++)
00004e  2400              MOVS     r4,#0
000050  e029              B        |L3.166|
                  |L3.82|
;;;427    	{
;;;428    		comSendBuf( NRF_PORT , Sendbuf , Sendbuf[2]*256+Sendbuf[3]+6 );  	 //发送数据
000052  f89d1003          LDRB     r1,[sp,#3]
000056  f89d0002          LDRB     r0,[sp,#2]
00005a  eb012000          ADD      r0,r1,r0,LSL #8
00005e  1d80              ADDS     r0,r0,#6
000060  b282              UXTH     r2,r0
000062  4669              MOV      r1,sp
000064  2002              MOVS     r0,#2
000066  f7fffffe          BL       comSendBuf
;;;429    		vTaskDelay(500);
00006a  f44f70fa          MOV      r0,#0x1f4
00006e  f7fffffe          BL       vTaskDelay
;;;430    		IWDG_Feed();
000072  f7fffffe          BL       IWDG_Feed
;;;431    		memset(readbuf,0x00,sizeof(readbuf));
000076  2134              MOVS     r1,#0x34
000078  a804              ADD      r0,sp,#0x10
00007a  f7fffffe          BL       __aeabi_memclr4
;;;432    		for(uint8_t j = 0; j < 50; j++)
00007e  2700              MOVS     r7,#0
000080  e00d              B        |L3.158|
                  |L3.130|
;;;433    		{
;;;434    			if(SUCCESS == app_nrf_ReadData(readbuf) && readbuf[1] == 0x40)
000082  a804              ADD      r0,sp,#0x10
000084  f7fffffe          BL       app_nrf_ReadData
000088  2801              CMP      r0,#1
00008a  d106              BNE      |L3.154|
00008c  f89d0011          LDRB     r0,[sp,#0x11]
000090  2840              CMP      r0,#0x40
000092  d102              BNE      |L3.154|
;;;435    			{ 
;;;436    				return SUCCESS;
000094  2001              MOVS     r0,#1
                  |L3.150|
;;;437    			}
;;;438    		}
;;;439    	}
;;;440    	return ERROR;
;;;441    }
000096  b011              ADD      sp,sp,#0x44
000098  bdf0              POP      {r4-r7,pc}
                  |L3.154|
00009a  1c78              ADDS     r0,r7,#1              ;432
00009c  b2c7              UXTB     r7,r0                 ;432
                  |L3.158|
00009e  2f32              CMP      r7,#0x32              ;432
0000a0  dbef              BLT      |L3.130|
0000a2  1c60              ADDS     r0,r4,#1              ;426
0000a4  b2c4              UXTB     r4,r0                 ;426
                  |L3.166|
0000a6  2c0a              CMP      r4,#0xa               ;426
0000a8  dbd3              BLT      |L3.82|
0000aa  2000              MOVS     r0,#0                 ;440
0000ac  e7f3              B        |L3.150|
;;;442    
                          ENDP

0000ae  0000              DCW      0x0000
                  |L3.176|
0000b0  5a4000            DCB      "Z@",0
0000b3  0800              DCB      "\b",0
0000b5  00                DCB      0
0000b6  00                DCB      0
0000b7  00                DCB      0
0000b8  00                DCB      0
0000b9  00                DCB      0
0000ba  00                DCB      0
0000bb  00                DCB      0
0000bc  00                DCB      0
0000bd  00                DCB      0
0000be  00                DCB      0
0000bf  00                DCB      0

                          AREA ||i.app_nrf_GetBleData||, CODE, READONLY, ALIGN=2

                  app_nrf_GetBleData PROC
;;;267     */
;;;268    void app_nrf_GetBleData(uint8_t *station)
000000  b57f              PUSH     {r0-r6,lr}
;;;269    {
000002  4605              MOV      r5,r0
;;;270    	uint8_t i=0;
000004  2400              MOVS     r4,#0
;;;271    	uint8_t check_results=0;
000006  2600              MOVS     r6,#0
;;;272    	uint8_t Sendbuf[14]={0x5A,0x41,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0xCA};
000008  a312              ADR      r3,|L4.84|
00000a  cb0f              LDM      r3,{r0-r3}
00000c  e88d000f          STM      sp,{r0-r3}
;;;273    
;;;274    	Sendbuf[1] = GETBLEDATA;         /*消息ID*/
000010  2041              MOVS     r0,#0x41
000012  f88d0001          STRB     r0,[sp,#1]
;;;275    	memcpy(&Sendbuf[4],station,8);   /*读头地址*/
000016  6828              LDR      r0,[r5,#0]
000018  9001              STR      r0,[sp,#4]
00001a  6868              LDR      r0,[r5,#4]
00001c  9002              STR      r0,[sp,#8]
;;;276    	
;;;277    	check_results=Sendbuf[1];
00001e  f89d6001          LDRB     r6,[sp,#1]
;;;278    	for(i=2;i<(Sendbuf[3]+2+3-1);i++)   //CMD字段到数据字段进行校验
000022  2402              MOVS     r4,#2
000024  e004              B        |L4.48|
                  |L4.38|
;;;279    		check_results^=Sendbuf[i];
000026  f81d0004          LDRB     r0,[sp,r4]
00002a  4046              EORS     r6,r6,r0
00002c  1c60              ADDS     r0,r4,#1              ;278
00002e  b2c4              UXTB     r4,r0                 ;278
                  |L4.48|
000030  f89d0003          LDRB     r0,[sp,#3]            ;278
000034  1d00              ADDS     r0,r0,#4              ;278
000036  42a0              CMP      r0,r4                 ;278
000038  dcf5              BGT      |L4.38|
;;;280    	Sendbuf[i]=check_results;           //校验值
00003a  f80d6004          STRB     r6,[sp,r4]
;;;281    	Sendbuf[i+1]=0xca;                  //结束符
00003e  21ca              MOVS     r1,#0xca
000040  1c60              ADDS     r0,r4,#1
000042  f80d1000          STRB     r1,[sp,r0]
;;;282    	
;;;283    	comSendBuf( NRF_PORT , Sendbuf , 14 );       //发送数据包
000046  220e              MOVS     r2,#0xe
000048  4669              MOV      r1,sp
00004a  2002              MOVS     r0,#2
00004c  f7fffffe          BL       comSendBuf
;;;284    }
000050  bd7f              POP      {r0-r6,pc}
;;;285    
                          ENDP

000052  0000              DCW      0x0000
                  |L4.84|
000054  5a4100            DCB      "ZA",0
000057  0800              DCB      "\b",0
000059  00                DCB      0
00005a  00                DCB      0
00005b  00                DCB      0
00005c  00                DCB      0
00005d  00                DCB      0
00005e  00                DCB      0
00005f  00                DCB      0
000060  49ca00            DCB      "I",202,0
000063  00                DCB      0

                          AREA ||i.app_nrf_GetNewStation||, CODE, READONLY, ALIGN=2

                  app_nrf_GetNewStation PROC
;;;557    */
;;;558    void app_nrf_GetNewStation(void)
000000  b51f              PUSH     {r0-r4,lr}
;;;559    {
;;;560    	uint8_t reqdata[14] = {0x5a,0x44,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x4c,0xca};
000002  a305              ADR      r3,|L5.24|
000004  cb0f              LDM      r3,{r0-r3}
000006  e88d000f          STM      sp,{r0-r3}
;;;561    	
;;;562    	comSendBuf( NRF_PORT , reqdata , sizeof(reqdata) );       //发送数据包
00000a  220e              MOVS     r2,#0xe
00000c  4669              MOV      r1,sp
00000e  2002              MOVS     r0,#2
000010  f7fffffe          BL       comSendBuf
;;;563    }
000014  bd1f              POP      {r0-r4,pc}
;;;564    
                          ENDP

000016  0000              DCW      0x0000
                  |L5.24|
000018  5a4400            DCB      "ZD",0
00001b  0800              DCB      "\b",0
00001d  00                DCB      0
00001e  00                DCB      0
00001f  00                DCB      0
000020  00                DCB      0
000021  00                DCB      0
000022  00                DCB      0
000023  00                DCB      0
000024  4cca00            DCB      "L",202,0
000027  00                DCB      0

                          AREA ||i.app_nrf_IsLeapYear||, CODE, READONLY, ALIGN=1

                  app_nrf_IsLeapYear PROC
;;;156    */
;;;157    static uint8_t app_nrf_IsLeapYear(uint16_t year)
000000  4601              MOV      r1,r0
;;;158    {			  
;;;159    	if(year%4==0) //必须能被4整除
000002  17ca              ASRS     r2,r1,#31
000004  eb017292          ADD      r2,r1,r2,LSR #30
000008  1092              ASRS     r2,r2,#2
00000a  eba10282          SUB      r2,r1,r2,LSL #2
00000e  b992              CBNZ     r2,|L6.54|
;;;160    	{ 
;;;161    		if(year%100==0) 
000010  2064              MOVS     r0,#0x64
000012  fb91f2f0          SDIV     r2,r1,r0
000016  fb001012          MLS      r0,r0,r2,r1
00001a  b950              CBNZ     r0,|L6.50|
;;;162    		{ 
;;;163    			if(year%400==0)return 1;//如果以00结尾,还要能被400整除 	   
00001c  f44f70c8          MOV      r0,#0x190
000020  fb91f2f0          SDIV     r2,r1,r0
000024  fb001012          MLS      r0,r0,r2,r1
000028  b908              CBNZ     r0,|L6.46|
00002a  2001              MOVS     r0,#1
                  |L6.44|
;;;164    			else return 0;   
;;;165    		}else return 1;   
;;;166    	}else return 0;	
;;;167    }
00002c  4770              BX       lr
                  |L6.46|
00002e  2000              MOVS     r0,#0                 ;164
000030  e7fc              B        |L6.44|
                  |L6.50|
000032  2001              MOVS     r0,#1                 ;165
000034  e7fa              B        |L6.44|
                  |L6.54|
000036  2000              MOVS     r0,#0                 ;166
000038  e7f8              B        |L6.44|
;;;168    
                          ENDP


                          AREA ||i.app_nrf_LeaveMessage||, CODE, READONLY, ALIGN=2

                  app_nrf_LeaveMessage PROC
;;;457     */
;;;458    ErrorStatus app_nrf_LeaveMessage(uint8_t *station,uint8_t *message,uint16_t len)
000000  e92d43f0          PUSH     {r4-r9,lr}
;;;459    {
000004  f2ad4d34          SUB      sp,sp,#0x434
000008  4606              MOV      r6,r0
00000a  4689              MOV      r9,r1
00000c  4614              MOV      r4,r2
;;;460    	uint8_t i=0;
00000e  2500              MOVS     r5,#0
;;;461    	uint8_t check_results=0;
000010  2700              MOVS     r7,#0
;;;462    	uint8_t readbuf[MAX_BLE_RESPONSE_LEN] = {0};
000012  2134              MOVS     r1,#0x34
000014  f50d6080          ADD      r0,sp,#0x400
000018  f7fffffe          BL       __aeabi_memclr4
;;;463    	uint8_t Sendbuf[1024]={0x5A,0x43,0x00,0x0E,0x00,0x00,0x00,0x00,0x00,
00001c  f44f717c          MOV      r1,#0x3f0
000020  a804              ADD      r0,sp,#0x10
000022  f7fffffe          BL       __aeabi_memclr4
000026  4b3a              LDR      r3,|L7.272|
000028  e9d32000          LDRD     r2,r0,[r3,#0]
00002c  e9d31302          LDRD     r1,r3,[r3,#8]
000030  e9cd1302          STRD     r1,r3,[sp,#8]
000034  e9cd2000          STRD     r2,r0,[sp,#0]
;;;464    	0x00,0x00,0x00,0x00,0x00,0x20,0x05};
;;;465      
;;;466    	Sendbuf[1]=SEND_MESSAGE;            /*消息ID*/
000038  2043              MOVS     r0,#0x43
00003a  f88d0001          STRB     r0,[sp,#1]
;;;467    	
;;;468      Sendbuf[2]=(len+8)/256;               
00003e  f1040008          ADD      r0,r4,#8
000042  17c1              ASRS     r1,r0,#31
000044  eb006111          ADD      r1,r0,r1,LSR #24
000048  0a09              LSRS     r1,r1,#8
00004a  f88d1002          STRB     r1,[sp,#2]
;;;469      Sendbuf[3]=(len+8)%256;
00004e  17c1              ASRS     r1,r0,#31
000050  eb006111          ADD      r1,r0,r1,LSR #24
000054  1209              ASRS     r1,r1,#8
000056  eba02101          SUB      r1,r0,r1,LSL #8
00005a  b2c9              UXTB     r1,r1
00005c  f88d1003          STRB     r1,[sp,#3]
;;;470    
;;;471    	memcpy(&Sendbuf[4],station,8);      /*基站设备地址*/
000060  6830              LDR      r0,[r6,#0]
000062  9001              STR      r0,[sp,#4]
000064  6870              LDR      r0,[r6,#4]
000066  9002              STR      r0,[sp,#8]
;;;472    	memcpy(&Sendbuf[12],message,len);   /*消息*/
000068  4622              MOV      r2,r4
00006a  4649              MOV      r1,r9
00006c  a803              ADD      r0,sp,#0xc
00006e  f7fffffe          BL       __aeabi_memcpy
;;;473    	
;;;474    	check_results=Sendbuf[1];   
000072  f89d7001          LDRB     r7,[sp,#1]
;;;475    	for(i=2;i<(Sendbuf[3]+2+3-1);i++)   //CMD字段到数据字段进行校验
000076  2502              MOVS     r5,#2
000078  e004              B        |L7.132|
                  |L7.122|
;;;476    	{
;;;477    		check_results^=Sendbuf[i];
00007a  f81d0005          LDRB     r0,[sp,r5]
00007e  4047              EORS     r7,r7,r0
000080  1c68              ADDS     r0,r5,#1              ;475
000082  b2c5              UXTB     r5,r0                 ;475
                  |L7.132|
000084  f89d0003          LDRB     r0,[sp,#3]            ;475
000088  1d00              ADDS     r0,r0,#4              ;475
00008a  42a8              CMP      r0,r5                 ;475
00008c  dcf5              BGT      |L7.122|
;;;478    	}
;;;479    	Sendbuf[len+8+4]=check_results;     //校验值
00008e  f104000c          ADD      r0,r4,#0xc
000092  f80d7000          STRB     r7,[sp,r0]
;;;480    	Sendbuf[len+8+5]=0xca;              //结束符
000096  21ca              MOVS     r1,#0xca
000098  1c40              ADDS     r0,r0,#1
00009a  f80d1000          STRB     r1,[sp,r0]
;;;481    //		
;;;482    //	while(SUCCESS == app_nrf_ReadData(readbuf))  /*读空接收缓存*/
;;;483    //	{
;;;484    //		IWDG_Feed();
;;;485    //	}
;;;486    	
;;;487    	comSendBuf( NRF_PORT , Sendbuf , Sendbuf[2]*256+Sendbuf[3]+6 );        
00009e  f89d1003          LDRB     r1,[sp,#3]
0000a2  f89d0002          LDRB     r0,[sp,#2]
0000a6  eb012000          ADD      r0,r1,r0,LSL #8
0000aa  1d80              ADDS     r0,r0,#6
0000ac  b282              UXTH     r2,r0
0000ae  4669              MOV      r1,sp
0000b0  2002              MOVS     r0,#2
0000b2  f7fffffe          BL       comSendBuf
;;;488    	
;;;489    	for(i=0;i<30;i++)                   //等待响应
0000b6  2500              MOVS     r5,#0
0000b8  e025              B        |L7.262|
                  |L7.186|
;;;490    	{
;;;491    		IWDG_Feed();
0000ba  f7fffffe          BL       IWDG_Feed
;;;492    		vTaskDelay(1000);
0000be  f44f707a          MOV      r0,#0x3e8
0000c2  f7fffffe          BL       vTaskDelay
;;;493    		
;;;494    		for(uint8_t j = 0; j < 50; j++)
0000c6  f04f0800          MOV      r8,#0
0000ca  e017              B        |L7.252|
                  |L7.204|
;;;495    		{
;;;496    			memset(readbuf,0x00,sizeof(readbuf));
0000cc  2134              MOVS     r1,#0x34
0000ce  f50d6080          ADD      r0,sp,#0x400
0000d2  f7fffffe          BL       __aeabi_memclr4
;;;497    			if(SUCCESS == app_nrf_ReadData(readbuf) && readbuf[1] == 0x43)
0000d6  f50d6080          ADD      r0,sp,#0x400
0000da  f7fffffe          BL       app_nrf_ReadData
0000de  2801              CMP      r0,#1
0000e0  d108              BNE      |L7.244|
0000e2  f89d0401          LDRB     r0,[sp,#0x401]
0000e6  2843              CMP      r0,#0x43
0000e8  d104              BNE      |L7.244|
;;;498    			{ 
;;;499    				return SUCCESS;
0000ea  2001              MOVS     r0,#1
                  |L7.236|
;;;500    			}
;;;501    		}
;;;502      }		
;;;503    	#if APP_DEBUG
;;;504    	printf("Leave a message fail_2!\r\n");
;;;505      #endif
;;;506    	return ERROR;
;;;507    }
0000ec  f20d4d34          ADD      sp,sp,#0x434
0000f0  e8bd83f0          POP      {r4-r9,pc}
                  |L7.244|
0000f4  f1080001          ADD      r0,r8,#1              ;494
0000f8  f00008ff          AND      r8,r0,#0xff           ;494
                  |L7.252|
0000fc  f1b80f32          CMP      r8,#0x32              ;494
000100  dbe4              BLT      |L7.204|
000102  1c68              ADDS     r0,r5,#1              ;489
000104  b2c5              UXTB     r5,r0                 ;489
                  |L7.262|
000106  2d1e              CMP      r5,#0x1e              ;489
000108  dbd7              BLT      |L7.186|
00010a  2000              MOVS     r0,#0                 ;506
00010c  e7ee              B        |L7.236|
;;;508    
                          ENDP

00010e  0000              DCW      0x0000
                  |L7.272|
                          DCD      ||.constdata||+0x200

                          AREA ||i.app_nrf_NewStation||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_flags
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_x
                          REQUIRE _printf_longlong_hex
                  app_nrf_NewStation PROC
;;;213     */
;;;214    static void app_nrf_NewStation(uint8_t *Station)
000000  b57f              PUSH     {r0-r6,lr}
;;;215    {
000002  4604              MOV      r4,r0
;;;216    	uint8_t check_results = 0;
000004  2600              MOVS     r6,#0
;;;217    	uint8_t ackdata[14] = {0x5a,0x44,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x4c,0xca};
000006  a328              ADR      r3,|L8.168|
000008  cb0f              LDM      r3,{r0-r3}
00000a  e88d000f          STM      sp,{r0-r3}
;;;218    
;;;219    	if(sysCfg.parameter.register_flag == REGISTER)
00000e  482a              LDR      r0,|L8.184|
000010  f89000e0          LDRB     r0,[r0,#0xe0]  ; sysCfg
000014  2801              CMP      r0,#1
000016  d100              BNE      |L8.26|
                  |L8.24|
;;;220    	{
;;;221    		return;
;;;222    	}
;;;223    	
;;;224    	/*打印设备信息*/	
;;;225      #if 1	
;;;226    	printf("0000");
;;;227    	for(uint8_t i = 0; i < 6; i++)
;;;228    	{
;;;229    		printf("%02X",sysCfg.parameter.client_mac[i]);
;;;230    	}
;;;231    	
;;;232    	printf("   ");
;;;233    	for(uint8_t i = 0; i < 8; i++)
;;;234    	{
;;;235    		printf("%02X",Station[i]);
;;;236    	}
;;;237    	printf("\r\n");	
;;;238      #endif
;;;239    		
;;;240    	/*返回响应数据*/
;;;241    	memcpy(&ackdata[4],Station,8);	
;;;242    	check_results = ackdata[1];   
;;;243    	for(uint8_t i = 2; i < (ackdata[3] + 4); i++)   //CMD字段到数据字段进行校验
;;;244    	{
;;;245    		check_results ^= ackdata[i];
;;;246    	}
;;;247    	ackdata[12] = check_results;                    //校验值
;;;248    	comSendBuf( NRF_PORT , ackdata , 14 );          //发送确认数据包
;;;249    	
;;;250    	memcpy(&sysCfg.parameter.nrfstation,Station,8);  
;;;251      sysCfg.parameter.register_flag = REGISTER;  	
;;;252    	 
;;;253    	app_system_NetPublic();
;;;254    }
000018  bd7f              POP      {r0-r6,pc}
                  |L8.26|
00001a  a028              ADR      r0,|L8.188|
00001c  f7fffffe          BL       __2printf
000020  2500              MOVS     r5,#0                 ;227
000022  e007              B        |L8.52|
                  |L8.36|
000024  4824              LDR      r0,|L8.184|
000026  30da              ADDS     r0,r0,#0xda           ;229
000028  5d41              LDRB     r1,[r0,r5]            ;229
00002a  a026              ADR      r0,|L8.196|
00002c  f7fffffe          BL       __2printf
000030  1c68              ADDS     r0,r5,#1              ;227
000032  b2c5              UXTB     r5,r0                 ;227
                  |L8.52|
000034  2d06              CMP      r5,#6                 ;227
000036  dbf5              BLT      |L8.36|
000038  a024              ADR      r0,|L8.204|
00003a  f7fffffe          BL       __2printf
00003e  2500              MOVS     r5,#0                 ;233
000040  e005              B        |L8.78|
                  |L8.66|
000042  5d61              LDRB     r1,[r4,r5]            ;235
000044  a01f              ADR      r0,|L8.196|
000046  f7fffffe          BL       __2printf
00004a  1c68              ADDS     r0,r5,#1              ;233
00004c  b2c5              UXTB     r5,r0                 ;233
                  |L8.78|
00004e  2d08              CMP      r5,#8                 ;233
000050  dbf7              BLT      |L8.66|
000052  a01f              ADR      r0,|L8.208|
000054  f7fffffe          BL       __2printf
000058  6820              LDR      r0,[r4,#0]            ;241
00005a  9001              STR      r0,[sp,#4]            ;241
00005c  6860              LDR      r0,[r4,#4]            ;241
00005e  9002              STR      r0,[sp,#8]            ;241
000060  f89d6001          LDRB     r6,[sp,#1]            ;242
000064  2002              MOVS     r0,#2                 ;243
000066  e004              B        |L8.114|
                  |L8.104|
000068  f81d1000          LDRB     r1,[sp,r0]            ;245
00006c  404e              EORS     r6,r6,r1              ;245
00006e  1c41              ADDS     r1,r0,#1              ;243
000070  b2c8              UXTB     r0,r1                 ;243
                  |L8.114|
000072  f89d1003          LDRB     r1,[sp,#3]            ;243
000076  1d09              ADDS     r1,r1,#4              ;243
000078  4281              CMP      r1,r0                 ;243
00007a  dcf5              BGT      |L8.104|
00007c  f88d600c          STRB     r6,[sp,#0xc]          ;247
000080  220e              MOVS     r2,#0xe               ;248
000082  4669              MOV      r1,sp                 ;248
000084  2002              MOVS     r0,#2                 ;248
000086  f7fffffe          BL       comSendBuf
00008a  480b              LDR      r0,|L8.184|
00008c  3080              ADDS     r0,r0,#0x80           ;250
00008e  6821              LDR      r1,[r4,#0]            ;250
000090  6641              STR      r1,[r0,#0x64]         ;250  ; sysCfg
000092  6861              LDR      r1,[r4,#4]            ;250
000094  6681              STR      r1,[r0,#0x68]         ;250  ; sysCfg
000096  2001              MOVS     r0,#1                 ;251
000098  4907              LDR      r1,|L8.184|
00009a  f88100e0          STRB     r0,[r1,#0xe0]         ;251
00009e  f7fffffe          BL       app_system_NetPublic
0000a2  bf00              NOP      
0000a4  e7b8              B        |L8.24|
;;;255    
                          ENDP

0000a6  0000              DCW      0x0000
                  |L8.168|
0000a8  5a4400            DCB      "ZD",0
0000ab  0800              DCB      "\b",0
0000ad  00                DCB      0
0000ae  00                DCB      0
0000af  00                DCB      0
0000b0  00                DCB      0
0000b1  00                DCB      0
0000b2  00                DCB      0
0000b3  00                DCB      0
0000b4  4cca00            DCB      "L",202,0
0000b7  00                DCB      0
                  |L8.184|
                          DCD      sysCfg
                  |L8.188|
0000bc  30303030          DCB      "0000",0
0000c0  00      
0000c1  00                DCB      0
0000c2  00                DCB      0
0000c3  00                DCB      0
                  |L8.196|
0000c4  25303258          DCB      "%02X",0
0000c8  00      
0000c9  00                DCB      0
0000ca  00                DCB      0
0000cb  00                DCB      0
                  |L8.204|
0000cc  20202000          DCB      "   ",0
                  |L8.208|
0000d0  0d0a00            DCB      "\r\n",0
0000d3  00                DCB      0

                          AREA ||i.app_nrf_ReadData||, CODE, READONLY, ALIGN=1

                  app_nrf_ReadData PROC
;;;13      */
;;;14     ErrorStatus app_nrf_ReadData(uint8_t *recebuf)
000000  b5f8              PUSH     {r3-r7,lr}
;;;15     {
000002  4605              MOV      r5,r0
;;;16     	uint8_t i = 0;
000004  2400              MOVS     r4,#0
;;;17     	uint8_t len = 0;
000006  2600              MOVS     r6,#0
;;;18     	uint8_t recdata = 0;
000008  2000              MOVS     r0,#0
00000a  9000              STR      r0,[sp,#0]
;;;19     	uint8_t check_results = 0; 
00000c  2700              MOVS     r7,#0
;;;20     	
;;;21     	while(1 == comGetChar(NRF_PORT,&recdata) && i++ < 50)
00000e  e004              B        |L9.26|
                  |L9.16|
;;;22     	{ 
;;;23     		if(0x5a == recdata)
000010  f89d0000          LDRB     r0,[sp,#0]
000014  285a              CMP      r0,#0x5a
000016  d100              BNE      |L9.26|
;;;24     		{
;;;25     			break;
000018  e00a              B        |L9.48|
                  |L9.26|
00001a  4669              MOV      r1,sp                 ;21
00001c  2002              MOVS     r0,#2                 ;21
00001e  f7fffffe          BL       comGetChar
000022  2801              CMP      r0,#1                 ;21
000024  d104              BNE      |L9.48|
000026  4620              MOV      r0,r4                 ;21
000028  1c61              ADDS     r1,r4,#1              ;21
00002a  b2cc              UXTB     r4,r1                 ;21
00002c  2832              CMP      r0,#0x32              ;21
00002e  dbef              BLT      |L9.16|
                  |L9.48|
000030  bf00              NOP      
;;;26     		}
;;;27     	}
;;;28     	if(i == 50) 		  /*有限次查找*/    
000032  2c32              CMP      r4,#0x32
000034  d101              BNE      |L9.58|
;;;29     	{
;;;30     		return ERROR;   
000036  2000              MOVS     r0,#0
                  |L9.56|
;;;31     	}
;;;32     	
;;;33     	recebuf[0] = 0x5a;
;;;34     	for(i = 1; i < 4; i++)  /*接收数据头*/
;;;35     	{
;;;36     		if(0 == comGetChar(NRF_PORT,&recebuf[i]))
;;;37     		{
;;;38     			return ERROR; 
;;;39     		}
;;;40     	}
;;;41      
;;;42     	len = recebuf[2]*256 + recebuf[3];
;;;43     	if(len + 6 > MAX_BLE_RESPONSE_LEN)
;;;44     	{ 			
;;;45     		return ERROR;    		/*防止数组访问越界*/
;;;46     	}
;;;47     	
;;;48     	for(i = 0; i < len + 2; i++)  /*有效数据*/
;;;49     	{
;;;50     		if(0 == comGetChar(NRF_PORT,&recebuf[4+i]))
;;;51     		{
;;;52     			return ERROR; 
;;;53     		}
;;;54     	}
;;;55     
;;;56     	if(recebuf[len + 6 - 1] != 0xca)
;;;57     	{
;;;58     		return ERROR;  
;;;59     	}
;;;60     	
;;;61     	check_results = recebuf[1];                                  
;;;62     	for(i = 2; i < len + 4; i++)     	
;;;63     	{
;;;64     		check_results ^= recebuf[i];
;;;65     	}
;;;66     
;;;67       /*检查检验*/	
;;;68     	if(check_results == recebuf[4+len])  
;;;69     	{
;;;70     		return SUCCESS;
;;;71     	}
;;;72     
;;;73     	return ERROR;  	
;;;74     }
000038  bdf8              POP      {r3-r7,pc}
                  |L9.58|
00003a  205a              MOVS     r0,#0x5a              ;33
00003c  7028              STRB     r0,[r5,#0]            ;33
00003e  2401              MOVS     r4,#1                 ;34
000040  e008              B        |L9.84|
                  |L9.66|
000042  1929              ADDS     r1,r5,r4              ;36
000044  2002              MOVS     r0,#2                 ;36
000046  f7fffffe          BL       comGetChar
00004a  b908              CBNZ     r0,|L9.80|
00004c  2000              MOVS     r0,#0                 ;38
00004e  e7f3              B        |L9.56|
                  |L9.80|
000050  1c60              ADDS     r0,r4,#1              ;34
000052  b2c4              UXTB     r4,r0                 ;34
                  |L9.84|
000054  2c04              CMP      r4,#4                 ;34
000056  dbf4              BLT      |L9.66|
000058  78e9              LDRB     r1,[r5,#3]            ;42
00005a  78a8              LDRB     r0,[r5,#2]            ;42
00005c  eb012000          ADD      r0,r1,r0,LSL #8       ;42
000060  b2c6              UXTB     r6,r0                 ;42
000062  1db0              ADDS     r0,r6,#6              ;43
000064  2832              CMP      r0,#0x32              ;43
000066  dd01              BLE      |L9.108|
000068  2000              MOVS     r0,#0                 ;45
00006a  e7e5              B        |L9.56|
                  |L9.108|
00006c  2400              MOVS     r4,#0                 ;48
00006e  e009              B        |L9.132|
                  |L9.112|
000070  1d20              ADDS     r0,r4,#4              ;50
000072  1941              ADDS     r1,r0,r5              ;50
000074  2002              MOVS     r0,#2                 ;50
000076  f7fffffe          BL       comGetChar
00007a  b908              CBNZ     r0,|L9.128|
00007c  2000              MOVS     r0,#0                 ;52
00007e  e7db              B        |L9.56|
                  |L9.128|
000080  1c60              ADDS     r0,r4,#1              ;48
000082  b2c4              UXTB     r4,r0                 ;48
                  |L9.132|
000084  1cb0              ADDS     r0,r6,#2              ;48
000086  4284              CMP      r4,r0                 ;48
000088  dbf2              BLT      |L9.112|
00008a  1d70              ADDS     r0,r6,#5              ;56
00008c  5c28              LDRB     r0,[r5,r0]            ;56
00008e  28ca              CMP      r0,#0xca              ;56
000090  d001              BEQ      |L9.150|
000092  2000              MOVS     r0,#0                 ;58
000094  e7d0              B        |L9.56|
                  |L9.150|
000096  786f              LDRB     r7,[r5,#1]            ;61
000098  2402              MOVS     r4,#2                 ;62
00009a  e003              B        |L9.164|
                  |L9.156|
00009c  5d28              LDRB     r0,[r5,r4]            ;64
00009e  4047              EORS     r7,r7,r0              ;64
0000a0  1c60              ADDS     r0,r4,#1              ;62
0000a2  b2c4              UXTB     r4,r0                 ;62
                  |L9.164|
0000a4  1d30              ADDS     r0,r6,#4              ;62
0000a6  4284              CMP      r4,r0                 ;62
0000a8  dbf8              BLT      |L9.156|
0000aa  5c28              LDRB     r0,[r5,r0]            ;68
0000ac  42b8              CMP      r0,r7                 ;68
0000ae  d101              BNE      |L9.180|
0000b0  2001              MOVS     r0,#1                 ;70
0000b2  e7c1              B        |L9.56|
                  |L9.180|
0000b4  2000              MOVS     r0,#0                 ;73
0000b6  e7bf              B        |L9.56|
;;;75     
                          ENDP


                          AREA ||i.app_nrf_ResetStation||, CODE, READONLY, ALIGN=2

                  app_nrf_ResetStation PROC
;;;516    */
;;;517    void app_nrf_ResetStation(void)
000000  b51f              PUSH     {r0-r4,lr}
;;;518    {
;;;519    	uint8_t reset_ble_data[14] = {0x5a,0x45,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x4d,0xca};
000002  a307              ADR      r3,|L10.32|
000004  cb0f              LDM      r3,{r0-r3}
000006  e88d000f          STM      sp,{r0-r3}
;;;520    	
;;;521    	comSendBuf( NRF_PORT , reset_ble_data , sizeof(reset_ble_data) );       //复位蓝牙
00000a  220e              MOVS     r2,#0xe
00000c  4669              MOV      r1,sp
00000e  2002              MOVS     r0,#2
000010  f7fffffe          BL       comSendBuf
;;;522      comSendBuf( NRF_PORT , reset_ble_data , sizeof(reset_ble_data) );       //复位蓝牙
000014  220e              MOVS     r2,#0xe
000016  4669              MOV      r1,sp
000018  2002              MOVS     r0,#2
00001a  f7fffffe          BL       comSendBuf
;;;523    }
00001e  bd1f              POP      {r0-r4,pc}
;;;524    
                          ENDP

                  |L10.32|
000020  5a4500            DCB      "ZE",0
000023  0800              DCB      "\b",0
000025  00                DCB      0
000026  00                DCB      0
000027  00                DCB      0
000028  00                DCB      0
000029  00                DCB      0
00002a  00                DCB      0
00002b  00                DCB      0
00002c  4dca00            DCB      "M",202,0
00002f  00                DCB      0

                          AREA ||i.app_nrf_SetRssi||, CODE, READONLY, ALIGN=2

                  app_nrf_SetRssi PROC
;;;532    */
;;;533    void app_nrf_SetRssi(uint8_t rssi)
000000  b57f              PUSH     {r0-r6,lr}
;;;534    { 
000002  4605              MOV      r5,r0
;;;535    	uint8_t i = 0;
000004  2400              MOVS     r4,#0
;;;536    	uint8_t check_results = 0;
000006  2600              MOVS     r6,#0
;;;537    	uint8_t reqdata[14] = {0x5a,0x48,0x00,0x09,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x4c,0xca};
000008  a30f              ADR      r3,|L11.72|
00000a  cb0f              LDM      r3,{r0-r3}
00000c  e88d000f          STM      sp,{r0-r3}
;;;538    	
;;;539    	check_results = reqdata[1];   
000010  f89d6001          LDRB     r6,[sp,#1]
;;;540    	reqdata[11] = rssi; 
000014  f88d500b          STRB     r5,[sp,#0xb]
;;;541    	for(i = 2; i< (reqdata[3]+2+3-1); i++)  
000018  2402              MOVS     r4,#2
00001a  e004              B        |L11.38|
                  |L11.28|
;;;542    	{
;;;543    		check_results ^= reqdata[i];
00001c  f81d0004          LDRB     r0,[sp,r4]
000020  4046              EORS     r6,r6,r0
000022  1c60              ADDS     r0,r4,#1              ;541
000024  b2c4              UXTB     r4,r0                 ;541
                  |L11.38|
000026  f89d0003          LDRB     r0,[sp,#3]            ;541
00002a  1d00              ADDS     r0,r0,#4              ;541
00002c  42a0              CMP      r0,r4                 ;541
00002e  dcf5              BGT      |L11.28|
;;;544    	}
;;;545    	reqdata[i] = check_results;           
000030  f80d6004          STRB     r6,[sp,r4]
;;;546    	reqdata[i+1] = 0xca;             
000034  21ca              MOVS     r1,#0xca
000036  1c60              ADDS     r0,r4,#1
000038  f80d1000          STRB     r1,[sp,r0]
;;;547    	
;;;548    	comSendBuf( NRF_PORT , reqdata , sizeof(reqdata) );       //发送数据包
00003c  220e              MOVS     r2,#0xe
00003e  4669              MOV      r1,sp
000040  2002              MOVS     r0,#2
000042  f7fffffe          BL       comSendBuf
;;;549    }
000046  bd7f              POP      {r0-r6,pc}
;;;550    /*
                          ENDP

                  |L11.72|
000048  5a4800            DCB      "ZH",0
00004b  0900              DCB      "\t",0
00004d  00                DCB      0
00004e  00                DCB      0
00004f  00                DCB      0
000050  00                DCB      0
000051  00                DCB      0
000052  00                DCB      0
000053  00                DCB      0
000054  4cca00            DCB      "L",202,0
000057  00                DCB      0

                          AREA ||i.app_nrf_TimeTosec||, CODE, READONLY, ALIGN=2

                  app_nrf_TimeTosec PROC
;;;176    */
;;;177    static uint32_t app_nrf_TimeTosec(uint16_t syear,uint8_t smon,uint8_t sday,uint8_t hour,uint8_t min,uint8_t sec)
000000  e92d4ffe          PUSH     {r1-r11,lr}
;;;178    {
000004  4606              MOV      r6,r0
000006  460f              MOV      r7,r1
000008  4690              MOV      r8,r2
00000a  4699              MOV      r9,r3
00000c  e9ddab0c          LDRD     r10,r11,[sp,#0x30]
;;;179    	uint16_t t;
;;;180    	uint32_t seccount=0;
000010  2400              MOVS     r4,#0
;;;181    
;;;182    	uint8_t mon_table[12]={31,28,31,30,31,30,31,31,30,31,30,31};
000012  a225              ADR      r2,|L12.168|
000014  ca07              LDM      r2,{r0-r2}
000016  e88d0007          STM      sp,{r0-r2}
;;;183    
;;;184    	if(syear<1970||syear>2099)return 1;	   
00001a  f24070b2          MOV      r0,#0x7b2
00001e  4286              CMP      r6,r0
000020  db03              BLT      |L12.42|
000022  f6400033          MOV      r0,#0x833
000026  4286              CMP      r6,r0
000028  dd02              BLE      |L12.48|
                  |L12.42|
00002a  2001              MOVS     r0,#1
                  |L12.44|
;;;185    	for(t=1970;t<syear;t++)	//把所有年份的秒钟相加
;;;186    	{
;;;187    		if(1 == app_nrf_IsLeapYear(t))seccount+=31622400;//闰年的秒钟数
;;;188    		else seccount+=31536000;			  //平年的秒钟数
;;;189    	}
;;;190    	smon-=1;
;;;191    	for(t=0;t<smon;t++)	   //把前面月份的秒钟数相加
;;;192    	{
;;;193    		seccount+=(uint32_t)mon_table[t]*86400;//月份秒钟数相加
;;;194    		if(app_nrf_IsLeapYear(syear)&&t==1)seccount+=86400;//闰年2月份增加一天的秒钟数	   
;;;195    	}
;;;196    	
;;;197    	seccount+=(uint32_t)(sday-1)*86400;//把前面日期的秒钟数相加 
;;;198    	seccount+=(uint32_t)hour*3600;//小时秒钟数
;;;199      seccount+=(uint32_t)min*60;	 //分钟秒钟数
;;;200    	seccount+=sec;//最后的秒钟加上去
;;;201      
;;;202    	return seccount;	    
;;;203    }
00002c  e8bd8ffe          POP      {r1-r11,pc}
                  |L12.48|
000030  f24075b2          MOV      r5,#0x7b2             ;185
000034  e00b              B        |L12.78|
                  |L12.54|
000036  4628              MOV      r0,r5                 ;187
000038  f7fffffe          BL       app_nrf_IsLeapYear
00003c  2801              CMP      r0,#1                 ;187
00003e  d102              BNE      |L12.70|
000040  481c              LDR      r0,|L12.180|
000042  4404              ADD      r4,r4,r0              ;187
000044  e001              B        |L12.74|
                  |L12.70|
000046  481c              LDR      r0,|L12.184|
000048  4404              ADD      r4,r4,r0              ;188
                  |L12.74|
00004a  1c68              ADDS     r0,r5,#1              ;185
00004c  b285              UXTH     r5,r0                 ;185
                  |L12.78|
00004e  42b5              CMP      r5,r6                 ;185
000050  dbf1              BLT      |L12.54|
000052  1e78              SUBS     r0,r7,#1              ;190
000054  b2c7              UXTB     r7,r0                 ;190
000056  2500              MOVS     r5,#0                 ;191
000058  e010              B        |L12.124|
                  |L12.90|
00005a  f81d0005          LDRB     r0,[sp,r5]            ;193
00005e  f24021a3          MOV      r1,#0x2a3             ;193
000062  4348              MULS     r0,r1,r0              ;193
000064  eb0414c0          ADD      r4,r4,r0,LSL #7       ;193
000068  4630              MOV      r0,r6                 ;194
00006a  f7fffffe          BL       app_nrf_IsLeapYear
00006e  b118              CBZ      r0,|L12.120|
000070  2d01              CMP      r5,#1                 ;194
000072  d101              BNE      |L12.120|
000074  4811              LDR      r0,|L12.188|
000076  4404              ADD      r4,r4,r0              ;194
                  |L12.120|
000078  1c68              ADDS     r0,r5,#1              ;191
00007a  b285              UXTH     r5,r0                 ;191
                  |L12.124|
00007c  42bd              CMP      r5,r7                 ;191
00007e  dbec              BLT      |L12.90|
000080  f1a80001          SUB      r0,r8,#1              ;197
000084  f24021a3          MOV      r1,#0x2a3             ;197
000088  4348              MULS     r0,r1,r0              ;197
00008a  eb0414c0          ADD      r4,r4,r0,LSL #7       ;197
00008e  ebc91049          RSB      r0,r9,r9,LSL #5       ;198
000092  ebc02009          RSB      r0,r0,r9,LSL #8       ;198
000096  eb041400          ADD      r4,r4,r0,LSL #4       ;198
00009a  ebca100a          RSB      r0,r10,r10,LSL #4     ;199
00009e  eb040480          ADD      r4,r4,r0,LSL #2       ;199
0000a2  445c              ADD      r4,r4,r11             ;200
0000a4  4620              MOV      r0,r4                 ;202
0000a6  e7c1              B        |L12.44|
;;;204    
                          ENDP

                  |L12.168|
0000a8  1f1c1f1e          DCB      31,28,31,30,31,30,31,31,30,31,30,31
0000ac  1f1e1f1f
0000b0  1e1f1e1f
                  |L12.180|
                          DCD      0x01e28500
                  |L12.184|
                          DCD      0x01e13380
                  |L12.188|
                          DCD      0x00015180

                          AREA ||i.app_nrf_UpdataBle||, CODE, READONLY, ALIGN=2

                  app_nrf_UpdataBle PROC
;;;294     */
;;;295    void app_nrf_UpdataBle(uint8_t *station)
000000  b57f              PUSH     {r0-r6,lr}
;;;296    {
000002  4605              MOV      r5,r0
;;;297    	uint8_t i = 0;
000004  2400              MOVS     r4,#0
;;;298    	uint8_t check_results = 0;
000006  2600              MOVS     r6,#0
;;;299    	uint8_t Sendbuf[14]={0x5A,0x46,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0xCA};
000008  a316              ADR      r3,|L13.100|
00000a  cb0f              LDM      r3,{r0-r3}
00000c  e88d000f          STM      sp,{r0-r3}
;;;300    
;;;301    	Sendbuf[1] = UPDATA_STATION;     /*消息ID*/
000010  2046              MOVS     r0,#0x46
000012  f88d0001          STRB     r0,[sp,#1]
;;;302    	for(i = 0; i < 8; i++)
000016  bf00              NOP      
000018  e007              B        |L13.42|
                  |L13.26|
;;;303    	{
;;;304    		Sendbuf[4+i] = station[7-i];
00001a  f1c40007          RSB      r0,r4,#7
00001e  5c29              LDRB     r1,[r5,r0]
000020  1d20              ADDS     r0,r4,#4
000022  f80d1000          STRB     r1,[sp,r0]
000026  1c60              ADDS     r0,r4,#1              ;302
000028  b2c4              UXTB     r4,r0                 ;302
                  |L13.42|
00002a  2c08              CMP      r4,#8                 ;302
00002c  dbf5              BLT      |L13.26|
;;;305    	}
;;;306    	
;;;307    	check_results=Sendbuf[1];
00002e  f89d6001          LDRB     r6,[sp,#1]
;;;308    	for(i=2;i<(Sendbuf[3]+2+3-1);i++)   //CMD字段到数据字段进行校验
000032  2402              MOVS     r4,#2
000034  e004              B        |L13.64|
                  |L13.54|
;;;309    		check_results^=Sendbuf[i];
000036  f81d0004          LDRB     r0,[sp,r4]
00003a  4046              EORS     r6,r6,r0
00003c  1c60              ADDS     r0,r4,#1              ;308
00003e  b2c4              UXTB     r4,r0                 ;308
                  |L13.64|
000040  f89d0003          LDRB     r0,[sp,#3]            ;308
000044  1d00              ADDS     r0,r0,#4              ;308
000046  42a0              CMP      r0,r4                 ;308
000048  dcf5              BGT      |L13.54|
;;;310    	Sendbuf[i]=check_results;           //校验值
00004a  f80d6004          STRB     r6,[sp,r4]
;;;311    	Sendbuf[i+1]=0xca;                  //结束符
00004e  21ca              MOVS     r1,#0xca
000050  1c60              ADDS     r0,r4,#1
000052  f80d1000          STRB     r1,[sp,r0]
;;;312    	
;;;313    	#if 0
;;;314    	printf("send ble device:");
;;;315    	for(i = 0; i < 14; i++)
;;;316    	{
;;;317    		printf("%02x ",Sendbuf[i]);
;;;318    	}
;;;319    	printf("\r\n");
;;;320    	#endif
;;;321    	
;;;322    	comSendBuf( NRF_PORT , Sendbuf , 14 );       //发送数据包
000056  220e              MOVS     r2,#0xe
000058  4669              MOV      r1,sp
00005a  2002              MOVS     r0,#2
00005c  f7fffffe          BL       comSendBuf
;;;323    }
000060  bd7f              POP      {r0-r6,pc}
;;;324    
                          ENDP

000062  0000              DCW      0x0000
                  |L13.100|
000064  5a4600            DCB      "ZF",0
000067  0800              DCB      "\b",0
000069  00                DCB      0
00006a  00                DCB      0
00006b  00                DCB      0
00006c  00                DCB      0
00006d  00                DCB      0
00006e  00                DCB      0
00006f  00                DCB      0
000070  49ca00            DCB      "I",202,0
000073  00                DCB      0

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  Bracelet
                          %        7200

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  aucCRCHi
000000  00c18140          DCB      0x00,0xc1,0x81,0x40
000004  01c08041          DCB      0x01,0xc0,0x80,0x41
000008  01c08041          DCB      0x01,0xc0,0x80,0x41
00000c  00c18140          DCB      0x00,0xc1,0x81,0x40
000010  01c08041          DCB      0x01,0xc0,0x80,0x41
000014  00c18140          DCB      0x00,0xc1,0x81,0x40
000018  00c18140          DCB      0x00,0xc1,0x81,0x40
00001c  01c08041          DCB      0x01,0xc0,0x80,0x41
000020  01c08041          DCB      0x01,0xc0,0x80,0x41
000024  00c18140          DCB      0x00,0xc1,0x81,0x40
000028  00c18140          DCB      0x00,0xc1,0x81,0x40
00002c  01c08041          DCB      0x01,0xc0,0x80,0x41
000030  00c18140          DCB      0x00,0xc1,0x81,0x40
000034  01c08041          DCB      0x01,0xc0,0x80,0x41
000038  01c08041          DCB      0x01,0xc0,0x80,0x41
00003c  00c18140          DCB      0x00,0xc1,0x81,0x40
000040  01c08041          DCB      0x01,0xc0,0x80,0x41
000044  00c18140          DCB      0x00,0xc1,0x81,0x40
000048  00c18140          DCB      0x00,0xc1,0x81,0x40
00004c  01c08041          DCB      0x01,0xc0,0x80,0x41
000050  00c18140          DCB      0x00,0xc1,0x81,0x40
000054  01c08041          DCB      0x01,0xc0,0x80,0x41
000058  01c08041          DCB      0x01,0xc0,0x80,0x41
00005c  00c18140          DCB      0x00,0xc1,0x81,0x40
000060  00c18140          DCB      0x00,0xc1,0x81,0x40
000064  01c08041          DCB      0x01,0xc0,0x80,0x41
000068  01c08041          DCB      0x01,0xc0,0x80,0x41
00006c  00c18140          DCB      0x00,0xc1,0x81,0x40
000070  01c08041          DCB      0x01,0xc0,0x80,0x41
000074  00c18140          DCB      0x00,0xc1,0x81,0x40
000078  00c18140          DCB      0x00,0xc1,0x81,0x40
00007c  01c08041          DCB      0x01,0xc0,0x80,0x41
000080  01c08041          DCB      0x01,0xc0,0x80,0x41
000084  00c18140          DCB      0x00,0xc1,0x81,0x40
000088  00c18140          DCB      0x00,0xc1,0x81,0x40
00008c  01c08041          DCB      0x01,0xc0,0x80,0x41
000090  00c18140          DCB      0x00,0xc1,0x81,0x40
000094  01c08041          DCB      0x01,0xc0,0x80,0x41
000098  01c08041          DCB      0x01,0xc0,0x80,0x41
00009c  00c18140          DCB      0x00,0xc1,0x81,0x40
0000a0  00c18140          DCB      0x00,0xc1,0x81,0x40
0000a4  01c08041          DCB      0x01,0xc0,0x80,0x41
0000a8  01c08041          DCB      0x01,0xc0,0x80,0x41
0000ac  00c18140          DCB      0x00,0xc1,0x81,0x40
0000b0  01c08041          DCB      0x01,0xc0,0x80,0x41
0000b4  00c18140          DCB      0x00,0xc1,0x81,0x40
0000b8  00c18140          DCB      0x00,0xc1,0x81,0x40
0000bc  01c08041          DCB      0x01,0xc0,0x80,0x41
0000c0  00c18140          DCB      0x00,0xc1,0x81,0x40
0000c4  01c08041          DCB      0x01,0xc0,0x80,0x41
0000c8  01c08041          DCB      0x01,0xc0,0x80,0x41
0000cc  00c18140          DCB      0x00,0xc1,0x81,0x40
0000d0  01c08041          DCB      0x01,0xc0,0x80,0x41
0000d4  00c18140          DCB      0x00,0xc1,0x81,0x40
0000d8  00c18140          DCB      0x00,0xc1,0x81,0x40
0000dc  01c08041          DCB      0x01,0xc0,0x80,0x41
0000e0  01c08041          DCB      0x01,0xc0,0x80,0x41
0000e4  00c18140          DCB      0x00,0xc1,0x81,0x40
0000e8  00c18140          DCB      0x00,0xc1,0x81,0x40
0000ec  01c08041          DCB      0x01,0xc0,0x80,0x41
0000f0  00c18140          DCB      0x00,0xc1,0x81,0x40
0000f4  01c08041          DCB      0x01,0xc0,0x80,0x41
0000f8  01c08041          DCB      0x01,0xc0,0x80,0x41
0000fc  00c18140          DCB      0x00,0xc1,0x81,0x40
                  aucCRCLo
000100  00c0c101          DCB      0x00,0xc0,0xc1,0x01
000104  c30302c2          DCB      0xc3,0x03,0x02,0xc2
000108  c60607c7          DCB      0xc6,0x06,0x07,0xc7
00010c  05c5c404          DCB      0x05,0xc5,0xc4,0x04
000110  cc0c0dcd          DCB      0xcc,0x0c,0x0d,0xcd
000114  0fcfce0e          DCB      0x0f,0xcf,0xce,0x0e
000118  0acacb0b          DCB      0x0a,0xca,0xcb,0x0b
00011c  c90908c8          DCB      0xc9,0x09,0x08,0xc8
000120  d81819d9          DCB      0xd8,0x18,0x19,0xd9
000124  1bdbda1a          DCB      0x1b,0xdb,0xda,0x1a
000128  1ededf1f          DCB      0x1e,0xde,0xdf,0x1f
00012c  dd1d1cdc          DCB      0xdd,0x1d,0x1c,0xdc
000130  14d4d515          DCB      0x14,0xd4,0xd5,0x15
000134  d71716d6          DCB      0xd7,0x17,0x16,0xd6
000138  d21213d3          DCB      0xd2,0x12,0x13,0xd3
00013c  11d1d010          DCB      0x11,0xd1,0xd0,0x10
000140  f03031f1          DCB      0xf0,0x30,0x31,0xf1
000144  33f3f232          DCB      0x33,0xf3,0xf2,0x32
000148  36f6f737          DCB      0x36,0xf6,0xf7,0x37
00014c  f53534f4          DCB      0xf5,0x35,0x34,0xf4
000150  3cfcfd3d          DCB      0x3c,0xfc,0xfd,0x3d
000154  ff3f3efe          DCB      0xff,0x3f,0x3e,0xfe
000158  fa3a3bfb          DCB      0xfa,0x3a,0x3b,0xfb
00015c  39f9f838          DCB      0x39,0xf9,0xf8,0x38
000160  28e8e929          DCB      0x28,0xe8,0xe9,0x29
000164  eb2b2aea          DCB      0xeb,0x2b,0x2a,0xea
000168  ee2e2fef          DCB      0xee,0x2e,0x2f,0xef
00016c  2dedec2c          DCB      0x2d,0xed,0xec,0x2c
000170  e42425e5          DCB      0xe4,0x24,0x25,0xe5
000174  27e7e626          DCB      0x27,0xe7,0xe6,0x26
000178  22e2e323          DCB      0x22,0xe2,0xe3,0x23
00017c  e12120e0          DCB      0xe1,0x21,0x20,0xe0
000180  a06061a1          DCB      0xa0,0x60,0x61,0xa1
000184  63a3a262          DCB      0x63,0xa3,0xa2,0x62
000188  66a6a767          DCB      0x66,0xa6,0xa7,0x67
00018c  a56564a4          DCB      0xa5,0x65,0x64,0xa4
000190  6cacad6d          DCB      0x6c,0xac,0xad,0x6d
000194  af6f6eae          DCB      0xaf,0x6f,0x6e,0xae
000198  aa6a6bab          DCB      0xaa,0x6a,0x6b,0xab
00019c  69a9a868          DCB      0x69,0xa9,0xa8,0x68
0001a0  78b8b979          DCB      0x78,0xb8,0xb9,0x79
0001a4  bb7b7aba          DCB      0xbb,0x7b,0x7a,0xba
0001a8  be7e7fbf          DCB      0xbe,0x7e,0x7f,0xbf
0001ac  7dbdbc7c          DCB      0x7d,0xbd,0xbc,0x7c
0001b0  b47475b5          DCB      0xb4,0x74,0x75,0xb5
0001b4  77b7b676          DCB      0x77,0xb7,0xb6,0x76
0001b8  72b2b373          DCB      0x72,0xb2,0xb3,0x73
0001bc  b17170b0          DCB      0xb1,0x71,0x70,0xb0
0001c0  50909151          DCB      0x50,0x90,0x91,0x51
0001c4  93535292          DCB      0x93,0x53,0x52,0x92
0001c8  96565797          DCB      0x96,0x56,0x57,0x97
0001cc  55959454          DCB      0x55,0x95,0x94,0x54
0001d0  9c5c5d9d          DCB      0x9c,0x5c,0x5d,0x9d
0001d4  5f9f9e5e          DCB      0x5f,0x9f,0x9e,0x5e
0001d8  5a9a9b5b          DCB      0x5a,0x9a,0x9b,0x5b
0001dc  99595898          DCB      0x99,0x59,0x58,0x98
0001e0  88484989          DCB      0x88,0x48,0x49,0x89
0001e4  4b8b8a4a          DCB      0x4b,0x8b,0x8a,0x4a
0001e8  4e8e8f4f          DCB      0x4e,0x8e,0x8f,0x4f
0001ec  8d4d4c8c          DCB      0x8d,0x4d,0x4c,0x8c
0001f0  44848545          DCB      0x44,0x84,0x85,0x45
0001f4  87474686          DCB      0x87,0x47,0x46,0x86
0001f8  82424383          DCB      0x82,0x42,0x43,0x83
0001fc  41818040          DCB      0x41,0x81,0x80,0x40
000200  5a43000e          DCB      0x5a,0x43,0x00,0x0e
000204  00000000          DCB      0x00,0x00,0x00,0x00
000208  00000000          DCB      0x00,0x00,0x00,0x00
00020c  00002005          DCB      0x00,0x00,0x20,0x05

                          AREA ||.data||, DATA, ALIGN=2

                  xHandleTaskUserIF
                          DCD      0x00000000
                  xHandleCheckNet
                          DCD      0x00000000
                  xHandleTaskWEB
                          DCD      0x00000000
                  xHandleTaskMsgPro
                          DCD      0x00000000
                  xHandleTaskStart
                          DCD      0x00000000
                  xSemaphore
                          DCD      0x00000000
                  xMutex
                          DCD      0x00000000
                  xPingTimers
                          DCD      0x00000000
                  xNoNetTimers
                          DCD      0x00000000
                  xCreatedEventGroup
                          DCD      0x00000000
                  xUpdataEventGroup
                          DCD      0x00000000
                  xQueue1
                          DCD      0x00000000
                  BraceletNumber
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\..\\User\\app\\src\\app_nrf52832.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___14_app_nrf52832_c_e2766b90____REV16|
#line 114 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___14_app_nrf52832_c_e2766b90____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___14_app_nrf52832_c_e2766b90____REVSH|
#line 128
|__asm___14_app_nrf52832_c_e2766b90____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
