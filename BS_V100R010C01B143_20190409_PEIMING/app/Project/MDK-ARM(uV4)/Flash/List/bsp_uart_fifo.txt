; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\flash\obj\bsp_uart_fifo.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\bsp_uart_fifo.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931,870 -I..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\User\bsp -I..\..\User\bsp\inc -I..\..\User -I..\..\Libraries\CMSIS\Include -I..\..\FreeRTOS\include -I..\..\FreeRTOS\portable\RVDS\ARM_CM3 -I..\..\MQTT -I..\..\Ethernet -I..\..\Ethernet\W5500 -I..\..\Internet\DHCP -I..\..\Internet\DNS -I..\..\User\app\src -I..\..\User\app\inc -I..\..\Internet\NTP -I..\..\Internet\HTTP -I.\RTE\_Flash -ID:\MDK5\ARM\CMSIS\5.0.1\CMSIS\Include -ID:\MDK5\Keil\STM32F1xx_DFP\2.0.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=523 -D_RTE_ -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=.\flash\obj\bsp_uart_fifo.crf ..\..\User\bsp\src\bsp_uart_fifo.c]
                          THUMB

                          AREA ||i.ComToUart||, CODE, READONLY, ALIGN=2

                  ComToUart PROC
;;;95     */
;;;96     UART_T *ComToUart(COM_PORT_E _ucPort)
000000  4601              MOV      r1,r0
;;;97     {
;;;98     	if (_ucPort == COM1)
000002  b909              CBNZ     r1,|L1.8|
;;;99     	{
;;;100    		#if UART1_FIFO_EN == 1
;;;101    			return &g_tUart1;
000004  4809              LDR      r0,|L1.44|
                  |L1.6|
;;;102    		#else
;;;103    			return 0;
;;;104    		#endif
;;;105    	}
;;;106    	else if (_ucPort == COM2)
;;;107    	{
;;;108    		#if UART2_FIFO_EN == 1
;;;109    			return &g_tUart2;
;;;110    		#else
;;;111    			return 0;
;;;112    		#endif
;;;113    	}
;;;114    	else if (_ucPort == COM3)
;;;115    	{
;;;116    		#if UART3_FIFO_EN == 1
;;;117    			return &g_tUart3;
;;;118    		#else
;;;119    			return 0;
;;;120    		#endif
;;;121    	}
;;;122    	else if (_ucPort == COM4)
;;;123    	{
;;;124    		#if UART4_FIFO_EN == 1
;;;125    			return &g_tUart4;
;;;126    		#else
;;;127    			return 0;
;;;128    		#endif
;;;129    	}
;;;130    	else if (_ucPort == COM5)
;;;131    	{
;;;132    		#if UART5_FIFO_EN == 1
;;;133    			return &g_tUart5;
;;;134    		#else
;;;135    			return 0;
;;;136    		#endif
;;;137    	}
;;;138    	else
;;;139    	{
;;;140    		/* 不做任何处理 */
;;;141    		return 0;
;;;142    	}
;;;143    }
000006  4770              BX       lr
                  |L1.8|
000008  2901              CMP      r1,#1                 ;106
00000a  d101              BNE      |L1.16|
00000c  2000              MOVS     r0,#0                 ;111
00000e  e7fa              B        |L1.6|
                  |L1.16|
000010  2902              CMP      r1,#2                 ;114
000012  d101              BNE      |L1.24|
000014  4806              LDR      r0,|L1.48|
000016  e7f6              B        |L1.6|
                  |L1.24|
000018  2903              CMP      r1,#3                 ;122
00001a  d101              BNE      |L1.32|
00001c  2000              MOVS     r0,#0                 ;127
00001e  e7f2              B        |L1.6|
                  |L1.32|
000020  2904              CMP      r1,#4                 ;130
000022  d101              BNE      |L1.40|
000024  2000              MOVS     r0,#0                 ;135
000026  e7ee              B        |L1.6|
                  |L1.40|
000028  2000              MOVS     r0,#0                 ;141
00002a  e7ec              B        |L1.6|
;;;144    
                          ENDP

                  |L1.44|
                          DCD      g_tUart1
                  |L1.48|
                          DCD      g_tUart3

                          AREA ||i.ConfigUartNVIC||, CODE, READONLY, ALIGN=1

                  ConfigUartNVIC PROC
;;;780    */
;;;781    static void ConfigUartNVIC(void)
000000  b508              PUSH     {r3,lr}
;;;782    {
;;;783    	NVIC_InitTypeDef NVIC_InitStructure;
;;;784    
;;;785    	/* Configure the NVIC Preemption Priority Bits */
;;;786    	/*	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_0);  --- 在 bsp.c 中 bsp_Init() 中配置中断优先级组 */
;;;787    
;;;788    #if UART1_FIFO_EN == 1
;;;789    	/* 使能串口1中断 */
;;;790    	NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQn;
000002  2025              MOVS     r0,#0x25
000004  f88d0000          STRB     r0,[sp,#0]
;;;791    	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 2;
000008  2002              MOVS     r0,#2
00000a  f88d0001          STRB     r0,[sp,#1]
;;;792    	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
00000e  2000              MOVS     r0,#0
000010  f88d0002          STRB     r0,[sp,#2]
;;;793    	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
000014  2001              MOVS     r0,#1
000016  f88d0003          STRB     r0,[sp,#3]
;;;794    	NVIC_Init(&NVIC_InitStructure);
00001a  4668              MOV      r0,sp
00001c  f7fffffe          BL       NVIC_Init
;;;795    #endif
;;;796    
;;;797    #if UART2_FIFO_EN == 1
;;;798    	/* 使能串口2中断 */
;;;799    	NVIC_InitStructure.NVIC_IRQChannel = USART2_IRQn;
;;;800    	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 3;
;;;801    	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
;;;802    	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
;;;803    	NVIC_Init(&NVIC_InitStructure);
;;;804    #endif
;;;805    
;;;806    #if UART3_FIFO_EN == 1
;;;807    	/* 使能串口3中断t */
;;;808    	NVIC_InitStructure.NVIC_IRQChannel = USART3_IRQn;
000020  2027              MOVS     r0,#0x27
000022  f88d0000          STRB     r0,[sp,#0]
;;;809    	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 4;
000026  2004              MOVS     r0,#4
000028  f88d0001          STRB     r0,[sp,#1]
;;;810    	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
00002c  2000              MOVS     r0,#0
00002e  f88d0002          STRB     r0,[sp,#2]
;;;811    	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
000032  2001              MOVS     r0,#1
000034  f88d0003          STRB     r0,[sp,#3]
;;;812    	NVIC_Init(&NVIC_InitStructure);
000038  4668              MOV      r0,sp
00003a  f7fffffe          BL       NVIC_Init
;;;813    #endif
;;;814    
;;;815    #if UART4_FIFO_EN == 1
;;;816    	/* 使能串口4中断t */
;;;817    	NVIC_InitStructure.NVIC_IRQChannel = UART4_IRQn;
;;;818    	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 5;
;;;819    	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
;;;820    	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
;;;821    	NVIC_Init(&NVIC_InitStructure);
;;;822    #endif
;;;823    
;;;824    #if UART5_FIFO_EN == 1
;;;825    	/* 使能串口5中断t */
;;;826    	NVIC_InitStructure.NVIC_IRQChannel = UART5_IRQn;
;;;827    	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 6;
;;;828    	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
;;;829    	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
;;;830    	NVIC_Init(&NVIC_InitStructure);
;;;831    #endif
;;;832    
;;;833    #if UART6_FIFO_EN == 1
;;;834    	/* 使能串口6中断t */
;;;835    	NVIC_InitStructure.NVIC_IRQChannel = USART6_IRQn;
;;;836    	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 7;
;;;837    	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
;;;838    	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
;;;839    	NVIC_Init(&NVIC_InitStructure);
;;;840    #endif
;;;841    }
00003e  bd08              POP      {r3,pc}
;;;842    
                          ENDP


                          AREA ||i.InitHardUart||, CODE, READONLY, ALIGN=2

                  InitHardUart PROC
;;;540    */
;;;541    static void InitHardUart(void)
000000  b500              PUSH     {lr}
;;;542    {
000002  b085              SUB      sp,sp,#0x14
;;;543    	GPIO_InitTypeDef GPIO_InitStructure;
;;;544    	USART_InitTypeDef USART_InitStructure;
;;;545    
;;;546    #if UART1_FIFO_EN == 1		/* 串口1 TX = PA9   RX = PA10 或 TX = PB6   RX = PB7*/
;;;547    
;;;548    	/* 第1步：打开GPIO和USART部件的时钟 */
;;;549    	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA | RCC_APB2Periph_AFIO, ENABLE);
000004  2101              MOVS     r1,#1
000006  2005              MOVS     r0,#5
000008  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;550    	RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
00000c  2101              MOVS     r1,#1
00000e  0388              LSLS     r0,r1,#14
000010  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;551    
;;;552    	/* 第2步：将USART Tx的GPIO配置为推挽复用模式 */
;;;553    	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;
000014  f44f7000          MOV      r0,#0x200
000018  f8ad0010          STRH     r0,[sp,#0x10]
;;;554    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
00001c  2018              MOVS     r0,#0x18
00001e  f88d0013          STRB     r0,[sp,#0x13]
;;;555    	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
000022  2003              MOVS     r0,#3
000024  f88d0012          STRB     r0,[sp,#0x12]
;;;556    	GPIO_Init(GPIOA, &GPIO_InitStructure);
000028  a904              ADD      r1,sp,#0x10
00002a  4841              LDR      r0,|L3.304|
00002c  f7fffffe          BL       GPIO_Init
;;;557    
;;;558    	/* 第3步：将USART Rx的GPIO配置为浮空输入模式
;;;559    		由于CPU复位后，GPIO缺省都是浮空输入模式，因此下面这个步骤不是必须的
;;;560    		但是，我还是建议加上便于阅读，并且防止其它地方修改了这个口线的设置参数
;;;561    	*/
;;;562    	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;
000030  f44f6080          MOV      r0,#0x400
000034  f8ad0010          STRH     r0,[sp,#0x10]
;;;563    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
000038  2004              MOVS     r0,#4
00003a  f88d0013          STRB     r0,[sp,#0x13]
;;;564    	GPIO_Init(GPIOA, &GPIO_InitStructure);
00003e  a904              ADD      r1,sp,#0x10
000040  483b              LDR      r0,|L3.304|
000042  f7fffffe          BL       GPIO_Init
;;;565    	
;;;566    	/* 第4步： 配置串口硬件参数 */
;;;567    	USART_InitStructure.USART_BaudRate = UART1_BAUD;	/* 波特率 */
000046  f44f30e1          MOV      r0,#0x1c200
00004a  9000              STR      r0,[sp,#0]
;;;568    	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
00004c  2000              MOVS     r0,#0
00004e  f8ad0004          STRH     r0,[sp,#4]
;;;569    	USART_InitStructure.USART_StopBits = USART_StopBits_1;
000052  f8ad0006          STRH     r0,[sp,#6]
;;;570    	USART_InitStructure.USART_Parity = USART_Parity_No ;
000056  f8ad0008          STRH     r0,[sp,#8]
;;;571    	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
00005a  f8ad000c          STRH     r0,[sp,#0xc]
;;;572    	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
00005e  200c              MOVS     r0,#0xc
000060  f8ad000a          STRH     r0,[sp,#0xa]
;;;573    	USART_Init(USART1, &USART_InitStructure);
000064  4669              MOV      r1,sp
000066  4833              LDR      r0,|L3.308|
000068  f7fffffe          BL       USART_Init
;;;574    
;;;575    	USART_ITConfig(USART1, USART_IT_RXNE, ENABLE);	/* 使能接收中断 */
00006c  2201              MOVS     r2,#1
00006e  f2405125          MOV      r1,#0x525
000072  4830              LDR      r0,|L3.308|
000074  f7fffffe          BL       USART_ITConfig
;;;576    	/*
;;;577    		USART_ITConfig(USART1, USART_IT_TXE, ENABLE);
;;;578    		注意: 不要在此处打开发送中断
;;;579    		发送中断使能在SendUart()函数打开
;;;580    	*/
;;;581    	USART_Cmd(USART1, ENABLE);		/* 使能串口 */
000078  2101              MOVS     r1,#1
00007a  482e              LDR      r0,|L3.308|
00007c  f7fffffe          BL       USART_Cmd
;;;582    
;;;583    	/* CPU的小缺陷：串口配置好，如果直接Send，则第1个字节发送不出去
;;;584    		如下语句解决第1个字节无法正确发送出去的问题 */
;;;585    	USART_ClearFlag(USART1, USART_FLAG_TC);     /* 清发送完成标志，Transmission Complete flag */
000080  2140              MOVS     r1,#0x40
000082  482c              LDR      r0,|L3.308|
000084  f7fffffe          BL       USART_ClearFlag
;;;586    #endif
;;;587    
;;;588    #if UART2_FIFO_EN == 1		/* 串口2 TX = PA2， RX = PA3  */
;;;589    	/* 第1步：打开GPIO和USART部件的时钟 */
;;;590    	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA | RCC_APB2Periph_AFIO, ENABLE);
;;;591    	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
;;;592    
;;;593    	/* 第2步：将USART Tx的GPIO配置为推挽复用模式 */
;;;594    	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
;;;595    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
;;;596    	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
;;;597    	GPIO_Init(GPIOA, &GPIO_InitStructure);
;;;598    
;;;599    	/* 第3步：将USART Rx的GPIO配置为浮空输入模式
;;;600    		由于CPU复位后，GPIO缺省都是浮空输入模式，因此下面这个步骤不是必须的
;;;601    		但是，我还是建议加上便于阅读，并且防止其它地方修改了这个口线的设置参数
;;;602    	*/
;;;603    	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3;
;;;604    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
;;;605    	GPIO_Init(GPIOA, &GPIO_InitStructure);
;;;606    	/*  第3步已经做了，因此这步可以不做
;;;607    		GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
;;;608    	*/
;;;609    	GPIO_Init(GPIOA, &GPIO_InitStructure);
;;;610    
;;;611    	/* 第4步： 配置串口硬件参数 */
;;;612    	USART_InitStructure.USART_BaudRate = UART2_BAUD;	/* 波特率 */
;;;613    	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
;;;614    	USART_InitStructure.USART_StopBits = USART_StopBits_1;
;;;615    	USART_InitStructure.USART_Parity = USART_Parity_No ;
;;;616    	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
;;;617    	USART_InitStructure.USART_Mode = USART_Mode_Tx | USART_Mode_Rx;		/* 仅选择接收模式 */
;;;618    	USART_Init(USART2, &USART_InitStructure);
;;;619    
;;;620    	USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);	/* 使能接收中断 */
;;;621    	/*
;;;622    		USART_ITConfig(USART1, USART_IT_TXE, ENABLE);
;;;623    		注意: 不要在此处打开发送中断
;;;624    		发送中断使能在SendUart()函数打开
;;;625    	*/
;;;626    	USART_Cmd(USART2, ENABLE);		/* 使能串口 */
;;;627    
;;;628    	/* CPU的小缺陷：串口配置好，如果直接Send，则第1个字节发送不出去
;;;629    		如下语句解决第1个字节无法正确发送出去的问题 */
;;;630    	USART_ClearFlag(USART2, USART_FLAG_TC);     /* 清发送完成标志，Transmission Complete flag */
;;;631    #endif
;;;632    
;;;633    #if UART3_FIFO_EN == 1			/* 串口3 TX = PB10   RX = PB11 */
;;;634    
;;;635    	/* 配置 PB2为推挽输出，用于切换 RS485芯片的收发状态 */
;;;636    	{
;;;637    		RCC_APB2PeriphClockCmd(RCC_RS485_TXEN, ENABLE);
000088  2101              MOVS     r1,#1
00008a  2008              MOVS     r0,#8
00008c  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;638    
;;;639    		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
000090  2010              MOVS     r0,#0x10
000092  f88d0013          STRB     r0,[sp,#0x13]
;;;640    		GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
000096  2003              MOVS     r0,#3
000098  f88d0012          STRB     r0,[sp,#0x12]
;;;641    		GPIO_InitStructure.GPIO_Pin = PIN_RS485_TXEN;
00009c  2004              MOVS     r0,#4
00009e  f8ad0010          STRH     r0,[sp,#0x10]
;;;642    		GPIO_Init(PORT_RS485_TXEN, &GPIO_InitStructure);
0000a2  a904              ADD      r1,sp,#0x10
0000a4  4824              LDR      r0,|L3.312|
0000a6  f7fffffe          BL       GPIO_Init
;;;643    	}
;;;644    
;;;645    	/* 第1步： 开启GPIO和UART时钟 */
;;;646    	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB | RCC_APB2Periph_AFIO, ENABLE);
0000aa  2101              MOVS     r1,#1
0000ac  2009              MOVS     r0,#9
0000ae  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;647    	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART3, ENABLE);
0000b2  2101              MOVS     r1,#1
0000b4  0488              LSLS     r0,r1,#18
0000b6  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;648    
;;;649    	/* 第2步：将USART Tx的GPIO配置为推挽复用模式 */
;;;650    	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;
0000ba  f44f6080          MOV      r0,#0x400
0000be  f8ad0010          STRH     r0,[sp,#0x10]
;;;651    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
0000c2  2018              MOVS     r0,#0x18
0000c4  f88d0013          STRB     r0,[sp,#0x13]
;;;652    	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
0000c8  2003              MOVS     r0,#3
0000ca  f88d0012          STRB     r0,[sp,#0x12]
;;;653    	GPIO_Init(GPIOB, &GPIO_InitStructure);
0000ce  a904              ADD      r1,sp,#0x10
0000d0  4819              LDR      r0,|L3.312|
0000d2  f7fffffe          BL       GPIO_Init
;;;654    
;;;655    	/* 第3步：将USART Rx的GPIO配置为浮空输入模式
;;;656    		由于CPU复位后，GPIO缺省都是浮空输入模式，因此下面这个步骤不是必须的
;;;657    		但是，我还是建议加上便于阅读，并且防止其它地方修改了这个口线的设置参数
;;;658    	*/
;;;659    	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_11;
0000d6  f44f6000          MOV      r0,#0x800
0000da  f8ad0010          STRH     r0,[sp,#0x10]
;;;660    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
0000de  2004              MOVS     r0,#4
0000e0  f88d0013          STRB     r0,[sp,#0x13]
;;;661    	GPIO_Init(GPIOB, &GPIO_InitStructure);
0000e4  a904              ADD      r1,sp,#0x10
0000e6  4814              LDR      r0,|L3.312|
0000e8  f7fffffe          BL       GPIO_Init
;;;662    	/*  第3步已经做了，因此这步可以不做
;;;663    		GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
;;;664    	*/
;;;665    	GPIO_Init(GPIOB, &GPIO_InitStructure);
0000ec  a904              ADD      r1,sp,#0x10
0000ee  4812              LDR      r0,|L3.312|
0000f0  f7fffffe          BL       GPIO_Init
;;;666    
;;;667    	/* 第4步： 配置串口硬件参数 */
;;;668    	USART_InitStructure.USART_BaudRate = UART3_BAUD;	/* 波特率 */
0000f4  f44f30e1          MOV      r0,#0x1c200
0000f8  9000              STR      r0,[sp,#0]
;;;669    	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
0000fa  2000              MOVS     r0,#0
0000fc  f8ad0004          STRH     r0,[sp,#4]
;;;670    	USART_InitStructure.USART_StopBits = USART_StopBits_1;
000100  f8ad0006          STRH     r0,[sp,#6]
;;;671    	USART_InitStructure.USART_Parity = USART_Parity_No ;
000104  f8ad0008          STRH     r0,[sp,#8]
;;;672    	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
000108  f8ad000c          STRH     r0,[sp,#0xc]
;;;673    	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
00010c  200c              MOVS     r0,#0xc
00010e  f8ad000a          STRH     r0,[sp,#0xa]
;;;674    	USART_Init(USART3, &USART_InitStructure);
000112  4669              MOV      r1,sp
000114  4809              LDR      r0,|L3.316|
000116  f7fffffe          BL       USART_Init
;;;675    
;;;676    //	USART_ITConfig(USART3, USART_IT_RXNE, ENABLE);	/* 使能接收中断 */
;;;677    	/*
;;;678    		USART_ITConfig(USART1, USART_IT_TXE, ENABLE);
;;;679    		注意: 不要在此处打开发送中断
;;;680    		发送中断使能在SendUart()函数打开
;;;681    	*/
;;;682    	USART_Cmd(USART3, ENABLE);		/* 使能串口 */
00011a  2101              MOVS     r1,#1
00011c  4807              LDR      r0,|L3.316|
00011e  f7fffffe          BL       USART_Cmd
;;;683    
;;;684    	/* CPU的小缺陷：串口配置好，如果直接Send，则第1个字节发送不出去
;;;685    		如下语句解决第1个字节无法正确发送出去的问题 */
;;;686    	USART_ClearFlag(USART3, USART_FLAG_TC);     /* 清发送完成标志，Transmission Complete flag */
000122  2140              MOVS     r1,#0x40
000124  4805              LDR      r0,|L3.316|
000126  f7fffffe          BL       USART_ClearFlag
;;;687    #endif
;;;688    
;;;689    #if UART4_FIFO_EN == 1			/* 串口4 TX = PC10   RX = PC11 */
;;;690    	/* 第1步： 开启GPIO和UART时钟 */
;;;691    	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC | RCC_APB2Periph_AFIO, ENABLE);
;;;692    	RCC_APB1PeriphClockCmd(RCC_APB1Periph_UART4, ENABLE);
;;;693    
;;;694    	/* 第2步：将USART Tx的GPIO配置为推挽复用模式 */
;;;695    	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;
;;;696    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
;;;697    	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
;;;698    	GPIO_Init(GPIOC, &GPIO_InitStructure);
;;;699    
;;;700    	/* 第3步：将USART Rx的GPIO配置为浮空输入模式
;;;701    		由于CPU复位后，GPIO缺省都是浮空输入模式，因此下面这个步骤不是必须的
;;;702    		但是，我还是建议加上便于阅读，并且防止其它地方修改了这个口线的设置参数
;;;703    	*/
;;;704    	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_11;
;;;705    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
;;;706    	GPIO_Init(GPIOC, &GPIO_InitStructure);
;;;707    
;;;708    	/* 第4步： 配置串口硬件参数 */
;;;709    	USART_InitStructure.USART_BaudRate = UART4_BAUD;	/* 波特率 */
;;;710    	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
;;;711    	USART_InitStructure.USART_StopBits = USART_StopBits_1;
;;;712    	USART_InitStructure.USART_Parity = USART_Parity_No ;
;;;713    	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
;;;714    	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
;;;715    	USART_Init(UART4, &USART_InitStructure);
;;;716    
;;;717    	USART_ITConfig(UART4, USART_IT_RXNE, ENABLE);	/* 使能接收中断 */
;;;718    	/*
;;;719    		USART_ITConfig(USART1, USART_IT_TXE, ENABLE);
;;;720    		注意: 不要在此处打开发送中断
;;;721    		发送中断使能在SendUart()函数打开
;;;722    	*/
;;;723    	USART_Cmd(UART4, ENABLE);		/* 使能串口 */
;;;724    
;;;725    	/* CPU的小缺陷：串口配置好，如果直接Send，则第1个字节发送不出去
;;;726    		如下语句解决第1个字节无法正确发送出去的问题 */
;;;727    	USART_ClearFlag(UART4, USART_FLAG_TC);     /* 清发送完成标志，Transmission Complete flag */
;;;728    #endif
;;;729    
;;;730    #if UART5_FIFO_EN == 1			/* 串口5 TX = PC12   RX = PD2 */
;;;731    	/* 第1步： 开启GPIO和UART时钟 */
;;;732    	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC | RCC_APB2Periph_GPIOD | RCC_APB2Periph_AFIO, ENABLE);
;;;733    	RCC_APB1PeriphClockCmd(RCC_APB1Periph_UART5, ENABLE);
;;;734    
;;;735    	/* 第2步：将USART Tx的GPIO配置为推挽复用模式 */
;;;736    	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_12;
;;;737    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
;;;738    	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
;;;739    	GPIO_Init(GPIOC, &GPIO_InitStructure);
;;;740    
;;;741    	/* 第3步：将USART Rx的GPIO配置为浮空输入模式
;;;742    		由于CPU复位后，GPIO缺省都是浮空输入模式，因此下面这个步骤不是必须的
;;;743    		但是，我还是建议加上便于阅读，并且防止其它地方修改了这个口线的设置参数
;;;744    	*/
;;;745    	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
;;;746    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
;;;747    	GPIO_Init(GPIOD, &GPIO_InitStructure);
;;;748    
;;;749    
;;;750    	/* 第4步： 配置串口硬件参数 */
;;;751    	USART_InitStructure.USART_BaudRate = UART5_BAUD;	/* 波特率 */
;;;752    	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
;;;753    	USART_InitStructure.USART_StopBits = USART_StopBits_1;
;;;754    	USART_InitStructure.USART_Parity = USART_Parity_No ;
;;;755    	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
;;;756    	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
;;;757    	USART_Init(UART5, &USART_InitStructure);
;;;758    
;;;759    	USART_ITConfig(UART5, USART_IT_RXNE, ENABLE);	/* 使能接收中断 */
;;;760    	/*
;;;761    		USART_ITConfig(USART1, USART_IT_TXE, ENABLE);
;;;762    		注意: 不要在此处打开发送中断
;;;763    		发送中断使能在SendUart()函数打开
;;;764    	*/
;;;765    	USART_Cmd(UART5, ENABLE);		/* 使能串口 */
;;;766    
;;;767    	/* CPU的小缺陷：串口配置好，如果直接Send，则第1个字节发送不出去
;;;768    		如下语句解决第1个字节无法正确发送出去的问题 */
;;;769    	USART_ClearFlag(UART5, USART_FLAG_TC);     /* 清发送完成标志，Transmission Complete flag */
;;;770    #endif
;;;771    }
00012a  b005              ADD      sp,sp,#0x14
00012c  bd00              POP      {pc}
;;;772    
                          ENDP

00012e  0000              DCW      0x0000
                  |L3.304|
                          DCD      0x40010800
                  |L3.308|
                          DCD      0x40013800
                  |L3.312|
                          DCD      0x40010c00
                  |L3.316|
                          DCD      0x40004800

                          AREA ||i.RS485_InitTXE||, CODE, READONLY, ALIGN=2

                  RS485_InitTXE PROC
;;;311    */
;;;312    void RS485_InitTXE(void)
000000  b508              PUSH     {r3,lr}
;;;313    {
;;;314    	GPIO_InitTypeDef GPIO_InitStructure;
;;;315    
;;;316    	RCC_APB2PeriphClockCmd(RCC_RS485_TXEN, ENABLE);	/* 打开GPIO时钟 */
000002  2101              MOVS     r1,#1
000004  2008              MOVS     r0,#8
000006  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;317    
;;;318    	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
00000a  2003              MOVS     r0,#3
00000c  f88d0002          STRB     r0,[sp,#2]
;;;319    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;	/* 推挽输出模式 */
000010  2010              MOVS     r0,#0x10
000012  f88d0003          STRB     r0,[sp,#3]
;;;320    	GPIO_InitStructure.GPIO_Pin = PIN_RS485_TXEN;
000016  2004              MOVS     r0,#4
000018  f8ad0000          STRH     r0,[sp,#0]
;;;321    	GPIO_Init(PORT_RS485_TXEN, &GPIO_InitStructure);
00001c  4669              MOV      r1,sp
00001e  4802              LDR      r0,|L4.40|
000020  f7fffffe          BL       GPIO_Init
;;;322    }
000024  bd08              POP      {r3,pc}
;;;323    
                          ENDP

000026  0000              DCW      0x0000
                  |L4.40|
                          DCD      0x40010c00

                          AREA ||i.RS485_ReciveNew||, CODE, READONLY, ALIGN=1

                  RS485_ReciveNew PROC
;;;411    //extern void MODBUS_ReciveNew(uint8_t _byte);
;;;412    void RS485_ReciveNew(uint8_t _byte)
000000  4770              BX       lr
;;;413    {
;;;414    //	MODBUS_ReciveNew(_byte);
;;;415    }
;;;416    
                          ENDP


                          AREA ||i.RS485_SendBefor||, CODE, READONLY, ALIGN=2

                  RS485_SendBefor PROC
;;;354    */
;;;355    void RS485_SendBefor(void)
000000  2004              MOVS     r0,#4
;;;356    {
;;;357    	RS485_TX_EN();	/* 切换RS485收发芯片为发送模式 */
000002  4901              LDR      r1,|L6.8|
000004  6008              STR      r0,[r1,#0]
;;;358    }
000006  4770              BX       lr
;;;359    
                          ENDP

                  |L6.8|
                          DCD      0x40010c10

                          AREA ||i.RS485_SendBuf||, CODE, READONLY, ALIGN=1

                  RS485_SendBuf PROC
;;;382    */
;;;383    void RS485_SendBuf(uint8_t *_ucaBuf, uint16_t _usLen)
000000  b570              PUSH     {r4-r6,lr}
;;;384    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;385    	comSendBuf(COM3, _ucaBuf, _usLen);
000006  462a              MOV      r2,r5
000008  4621              MOV      r1,r4
00000a  2002              MOVS     r0,#2
00000c  f7fffffe          BL       comSendBuf
;;;386    }
000010  bd70              POP      {r4-r6,pc}
;;;387    
                          ENDP


                          AREA ||i.RS485_SendOver||, CODE, READONLY, ALIGN=2

                  RS485_SendOver PROC
;;;368    */
;;;369    void RS485_SendOver(void)
000000  2004              MOVS     r0,#4
;;;370    {
;;;371    	RS485_RX_EN();	/* 切换RS485收发芯片为接收模式 */
000002  4901              LDR      r1,|L8.8|
000004  6008              STR      r0,[r1,#0]
;;;372    }
000006  4770              BX       lr
;;;373    
                          ENDP

                  |L8.8|
                          DCD      0x40010c14

                          AREA ||i.RS485_SendStr||, CODE, READONLY, ALIGN=1

                  RS485_SendStr PROC
;;;397    */
;;;398    void RS485_SendStr(char *_pBuf)
000000  b570              PUSH     {r4-r6,lr}
;;;399    {
000002  4604              MOV      r4,r0
;;;400    	RS485_SendBuf((uint8_t *)_pBuf, strlen(_pBuf));
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       strlen
00000a  b285              UXTH     r5,r0
00000c  4629              MOV      r1,r5
00000e  4620              MOV      r0,r4
000010  f7fffffe          BL       RS485_SendBuf
;;;401    }
000014  bd70              POP      {r4-r6,pc}
;;;402    
                          ENDP


                          AREA ||i.USART1_IRQHandler||, CODE, READONLY, ALIGN=2

                  USART1_IRQHandler PROC
;;;1073   #if UART1_FIFO_EN == 1
;;;1074   void USART1_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;1075   {
;;;1076   	UartIRQ(&g_tUart1);
000002  4802              LDR      r0,|L10.12|
000004  f7fffffe          BL       UartIRQ
;;;1077   }
000008  bd10              POP      {r4,pc}
;;;1078   #endif
                          ENDP

00000a  0000              DCW      0x0000
                  |L10.12|
                          DCD      g_tUart1

                          AREA ||i.USART3_IRQHandler||, CODE, READONLY, ALIGN=2

                  USART3_IRQHandler PROC
;;;1087   #if UART3_FIFO_EN == 1
;;;1088   void USART3_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;1089   {
;;;1090   	UartIRQ(&g_tUart3);
000002  4802              LDR      r0,|L11.12|
000004  f7fffffe          BL       UartIRQ
;;;1091   }
000008  bd10              POP      {r4,pc}
;;;1092   #endif
                          ENDP

00000a  0000              DCW      0x0000
                  |L11.12|
                          DCD      g_tUart3

                          AREA ||i.UartGetChar||, CODE, READONLY, ALIGN=1

                  UartGetChar PROC
;;;922    */
;;;923    static uint8_t UartGetChar(UART_T *_pUart, uint8_t *_pByte)
000000  b530              PUSH     {r4,r5,lr}
;;;924    {
000002  4602              MOV      r2,r0
000004  460b              MOV      r3,r1
;;;925    //	uint16_t usCount;
;;;926    
;;;927    //	/* usRxWrite 变量在中断函数中被改写，主程序读取该变量时，必须进行临界区保护 */
;;;928    //	DISABLE_INT();
;;;929    //	usCount = _pUart->usRxCount;
;;;930    //	ENABLE_INT();
;;;931    
;;;932    //	/* 如果读和写索引相同，则返回0 */
;;;933    //	//if (_pUart->usRxRead == usRxWrite)
;;;934    //	if (usCount == 0)	/* 已经没有数据 */
;;;935    //	{
;;;936    //		return 0;
;;;937    //	}
;;;938    //	else
;;;939    //	{
;;;940    //		*_pByte = _pUart->pRxBuf[_pUart->usRxRead];		/* 从串口接收FIFO取1个数据 */
;;;941    
;;;942    //		/* 改写FIFO读索引 */
;;;943    //		DISABLE_INT();
;;;944    //		if (++_pUart->usRxRead >= _pUart->usRxBufSize)
;;;945    //		{
;;;946    //			_pUart->usRxRead = 0;
;;;947    //		}
;;;948    //		_pUart->usRxCount--;
;;;949    //		ENABLE_INT();
;;;950    //		return 1;
;;;951    //	}
;;;952    		
;;;953    	for(uint8_t i = 0; i < 3; i++)
000006  2100              MOVS     r1,#0
000008  e01f              B        |L12.74|
                  |L12.10|
;;;954    	{
;;;955    		if(_pUart->pRxBuf[(_pUart->usRxRead + i) % _pUart->usRxBufSize ] != 0x5a)
00000a  8b10              LDRH     r0,[r2,#0x18]
00000c  4408              ADD      r0,r0,r1
00000e  89d4              LDRH     r4,[r2,#0xe]
000010  fb90f5f4          SDIV     r5,r0,r4
000014  fb040015          MLS      r0,r4,r5,r0
000018  6894              LDR      r4,[r2,#8]
00001a  5c20              LDRB     r0,[r4,r0]
00001c  285a              CMP      r0,#0x5a
00001e  d012              BEQ      |L12.70|
;;;956    		{
;;;957    			*_pByte = _pUart->pRxBuf[_pUart->usRxRead];		/* 从串口接收FIFO取1个数据 */
000020  8b14              LDRH     r4,[r2,#0x18]
000022  6890              LDR      r0,[r2,#8]
000024  5d00              LDRB     r0,[r0,r4]
000026  7018              STRB     r0,[r3,#0]
;;;958    
;;;959    			_pUart->pRxBuf[_pUart->usRxRead] = 0x5a;
000028  205a              MOVS     r0,#0x5a
00002a  8b15              LDRH     r5,[r2,#0x18]
00002c  6894              LDR      r4,[r2,#8]
00002e  5560              STRB     r0,[r4,r5]
;;;960    			
;;;961    			/* 改写FIFO读索引 */
;;;962    			if (++_pUart->usRxRead >= _pUart->usRxBufSize)
000030  8b10              LDRH     r0,[r2,#0x18]
000032  1c40              ADDS     r0,r0,#1
000034  b280              UXTH     r0,r0
000036  8310              STRH     r0,[r2,#0x18]
000038  89d4              LDRH     r4,[r2,#0xe]
00003a  42a0              CMP      r0,r4
00003c  db01              BLT      |L12.66|
;;;963    			{
;;;964    				_pUart->usRxRead = 0;
00003e  2000              MOVS     r0,#0
000040  8310              STRH     r0,[r2,#0x18]
                  |L12.66|
;;;965    			}
;;;966    			return 1;			
000042  2001              MOVS     r0,#1
                  |L12.68|
;;;967    		}
;;;968    	}
;;;969    	
;;;970    	return 0;	
;;;971    }
000044  bd30              POP      {r4,r5,pc}
                  |L12.70|
000046  1c48              ADDS     r0,r1,#1              ;953
000048  b2c1              UXTB     r1,r0                 ;953
                  |L12.74|
00004a  2903              CMP      r1,#3                 ;953
00004c  dbdd              BLT      |L12.10|
00004e  2000              MOVS     r0,#0                 ;970
000050  e7f8              B        |L12.68|
;;;972    
                          ENDP


                          AREA ||i.UartIRQ||, CODE, READONLY, ALIGN=1

                  UartIRQ PROC
;;;980    */
;;;981    static void UartIRQ(UART_T *_pUart)
000000  b570              PUSH     {r4-r6,lr}
;;;982    {
000002  4604              MOV      r4,r0
;;;983    	/* 处理接收中断  */
;;;984    	if (USART_GetITStatus(_pUart->uart, USART_IT_RXNE) != RESET)
000004  f2405125          MOV      r1,#0x525
000008  6820              LDR      r0,[r4,#0]
00000a  f7fffffe          BL       USART_GetITStatus
00000e  b1e0              CBZ      r0,|L13.74|
;;;985    	{
;;;986    		/* 从串口接收数据寄存器读取数据存放到接收FIFO */
;;;987    		uint8_t ch;
;;;988    
;;;989    		ch = USART_ReceiveData(_pUart->uart);
000010  6820              LDR      r0,[r4,#0]
000012  f7fffffe          BL       USART_ReceiveData
000016  b2c5              UXTB     r5,r0
;;;990    		
;;;991    		_pUart->pRxBuf[_pUart->usRxWrite] = ch;
000018  8ae1              LDRH     r1,[r4,#0x16]
00001a  68a0              LDR      r0,[r4,#8]
00001c  5445              STRB     r5,[r0,r1]
;;;992    		if (++_pUart->usRxWrite >= _pUart->usRxBufSize)
00001e  8ae0              LDRH     r0,[r4,#0x16]
000020  1c40              ADDS     r0,r0,#1
000022  b280              UXTH     r0,r0
000024  82e0              STRH     r0,[r4,#0x16]
000026  89e1              LDRH     r1,[r4,#0xe]
000028  4288              CMP      r0,r1
00002a  db01              BLT      |L13.48|
;;;993    		{
;;;994    			_pUart->usRxWrite = 0;
00002c  2000              MOVS     r0,#0
00002e  82e0              STRH     r0,[r4,#0x16]
                  |L13.48|
;;;995    		}
;;;996    		if (_pUart->usRxCount < _pUart->usRxBufSize)
000030  8b60              LDRH     r0,[r4,#0x1a]
000032  89e1              LDRH     r1,[r4,#0xe]
000034  4288              CMP      r0,r1
000036  da02              BGE      |L13.62|
;;;997    		{
;;;998    			_pUart->usRxCount++;
000038  8b60              LDRH     r0,[r4,#0x1a]
00003a  1c40              ADDS     r0,r0,#1
00003c  8360              STRH     r0,[r4,#0x1a]
                  |L13.62|
;;;999    		}
;;;1000   		
;;;1001   		/* 回调函数,通知应用程序收到新数据,一般是发送1个消息或者设置一个标记 */
;;;1002   		//if (_pUart->usRxWrite == _pUart->usRxRead)
;;;1003   		//if (_pUart->usRxCount == 1)
;;;1004   		{
;;;1005   			if (_pUart->ReciveNew)
00003e  6a60              LDR      r0,[r4,#0x24]
000040  b110              CBZ      r0,|L13.72|
;;;1006   			{
;;;1007   				_pUart->ReciveNew(ch);
000042  4628              MOV      r0,r5
000044  6a61              LDR      r1,[r4,#0x24]
000046  4788              BLX      r1
                  |L13.72|
;;;1008   			}
;;;1009   		}
;;;1010   	}
000048  bf00              NOP      
                  |L13.74|
;;;1011   
;;;1012   	/* 处理发送缓冲区空中断 */
;;;1013   	if (USART_GetITStatus(_pUart->uart, USART_IT_TXE) != RESET)
00004a  f2407127          MOV      r1,#0x727
00004e  6820              LDR      r0,[r4,#0]
000050  f7fffffe          BL       USART_GetITStatus
000054  b308              CBZ      r0,|L13.154|
;;;1014   	{
;;;1015   		//if (_pUart->usTxRead == _pUart->usTxWrite)
;;;1016   		if (_pUart->usTxCount == 0)
000056  8aa0              LDRH     r0,[r4,#0x14]
000058  b960              CBNZ     r0,|L13.116|
;;;1017   		{
;;;1018   			/* 发送缓冲区的数据已取完时， 禁止发送缓冲区空中断 （注意：此时最后1个数据还未真正发送完毕）*/
;;;1019   			USART_ITConfig(_pUart->uart, USART_IT_TXE, DISABLE);
00005a  2200              MOVS     r2,#0
00005c  f2407127          MOV      r1,#0x727
000060  6820              LDR      r0,[r4,#0]
000062  f7fffffe          BL       USART_ITConfig
;;;1020   
;;;1021   			/* 使能数据发送完毕中断 */
;;;1022   			USART_ITConfig(_pUart->uart, USART_IT_TC, ENABLE);
000066  2201              MOVS     r2,#1
000068  f2406126          MOV      r1,#0x626
00006c  6820              LDR      r0,[r4,#0]
00006e  f7fffffe          BL       USART_ITConfig
000072  e037              B        |L13.228|
                  |L13.116|
;;;1023   		}
;;;1024   		else
;;;1025   		{
;;;1026   			/* 从发送FIFO取1个字节写入串口发送数据寄存器 */
;;;1027   			USART_SendData(_pUart->uart, _pUart->pTxBuf[_pUart->usTxRead]);
000074  8a63              LDRH     r3,[r4,#0x12]
000076  6862              LDR      r2,[r4,#4]
000078  5cd1              LDRB     r1,[r2,r3]
00007a  6820              LDR      r0,[r4,#0]
00007c  f7fffffe          BL       USART_SendData
;;;1028   			if (++_pUart->usTxRead >= _pUart->usTxBufSize)
000080  8a60              LDRH     r0,[r4,#0x12]
000082  1c40              ADDS     r0,r0,#1
000084  b280              UXTH     r0,r0
000086  8260              STRH     r0,[r4,#0x12]
000088  89a1              LDRH     r1,[r4,#0xc]
00008a  4288              CMP      r0,r1
00008c  db01              BLT      |L13.146|
;;;1029   			{
;;;1030   				_pUart->usTxRead = 0;
00008e  2000              MOVS     r0,#0
000090  8260              STRH     r0,[r4,#0x12]
                  |L13.146|
;;;1031   			}
;;;1032   			_pUart->usTxCount--;
000092  8aa0              LDRH     r0,[r4,#0x14]
000094  1e40              SUBS     r0,r0,#1
000096  82a0              STRH     r0,[r4,#0x14]
000098  e024              B        |L13.228|
                  |L13.154|
;;;1033   		}
;;;1034   	}
;;;1035   	/* 数据bit位全部发送完毕的中断 */
;;;1036   	else if (USART_GetITStatus(_pUart->uart, USART_IT_TC) != RESET)
00009a  f2406126          MOV      r1,#0x626
00009e  6820              LDR      r0,[r4,#0]
0000a0  f7fffffe          BL       USART_GetITStatus
0000a4  b1f0              CBZ      r0,|L13.228|
;;;1037   	{
;;;1038   		//if (_pUart->usTxRead == _pUart->usTxWrite)
;;;1039   		if (_pUart->usTxCount == 0)
0000a6  8aa0              LDRH     r0,[r4,#0x14]
0000a8  b950              CBNZ     r0,|L13.192|
;;;1040   		{
;;;1041   			/* 如果发送FIFO的数据全部发送完毕，禁止数据发送完毕中断 */
;;;1042   			USART_ITConfig(_pUart->uart, USART_IT_TC, DISABLE);
0000aa  2200              MOVS     r2,#0
0000ac  f2406126          MOV      r1,#0x626
0000b0  6820              LDR      r0,[r4,#0]
0000b2  f7fffffe          BL       USART_ITConfig
;;;1043   
;;;1044   			/* 回调函数, 一般用来处理RS485通信，将RS485芯片设置为接收模式，避免抢占总线 */
;;;1045   			if (_pUart->SendOver)
0000b6  6a20              LDR      r0,[r4,#0x20]
0000b8  b1a0              CBZ      r0,|L13.228|
;;;1046   			{
;;;1047   				_pUart->SendOver();
0000ba  6a20              LDR      r0,[r4,#0x20]
0000bc  4780              BLX      r0
0000be  e011              B        |L13.228|
                  |L13.192|
;;;1048   			}
;;;1049   		}
;;;1050   		else
;;;1051   		{
;;;1052   			/* 正常情况下，不会进入此分支 */
;;;1053   
;;;1054   			/* 如果发送FIFO的数据还未完毕，则从发送FIFO取1个数据写入发送数据寄存器 */
;;;1055   			USART_SendData(_pUart->uart, _pUart->pTxBuf[_pUart->usTxRead]);
0000c0  8a63              LDRH     r3,[r4,#0x12]
0000c2  6862              LDR      r2,[r4,#4]
0000c4  5cd1              LDRB     r1,[r2,r3]
0000c6  6820              LDR      r0,[r4,#0]
0000c8  f7fffffe          BL       USART_SendData
;;;1056   			if (++_pUart->usTxRead >= _pUart->usTxBufSize)
0000cc  8a60              LDRH     r0,[r4,#0x12]
0000ce  1c40              ADDS     r0,r0,#1
0000d0  b280              UXTH     r0,r0
0000d2  8260              STRH     r0,[r4,#0x12]
0000d4  89a1              LDRH     r1,[r4,#0xc]
0000d6  4288              CMP      r0,r1
0000d8  db01              BLT      |L13.222|
;;;1057   			{
;;;1058   				_pUart->usTxRead = 0;
0000da  2000              MOVS     r0,#0
0000dc  8260              STRH     r0,[r4,#0x12]
                  |L13.222|
;;;1059   			}
;;;1060   			_pUart->usTxCount--;
0000de  8aa0              LDRH     r0,[r4,#0x14]
0000e0  1e40              SUBS     r0,r0,#1
0000e2  82a0              STRH     r0,[r4,#0x14]
                  |L13.228|
;;;1061   		}
;;;1062   	}
;;;1063   }
0000e4  bd70              POP      {r4-r6,pc}
;;;1064   
                          ENDP


                          AREA ||i.UartSend||, CODE, READONLY, ALIGN=1

                  UartSend PROC
;;;850    */
;;;851    static void UartSend(UART_T *_pUart, uint8_t *_ucaBuf, uint16_t _usLen)
000000  b5f8              PUSH     {r3-r7,lr}
;;;852    {
000002  4604              MOV      r4,r0
000004  460e              MOV      r6,r1
000006  4617              MOV      r7,r2
;;;853    	uint16_t i;
;;;854    
;;;855    	for (i = 0; i < _usLen; i++)
000008  2500              MOVS     r5,#0
00000a  e025              B        |L14.88|
                  |L14.12|
;;;856    	{
;;;857    		/* 如果发送缓冲区已经满了，则等待缓冲区空 */
;;;858    	#if 0
;;;859    		/*
;;;860    			在调试GPRS例程时，下面的代码出现死机，while 死循环
;;;861    			原因： 发送第1个字节时 _pUart->usTxWrite = 1；_pUart->usTxRead = 0;
;;;862    			将导致while(1) 无法退出
;;;863    		*/
;;;864    		while (1)
;;;865    		{
;;;866    			uint16_t usRead;
;;;867    
;;;868    			DISABLE_INT();
;;;869    			usRead = _pUart->usTxRead;
;;;870    			ENABLE_INT();
;;;871    
;;;872    			if (++usRead >= _pUart->usTxBufSize)
;;;873    			{
;;;874    				usRead = 0;
;;;875    			}
;;;876    
;;;877    			if (usRead != _pUart->usTxWrite)
;;;878    			{
;;;879    				break;
;;;880    			}
;;;881    		}
;;;882    	#else
;;;883    		/* 当 _pUart->usTxBufSize == 1 时, 下面的函数会死掉(待完善) */
;;;884    		while (1)
00000c  e00c              B        |L14.40|
                  |L14.14|
;;;885    		{
;;;886    			__IO uint16_t usCount;
;;;887    
;;;888    			DISABLE_INT();
00000e  f7fffffe          BL       vPortEnterCritical
;;;889    			usCount = _pUart->usTxCount;
000012  8aa0              LDRH     r0,[r4,#0x14]
000014  9000              STR      r0,[sp,#0]
;;;890    			ENABLE_INT();
000016  f7fffffe          BL       vPortExitCritical
;;;891    
;;;892    			if (usCount < _pUart->usTxBufSize)
00001a  89a0              LDRH     r0,[r4,#0xc]
00001c  f8bd1000          LDRH     r1,[sp,#0]
000020  4288              CMP      r0,r1
000022  dd00              BLE      |L14.38|
;;;893    			{
;;;894    				break;
000024  e001              B        |L14.42|
                  |L14.38|
;;;895    			}
;;;896    		}
000026  bf00              NOP      
                  |L14.40|
000028  e7f1              B        |L14.14|
                  |L14.42|
00002a  bf00              NOP                            ;894
;;;897    	#endif
;;;898    
;;;899    		/* 将新数据填入发送缓冲区 */
;;;900    		_pUart->pTxBuf[_pUart->usTxWrite] = _ucaBuf[i];
00002c  5d70              LDRB     r0,[r6,r5]
00002e  8a22              LDRH     r2,[r4,#0x10]
000030  6861              LDR      r1,[r4,#4]
000032  5488              STRB     r0,[r1,r2]
;;;901    
;;;902    		DISABLE_INT();
000034  f7fffffe          BL       vPortEnterCritical
;;;903    		if (++_pUart->usTxWrite >= _pUart->usTxBufSize)
000038  8a20              LDRH     r0,[r4,#0x10]
00003a  1c40              ADDS     r0,r0,#1
00003c  b280              UXTH     r0,r0
00003e  8220              STRH     r0,[r4,#0x10]
000040  89a1              LDRH     r1,[r4,#0xc]
000042  4288              CMP      r0,r1
000044  db01              BLT      |L14.74|
;;;904    		{
;;;905    			_pUart->usTxWrite = 0;
000046  2000              MOVS     r0,#0
000048  8220              STRH     r0,[r4,#0x10]
                  |L14.74|
;;;906    		}
;;;907    		_pUart->usTxCount++;
00004a  8aa0              LDRH     r0,[r4,#0x14]
00004c  1c40              ADDS     r0,r0,#1
00004e  82a0              STRH     r0,[r4,#0x14]
;;;908    		ENABLE_INT();
000050  f7fffffe          BL       vPortExitCritical
000054  1c68              ADDS     r0,r5,#1              ;855
000056  b285              UXTH     r5,r0                 ;855
                  |L14.88|
000058  42bd              CMP      r5,r7                 ;855
00005a  dbd7              BLT      |L14.12|
;;;909    	}
;;;910    
;;;911    	USART_ITConfig(_pUart->uart, USART_IT_TXE, ENABLE);
00005c  2201              MOVS     r2,#1
00005e  f2407127          MOV      r1,#0x727
000062  6820              LDR      r0,[r4,#0]
000064  f7fffffe          BL       USART_ITConfig
;;;912    }
000068  bdf8              POP      {r3-r7,pc}
;;;913    
                          ENDP


                          AREA ||i.UartVarInit||, CODE, READONLY, ALIGN=2

                  UartVarInit PROC
;;;424    */
;;;425    static void UartVarInit(void)
000000  b510              PUSH     {r4,lr}
;;;426    {
;;;427    #if UART1_FIFO_EN == 1
;;;428    	g_tUart1.uart = USART1;						/* STM32 串口设备 */
000002  481a              LDR      r0,|L15.108|
000004  491a              LDR      r1,|L15.112|
000006  6008              STR      r0,[r1,#0]  ; g_tUart1
;;;429    	g_tUart1.pTxBuf = g_TxBuf1;					/* 发送缓冲区指针 */
000008  481a              LDR      r0,|L15.116|
00000a  6048              STR      r0,[r1,#4]  ; g_tUart1
;;;430    	g_tUart1.pRxBuf = g_RxBuf1;					/* 接收缓冲区指针 */
00000c  481a              LDR      r0,|L15.120|
00000e  6088              STR      r0,[r1,#8]  ; g_tUart1
;;;431    	g_tUart1.usTxBufSize = UART1_TX_BUF_SIZE;	/* 发送缓冲区大小 */
000010  f44f6080          MOV      r0,#0x400
000014  8188              STRH     r0,[r1,#0xc]
;;;432    	g_tUart1.usRxBufSize = UART1_RX_BUF_SIZE;	/* 接收缓冲区大小 */
000016  1040              ASRS     r0,r0,#1
000018  81c8              STRH     r0,[r1,#0xe]
;;;433    	g_tUart1.usTxWrite = 0;						/* 发送FIFO写索引 */
00001a  2000              MOVS     r0,#0
00001c  8208              STRH     r0,[r1,#0x10]
;;;434    	g_tUart1.usTxRead = 0;						/* 发送FIFO读索引 */
00001e  8248              STRH     r0,[r1,#0x12]
;;;435    	g_tUart1.usRxWrite = 0;						/* 接收FIFO写索引 */
000020  82c8              STRH     r0,[r1,#0x16]
;;;436    	g_tUart1.usRxRead = 0;						/* 接收FIFO读索引 */
000022  8308              STRH     r0,[r1,#0x18]
;;;437    	g_tUart1.usRxCount = 0;						/* 接收到的新数据个数 */
000024  8348              STRH     r0,[r1,#0x1a]
;;;438    	g_tUart1.usTxCount = 0;						/* 待发送的数据个数 */
000026  8288              STRH     r0,[r1,#0x14]
;;;439    	g_tUart1.SendBefor = 0;						/* 发送数据前的回调函数 */
000028  61c8              STR      r0,[r1,#0x1c]  ; g_tUart1
;;;440    	g_tUart1.SendOver = 0;						/* 发送完毕后的回调函数 */
00002a  6208              STR      r0,[r1,#0x20]  ; g_tUart1
;;;441    	g_tUart1.ReciveNew = 0;						/* 接收到新数据后的回调函数 */
00002c  6248              STR      r0,[r1,#0x24]  ; g_tUart1
;;;442    #endif
;;;443    
;;;444    #if UART2_FIFO_EN == 1
;;;445    	g_tUart2.uart = USART2;						/* STM32 串口设备 */
;;;446    	g_tUart2.pTxBuf = g_TxBuf2;					/* 发送缓冲区指针 */
;;;447    	g_tUart2.pRxBuf = g_RxBuf2;					/* 接收缓冲区指针 */
;;;448    	g_tUart2.usTxBufSize = UART2_TX_BUF_SIZE;	/* 发送缓冲区大小 */
;;;449    	g_tUart2.usRxBufSize = UART2_RX_BUF_SIZE;	/* 接收缓冲区大小 */
;;;450    	g_tUart2.usTxWrite = 0;						/* 发送FIFO写索引 */
;;;451    	g_tUart2.usTxRead = 0;						/* 发送FIFO读索引 */
;;;452    	g_tUart2.usRxWrite = 0;						/* 接收FIFO写索引 */
;;;453    	g_tUart2.usRxRead = 0;						/* 接收FIFO读索引 */
;;;454    	g_tUart2.usRxCount = 0;						/* 接收到的新数据个数 */
;;;455    	g_tUart2.usTxCount = 0;						/* 待发送的数据个数 */
;;;456    	g_tUart2.SendBefor = 0;						/* 发送数据前的回调函数 */
;;;457    	g_tUart2.SendOver = 0;						/* 发送完毕后的回调函数 */
;;;458    	g_tUart2.ReciveNew = 0;						/* 接收到新数据后的回调函数 */
;;;459    #endif
;;;460    
;;;461    #if UART3_FIFO_EN == 1
;;;462    	g_tUart3.uart = USART3;						/* STM32 串口设备 */
00002e  4813              LDR      r0,|L15.124|
000030  4913              LDR      r1,|L15.128|
000032  6008              STR      r0,[r1,#0]  ; g_tUart3
;;;463    	g_tUart3.pTxBuf = g_TxBuf3;					/* 发送缓冲区指针 */
000034  4813              LDR      r0,|L15.132|
000036  6048              STR      r0,[r1,#4]  ; g_tUart3
;;;464    	g_tUart3.pRxBuf = g_RxBuf3;					/* 接收缓冲区指针 */
000038  4813              LDR      r0,|L15.136|
00003a  6088              STR      r0,[r1,#8]  ; g_tUart3
;;;465    	g_tUart3.usTxBufSize = UART3_TX_BUF_SIZE;	/* 发送缓冲区大小 */
00003c  f44f6000          MOV      r0,#0x800
000040  8188              STRH     r0,[r1,#0xc]
;;;466    	g_tUart3.usRxBufSize = UART3_RX_BUF_SIZE;	/* 接收缓冲区大小 */
000042  81c8              STRH     r0,[r1,#0xe]
;;;467    	g_tUart3.usTxWrite = 0;						/* 发送FIFO写索引 */
000044  2000              MOVS     r0,#0
000046  8208              STRH     r0,[r1,#0x10]
;;;468    	g_tUart3.usTxRead = 0;						/* 发送FIFO读索引 */
000048  8248              STRH     r0,[r1,#0x12]
;;;469    	g_tUart3.usRxWrite = 0;						/* 接收FIFO写索引 */
00004a  82c8              STRH     r0,[r1,#0x16]
;;;470    	g_tUart3.usRxRead = 0;						/* 接收FIFO读索引 */
00004c  8308              STRH     r0,[r1,#0x18]
;;;471    	g_tUart3.usRxCount = 0;						/* 接收到的新数据个数 */
00004e  8348              STRH     r0,[r1,#0x1a]
;;;472    	g_tUart3.usTxCount = 0;						/* 待发送的数据个数 */
000050  8288              STRH     r0,[r1,#0x14]
;;;473    	g_tUart3.SendBefor = RS485_SendBefor;		/* 发送数据前的回调函数 */
000052  480e              LDR      r0,|L15.140|
000054  61c8              STR      r0,[r1,#0x1c]  ; g_tUart3
;;;474    	g_tUart3.SendOver = RS485_SendOver;			/* 发送完毕后的回调函数 */
000056  480e              LDR      r0,|L15.144|
000058  6208              STR      r0,[r1,#0x20]  ; g_tUart3
;;;475    	g_tUart3.ReciveNew = RS485_ReciveNew;		/* 接收到新数据后的回调函数 */
00005a  480e              LDR      r0,|L15.148|
00005c  6248              STR      r0,[r1,#0x24]  ; g_tUart3
;;;476    	
;;;477    	memset(g_tUart3.pRxBuf,0x5a,g_tUart3.usRxBufSize);  /*初始化接收缓存*/
00005e  460a              MOV      r2,r1
000060  89d1              LDRH     r1,[r2,#0xe]  ; g_tUart3
000062  6890              LDR      r0,[r2,#8]  ; g_tUart3
000064  225a              MOVS     r2,#0x5a
000066  f7fffffe          BL       __aeabi_memset
;;;478    #endif
;;;479    
;;;480    #if UART4_FIFO_EN == 1
;;;481    	g_tUart4.uart = UART4;						/* STM32 串口设备 */
;;;482    	g_tUart4.pTxBuf = g_TxBuf4;					/* 发送缓冲区指针 */
;;;483    	g_tUart4.pRxBuf = g_RxBuf4;					/* 接收缓冲区指针 */
;;;484    	g_tUart4.usTxBufSize = UART4_TX_BUF_SIZE;	/* 发送缓冲区大小 */
;;;485    	g_tUart4.usRxBufSize = UART4_RX_BUF_SIZE;	/* 接收缓冲区大小 */
;;;486    	g_tUart4.usTxWrite = 0;						/* 发送FIFO写索引 */
;;;487    	g_tUart4.usTxRead = 0;						/* 发送FIFO读索引 */
;;;488    	g_tUart4.usRxWrite = 0;						/* 接收FIFO写索引 */
;;;489    	g_tUart4.usRxRead = 0;						/* 接收FIFO读索引 */
;;;490    	g_tUart4.usRxCount = 0;						/* 接收到的新数据个数 */
;;;491    	g_tUart4.usTxCount = 0;						/* 待发送的数据个数 */
;;;492    	g_tUart4.SendBefor = 0;						/* 发送数据前的回调函数 */
;;;493    	g_tUart4.SendOver = 0;						/* 发送完毕后的回调函数 */
;;;494    	g_tUart4.ReciveNew = 0;						/* 接收到新数据后的回调函数 */
;;;495    #endif
;;;496    
;;;497    #if UART5_FIFO_EN == 1
;;;498    	g_tUart5.uart = UART5;						/* STM32 串口设备 */
;;;499    	g_tUart5.pTxBuf = g_TxBuf5;					/* 发送缓冲区指针 */
;;;500    	g_tUart5.pRxBuf = g_RxBuf5;					/* 接收缓冲区指针 */
;;;501    	g_tUart5.usTxBufSize = UART5_TX_BUF_SIZE;	/* 发送缓冲区大小 */
;;;502    	g_tUart5.usRxBufSize = UART5_RX_BUF_SIZE;	/* 接收缓冲区大小 */
;;;503    	g_tUart5.usTxWrite = 0;						/* 发送FIFO写索引 */
;;;504    	g_tUart5.usTxRead = 0;						/* 发送FIFO读索引 */
;;;505    	g_tUart5.usRxWrite = 0;						/* 接收FIFO写索引 */
;;;506    	g_tUart5.usRxRead = 0;						/* 接收FIFO读索引 */
;;;507    	g_tUart5.usRxCount = 0;						/* 接收到的新数据个数 */
;;;508    	g_tUart5.usTxCount = 0;						/* 待发送的数据个数 */
;;;509    	g_tUart5.SendBefor = 0;						/* 发送数据前的回调函数 */
;;;510    	g_tUart5.SendOver = 0;						/* 发送完毕后的回调函数 */
;;;511    	g_tUart5.ReciveNew = 0;						/* 接收到新数据后的回调函数 */
;;;512    #endif
;;;513    
;;;514    
;;;515    #if UART6_FIFO_EN == 1
;;;516    	g_tUart6.uart = USART6;						/* STM32 串口设备 */
;;;517    	g_tUart6.pTxBuf = g_TxBuf6;					/* 发送缓冲区指针 */
;;;518    	g_tUart6.pRxBuf = g_RxBuf6;					/* 接收缓冲区指针 */
;;;519    	g_tUart6.usTxBufSize = UART6_TX_BUF_SIZE;	/* 发送缓冲区大小 */
;;;520    	g_tUart6.usRxBufSize = UART6_RX_BUF_SIZE;	/* 接收缓冲区大小 */
;;;521    	g_tUart6.usTxWrite = 0;						/* 发送FIFO写索引 */
;;;522    	g_tUart6.usTxRead = 0;						/* 发送FIFO读索引 */
;;;523    	g_tUart6.usRxWrite = 0;						/* 接收FIFO写索引 */
;;;524    	g_tUart6.usRxRead = 0;						/* 接收FIFO读索引 */
;;;525    	g_tUart6.usRxCount = 0;						/* 接收到的新数据个数 */
;;;526    	g_tUart6.usTxCount = 0;						/* 待发送的数据个数 */
;;;527    	g_tUart6.SendBefor = 0;						/* 发送数据前的回调函数 */
;;;528    	g_tUart6.SendOver = 0;						/* 发送完毕后的回调函数 */
;;;529    	g_tUart6.ReciveNew = 0;						/* 接收到新数据后的回调函数 */
;;;530    #endif
;;;531    }
00006a  bd10              POP      {r4,pc}
;;;532    
                          ENDP

                  |L15.108|
                          DCD      0x40013800
                  |L15.112|
                          DCD      g_tUart1
                  |L15.116|
                          DCD      g_TxBuf1
                  |L15.120|
                          DCD      g_RxBuf1
                  |L15.124|
                          DCD      0x40004800
                  |L15.128|
                          DCD      g_tUart3
                  |L15.132|
                          DCD      g_TxBuf3
                  |L15.136|
                          DCD      g_RxBuf3
                  |L15.140|
                          DCD      RS485_SendBefor
                  |L15.144|
                          DCD      RS485_SendOver
                  |L15.148|
                          DCD      RS485_ReciveNew

                          AREA ||i.bsp_InitUart||, CODE, READONLY, ALIGN=2

                  bsp_InitUart PROC
;;;74     */
;;;75     void bsp_InitUart(void)
000000  b510              PUSH     {r4,lr}
;;;76     {
;;;77     	UartVarInit();		/* 必须先初始化全局变量,再配置硬件 */
000002  f7fffffe          BL       UartVarInit
;;;78     
;;;79     	InitHardUart();		/* 配置串口的硬件参数(波特率等) */
000006  f7fffffe          BL       InitHardUart
;;;80     
;;;81     	//RS485_InitTXE();	/* 配置RS485芯片的发送使能硬件，配置为推挽输出 */
;;;82     
;;;83     	ConfigUartNVIC();	/* 配置串口中断 */
00000a  f7fffffe          BL       ConfigUartNVIC
;;;84     	
;;;85     	bsp_InitUartDma((uint32_t)g_tUart3.pRxBuf, g_tUart3.usRxBufSize);  /*初始化串口3 RX DMA传输*/
00000e  4a03              LDR      r2,|L16.28|
000010  89d1              LDRH     r1,[r2,#0xe]  ; g_tUart3
000012  6890              LDR      r0,[r2,#8]  ; g_tUart3
000014  f7fffffe          BL       bsp_InitUartDma
;;;86     }
000018  bd10              POP      {r4,pc}
;;;87     
                          ENDP

00001a  0000              DCW      0x0000
                  |L16.28|
                          DCD      g_tUart3

                          AREA ||i.bsp_Set485Baud||, CODE, READONLY, ALIGN=2

                  bsp_Set485Baud PROC
;;;331    */
;;;332    void bsp_Set485Baud(uint32_t _baud)
000000  b51f              PUSH     {r0-r4,lr}
;;;333    {
000002  4604              MOV      r4,r0
;;;334    	USART_InitTypeDef USART_InitStructure;
;;;335    
;;;336    	/* 第2步： 配置串口硬件参数 */
;;;337    	USART_InitStructure.USART_BaudRate = _baud;	/* 波特率 */
000004  9400              STR      r4,[sp,#0]
;;;338    	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
000006  2000              MOVS     r0,#0
000008  f8ad0004          STRH     r0,[sp,#4]
;;;339    	USART_InitStructure.USART_StopBits = USART_StopBits_1;
00000c  f8ad0006          STRH     r0,[sp,#6]
;;;340    	USART_InitStructure.USART_Parity = USART_Parity_No ;
000010  f8ad0008          STRH     r0,[sp,#8]
;;;341    	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
000014  f8ad000c          STRH     r0,[sp,#0xc]
;;;342    	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
000018  200c              MOVS     r0,#0xc
00001a  f8ad000a          STRH     r0,[sp,#0xa]
;;;343    	USART_Init(USART3, &USART_InitStructure);
00001e  4669              MOV      r1,sp
000020  4801              LDR      r0,|L17.40|
000022  f7fffffe          BL       USART_Init
;;;344    }
000026  bd1f              POP      {r0-r4,pc}
;;;345    
                          ENDP

                  |L17.40|
                          DCD      0x40004800

                          AREA ||i.bsp_SetUart1Baud||, CODE, READONLY, ALIGN=2

                  bsp_SetUart1Baud PROC
;;;264    */
;;;265    void bsp_SetUart1Baud(uint32_t _baud)
000000  b51f              PUSH     {r0-r4,lr}
;;;266    {
000002  4604              MOV      r4,r0
;;;267    	USART_InitTypeDef USART_InitStructure;
;;;268    
;;;269    	/* 第2步： 配置串口硬件参数 */
;;;270    	USART_InitStructure.USART_BaudRate = _baud;	/* 波特率 */
000004  9400              STR      r4,[sp,#0]
;;;271    	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
000006  2000              MOVS     r0,#0
000008  f8ad0004          STRH     r0,[sp,#4]
;;;272    	USART_InitStructure.USART_StopBits = USART_StopBits_1;
00000c  f8ad0006          STRH     r0,[sp,#6]
;;;273    	USART_InitStructure.USART_Parity = USART_Parity_No ;
000010  f8ad0008          STRH     r0,[sp,#8]
;;;274    	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
000014  f8ad000c          STRH     r0,[sp,#0xc]
;;;275    	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
000018  200c              MOVS     r0,#0xc
00001a  f8ad000a          STRH     r0,[sp,#0xa]
;;;276    	USART_Init(USART2, &USART_InitStructure);
00001e  4669              MOV      r1,sp
000020  4801              LDR      r0,|L18.40|
000022  f7fffffe          BL       USART_Init
;;;277    }
000026  bd1f              POP      {r0-r4,pc}
;;;278    
                          ENDP

                  |L18.40|
                          DCD      0x40004400

                          AREA ||i.bsp_SetUart2Baud||, CODE, READONLY, ALIGN=2

                  bsp_SetUart2Baud PROC
;;;286    */
;;;287    void bsp_SetUart2Baud(uint32_t _baud)
000000  b51f              PUSH     {r0-r4,lr}
;;;288    {
000002  4604              MOV      r4,r0
;;;289    	USART_InitTypeDef USART_InitStructure;
;;;290    
;;;291    	/* 第2步： 配置串口硬件参数 */
;;;292    	USART_InitStructure.USART_BaudRate = _baud;	/* 波特率 */
000004  9400              STR      r4,[sp,#0]
;;;293    	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
000006  2000              MOVS     r0,#0
000008  f8ad0004          STRH     r0,[sp,#4]
;;;294    	USART_InitStructure.USART_StopBits = USART_StopBits_1;
00000c  f8ad0006          STRH     r0,[sp,#6]
;;;295    	USART_InitStructure.USART_Parity = USART_Parity_No ;
000010  f8ad0008          STRH     r0,[sp,#8]
;;;296    	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
000014  f8ad000c          STRH     r0,[sp,#0xc]
;;;297    	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
000018  200c              MOVS     r0,#0xc
00001a  f8ad000a          STRH     r0,[sp,#0xa]
;;;298    	USART_Init(USART2, &USART_InitStructure);
00001e  4669              MOV      r1,sp
000020  4801              LDR      r0,|L19.40|
000022  f7fffffe          BL       USART_Init
;;;299    }
000026  bd1f              POP      {r0-r4,pc}
;;;300    
                          ENDP

                  |L19.40|
                          DCD      0x40004400

                          AREA ||i.comClearRxFifo||, CODE, READONLY, ALIGN=1

                  comClearRxFifo PROC
;;;241    */
;;;242    void comClearRxFifo(COM_PORT_E _ucPort)
000000  b500              PUSH     {lr}
;;;243    {
000002  4603              MOV      r3,r0
;;;244    	UART_T *pUart;
;;;245    
;;;246    	pUart = ComToUart(_ucPort);
000004  4618              MOV      r0,r3
000006  f7fffffe          BL       ComToUart
00000a  4602              MOV      r2,r0
;;;247    	if (pUart == 0)
00000c  b902              CBNZ     r2,|L20.16|
                  |L20.14|
;;;248    	{
;;;249    		return;
;;;250    	}
;;;251    
;;;252    	pUart->usRxWrite = 0;
;;;253    	pUart->usRxRead = 0;
;;;254    	pUart->usRxCount = 0;
;;;255    }
00000e  bd00              POP      {pc}
                  |L20.16|
000010  2000              MOVS     r0,#0                 ;252
000012  82d0              STRH     r0,[r2,#0x16]         ;252
000014  8310              STRH     r0,[r2,#0x18]         ;253
000016  8350              STRH     r0,[r2,#0x1a]         ;254
000018  bf00              NOP      
00001a  e7f8              B        |L20.14|
;;;256    
                          ENDP


                          AREA ||i.comClearTxFifo||, CODE, READONLY, ALIGN=2

                  comClearTxFifo PROC
;;;211    */
;;;212    void comClearTxFifo(COM_PORT_E _ucPort)
000000  b570              PUSH     {r4-r6,lr}
;;;213    {
000002  4605              MOV      r5,r0
;;;214    	UART_T *pUart;
;;;215    
;;;216    	pUart = ComToUart(_ucPort);
000004  4628              MOV      r0,r5
000006  f7fffffe          BL       ComToUart
00000a  4604              MOV      r4,r0
;;;217    	if (pUart == 0)
00000c  b904              CBNZ     r4,|L21.16|
                  |L21.14|
;;;218    	{
;;;219    		return;
;;;220    	}
;;;221    
;;;222    	pUart->usTxWrite = 0;
;;;223    	pUart->usTxRead = 0;
;;;224    	pUart->usTxCount = 0;
;;;225    
;;;226    	pUart->usRxWrite = 0;
;;;227    	pUart->usRxRead = 0;
;;;228    	pUart->usRxCount = 0;
;;;229    
;;;230    	memset(g_tUart3.pRxBuf,0xAA,g_tUart3.usRxBufSize);
;;;231    	bsp_InitUartDma((uint32_t)g_tUart3.pRxBuf, g_tUart3.usRxBufSize);
;;;232    }
00000e  bd70              POP      {r4-r6,pc}
                  |L21.16|
000010  2000              MOVS     r0,#0                 ;222
000012  8220              STRH     r0,[r4,#0x10]         ;222
000014  8260              STRH     r0,[r4,#0x12]         ;223
000016  82a0              STRH     r0,[r4,#0x14]         ;224
000018  82e0              STRH     r0,[r4,#0x16]         ;226
00001a  8320              STRH     r0,[r4,#0x18]         ;227
00001c  8360              STRH     r0,[r4,#0x1a]         ;228
00001e  4a06              LDR      r2,|L21.56|
000020  89d1              LDRH     r1,[r2,#0xe]          ;230  ; g_tUart3
000022  6890              LDR      r0,[r2,#8]            ;230  ; g_tUart3
000024  22aa              MOVS     r2,#0xaa              ;230
000026  f7fffffe          BL       __aeabi_memset
00002a  4a03              LDR      r2,|L21.56|
00002c  89d1              LDRH     r1,[r2,#0xe]          ;231  ; g_tUart3
00002e  6890              LDR      r0,[r2,#8]            ;231  ; g_tUart3
000030  f7fffffe          BL       bsp_InitUartDma
000034  bf00              NOP      
000036  e7ea              B        |L21.14|
;;;233    
                          ENDP

                  |L21.56|
                          DCD      g_tUart3

                          AREA ||i.comGetChar||, CODE, READONLY, ALIGN=1

                  comGetChar PROC
;;;190    */
;;;191    uint8_t comGetChar(COM_PORT_E _ucPort, uint8_t *_pByte)
000000  b570              PUSH     {r4-r6,lr}
;;;192    {
000002  4605              MOV      r5,r0
000004  460e              MOV      r6,r1
;;;193    	UART_T *pUart;
;;;194    
;;;195    	pUart = ComToUart(_ucPort);
000006  4628              MOV      r0,r5
000008  f7fffffe          BL       ComToUart
00000c  4604              MOV      r4,r0
;;;196    	if (pUart == 0)
00000e  b90c              CBNZ     r4,|L22.20|
;;;197    	{
;;;198    		return 0;
000010  2000              MOVS     r0,#0
                  |L22.18|
;;;199    	}
;;;200    
;;;201    	return UartGetChar(pUart, _pByte);
;;;202    }
000012  bd70              POP      {r4-r6,pc}
                  |L22.20|
000014  4631              MOV      r1,r6                 ;201
000016  4620              MOV      r0,r4                 ;201
000018  f7fffffe          BL       UartGetChar
00001c  e7f9              B        |L22.18|
;;;203    
                          ENDP


                          AREA ||i.comSendBuf||, CODE, READONLY, ALIGN=1

                  comSendBuf PROC
;;;154    */
;;;155    void comSendBuf(COM_PORT_E _ucPort, uint8_t *_ucaBuf, uint16_t _usLen)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;156    {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4617              MOV      r7,r2
;;;157    	UART_T *pUart;
;;;158    
;;;159    	pUart = ComToUart(_ucPort);
00000a  4628              MOV      r0,r5
00000c  f7fffffe          BL       ComToUart
000010  4604              MOV      r4,r0
;;;160    	if (pUart == 0)
000012  b90c              CBNZ     r4,|L23.24|
                  |L23.20|
;;;161    	{
;;;162    		return;
;;;163    	}
;;;164      	
;;;165    	UartSend(pUart, _ucaBuf, _usLen);
;;;166    }
000014  e8bd81f0          POP      {r4-r8,pc}
                  |L23.24|
000018  463a              MOV      r2,r7                 ;165
00001a  4631              MOV      r1,r6                 ;165
00001c  4620              MOV      r0,r4                 ;165
00001e  f7fffffe          BL       UartSend
000022  bf00              NOP      
000024  e7f6              B        |L23.20|
;;;167    
                          ENDP


                          AREA ||i.comSendChar||, CODE, READONLY, ALIGN=1

                  comSendChar PROC
;;;176    */
;;;177    void comSendChar(COM_PORT_E _ucPort, uint8_t _ucByte)
000000  b513              PUSH     {r0,r1,r4,lr}
;;;178    {
000002  4604              MOV      r4,r0
;;;179    	comSendBuf(_ucPort, &_ucByte, 1);
000004  2201              MOVS     r2,#1
000006  a901              ADD      r1,sp,#4
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       comSendBuf
;;;180    }
00000e  bd1c              POP      {r2-r4,pc}
;;;181    
                          ENDP


                          AREA ||i.fgetc||, CODE, READONLY, ALIGN=1

                  fgetc PROC
;;;1148   */
;;;1149   int fgetc(FILE *f)
000000  b538              PUSH     {r3-r5,lr}
;;;1150   {
000002  4604              MOV      r4,r0
;;;1151   
;;;1152   #if 1	/* 从串口接收FIFO中取1个数据, 只有取到数据才返回 */
;;;1153   	uint8_t ucData;
;;;1154   
;;;1155   	while(comGetChar(COM1, &ucData) == 0);
000004  bf00              NOP      
                  |L25.6|
000006  4669              MOV      r1,sp
000008  2000              MOVS     r0,#0
00000a  f7fffffe          BL       comGetChar
00000e  2800              CMP      r0,#0
000010  d0f9              BEQ      |L25.6|
;;;1156   
;;;1157   	return ucData;
000012  f89d0000          LDRB     r0,[sp,#0]
;;;1158   #else
;;;1159   	/* 等待串口1输入数据 */
;;;1160   	while (USART_GetFlagStatus(USART1, USART_FLAG_RXNE) == RESET);
;;;1161   
;;;1162   	return (int)USART_ReceiveData(USART1);
;;;1163   #endif
;;;1164   }
000016  bd38              POP      {r3-r5,pc}
;;;1165   
                          ENDP


                          AREA ||i.fputc||, CODE, READONLY, ALIGN=1

                  fputc PROC
;;;1122   */
;;;1123   int fputc(int ch, FILE *f)
000000  b570              PUSH     {r4-r6,lr}
;;;1124   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;1125   #if 1	/* 将需要printf的字符通过串口中断FIFO发送出去，printf函数会立即返回 */
;;;1126   	comSendChar(COM1, ch);
000006  b2e1              UXTB     r1,r4
000008  2000              MOVS     r0,#0
00000a  f7fffffe          BL       comSendChar
;;;1127   
;;;1128   	return ch;
00000e  4620              MOV      r0,r4
;;;1129   #else	/* 采用阻塞方式发送每个字符,等待数据发送完毕 */
;;;1130   	/* 写一个字节到USART1 */
;;;1131   	USART_SendData(USART1, (uint8_t) ch);
;;;1132   
;;;1133   	/* 等待发送结束 */
;;;1134   	while (USART_GetFlagStatus(USART1, USART_FLAG_TC) == RESET)
;;;1135   	{}
;;;1136   
;;;1137   	return ch;
;;;1138   #endif
;;;1139   }
000010  bd70              POP      {r4-r6,pc}
;;;1140   
                          ENDP


                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  g_tUart1
                          %        40
                  g_TxBuf1
                          %        1024
                  g_RxBuf1
                          %        512
                  g_tUart3
                          %        40
                  g_TxBuf3
                          %        2048
                  g_RxBuf3
                          %        2048

;*** Start embedded assembler ***

#line 1 "..\\..\\User\\bsp\\src\\bsp_uart_fifo.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___15_bsp_uart_fifo_c_b28b0d00____REV16|
#line 114 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___15_bsp_uart_fifo_c_b28b0d00____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___15_bsp_uart_fifo_c_b28b0d00____REVSH|
#line 128
|__asm___15_bsp_uart_fifo_c_b28b0d00____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
