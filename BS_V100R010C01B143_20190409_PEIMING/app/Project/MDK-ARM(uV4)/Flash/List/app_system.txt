; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\flash\obj\app_system.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\app_system.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931,870 -I..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\User\bsp -I..\..\User\bsp\inc -I..\..\User -I..\..\Libraries\CMSIS\Include -I..\..\FreeRTOS\include -I..\..\FreeRTOS\portable\RVDS\ARM_CM3 -I..\..\MQTT -I..\..\Ethernet -I..\..\Ethernet\W5500 -I..\..\Internet\DHCP -I..\..\Internet\DNS -I..\..\User\app\src -I..\..\User\app\inc -I..\..\Internet\NTP -I..\..\Internet\HTTP -I.\RTE\_Flash -ID:\MDK5\ARM\CMSIS\5.0.1\CMSIS\Include -ID:\MDK5\Keil\STM32F1xx_DFP\2.0.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=523 -D_RTE_ -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=.\flash\obj\app_system.crf ..\..\User\app\src\app_system.c]
                          THUMB

                          AREA ||i.app_system_CheckID||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_flags
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_x
                          REQUIRE _printf_longlong_hex
                  app_system_CheckID PROC
;;;304    */
;;;305    void app_system_CheckID(void)
000000  b510              PUSH     {r4,lr}
;;;306    {
000002  b0a2              SUB      sp,sp,#0x88
;;;307    	uint8_t i = 0;
000004  2400              MOVS     r4,#0
;;;308    	char recebuf[100];
;;;309    	
;;;310    	/*读端口数据*/
;;;311    	while(comGetChar(COM1,(uint8_t *)&recebuf[i++]))
000006  e005              B        |L1.20|
                  |L1.8|
;;;312      {
;;;313    		i %= 100;
000008  2064              MOVS     r0,#0x64
00000a  fb94f1f0          SDIV     r1,r4,r0
00000e  fb004011          MLS      r0,r0,r1,r4
000012  b2c4              UXTB     r4,r0
                  |L1.20|
000014  4620              MOV      r0,r4                 ;311
000016  1c62              ADDS     r2,r4,#1              ;311
000018  b2d4              UXTB     r4,r2                 ;311
00001a  aa09              ADD      r2,sp,#0x24           ;311
00001c  1881              ADDS     r1,r0,r2              ;311
00001e  2000              MOVS     r0,#0                 ;311
000020  f7fffffe          BL       comGetChar
000024  2800              CMP      r0,#0                 ;311
000026  d1ef              BNE      |L1.8|
;;;314    	}
;;;315    	recebuf[i] = '\0';
000028  a909              ADD      r1,sp,#0x24
00002a  5508              STRB     r0,[r1,r4]
;;;316    	
;;;317    	if(NULL != strstr(recebuf,"ID=?"))
00002c  a11c              ADR      r1,|L1.160|
00002e  a809              ADD      r0,sp,#0x24
000030  f7fffffe          BL       strstr
000034  2800              CMP      r0,#0
000036  d031              BEQ      |L1.156|
;;;318    	{
;;;319    		if(sysCfg.parameter.register_flag == REGISTER)
000038  481b              LDR      r0,|L1.168|
00003a  f89000e0          LDRB     r0,[r0,#0xe0]  ; sysCfg
00003e  2801              CMP      r0,#1
000040  d12c              BNE      |L1.156|
;;;320    		{
;;;321    			printf("ID=0000%02X%02X%02X%02X%02X%02X:0000%02X%02X%02X%02X%02X%02X:\r\n",sysCfg.parameter.client_mac[0],
000042  4819              LDR      r0,|L1.168|
000044  f89000eb          LDRB     r0,[r0,#0xeb]
000048  4917              LDR      r1,|L1.168|
00004a  f89110ea          LDRB     r1,[r1,#0xea]
00004e  4a16              LDR      r2,|L1.168|
000050  f89220e9          LDRB     r2,[r2,#0xe9]
000054  4b14              LDR      r3,|L1.168|
000056  f89330e8          LDRB     r3,[r3,#0xe8]
00005a  e9cd3205          STRD     r3,r2,[sp,#0x14]
00005e  e9cd1007          STRD     r1,r0,[sp,#0x1c]
000062  4811              LDR      r0,|L1.168|
000064  f89000e7          LDRB     r0,[r0,#0xe7]
000068  490f              LDR      r1,|L1.168|
00006a  f89120e6          LDRB     r2,[r1,#0xe6]
00006e  f89110df          LDRB     r1,[r1,#0xdf]
000072  4b0d              LDR      r3,|L1.168|
000074  f89330de          LDRB     r3,[r3,#0xde]
000078  e9cd3101          STRD     r3,r1,[sp,#4]
00007c  e9cd2003          STRD     r2,r0,[sp,#0xc]
000080  4809              LDR      r0,|L1.168|
000082  f89000dd          LDRB     r0,[r0,#0xdd]
000086  9000              STR      r0,[sp,#0]
000088  4807              LDR      r0,|L1.168|
00008a  f89030dc          LDRB     r3,[r0,#0xdc]
00008e  f89020db          LDRB     r2,[r0,#0xdb]
000092  f89010da          LDRB     r1,[r0,#0xda]  ; sysCfg
000096  a005              ADR      r0,|L1.172|
000098  f7fffffe          BL       __2printf
                  |L1.156|
;;;322    			sysCfg.parameter.client_mac[1],sysCfg.parameter.client_mac[2],sysCfg.parameter.client_mac[3],sysCfg.parameter.client_mac[4],
;;;323    			sysCfg.parameter.client_mac[5],sysCfg.parameter.nrfstation[2],sysCfg.parameter.nrfstation[3],sysCfg.parameter.nrfstation[4],
;;;324    			sysCfg.parameter.nrfstation[5],sysCfg.parameter.nrfstation[6],sysCfg.parameter.nrfstation[7]);
;;;325    		}
;;;326    	}
;;;327    }
00009c  b022              ADD      sp,sp,#0x88
00009e  bd10              POP      {r4,pc}
;;;328    
                          ENDP

                  |L1.160|
0000a0  49443d3f          DCB      "ID=?",0
0000a4  00      
0000a5  00                DCB      0
0000a6  00                DCB      0
0000a7  00                DCB      0
                  |L1.168|
                          DCD      sysCfg
                  |L1.172|
0000ac  49443d30          DCB      "ID=0000%02X%02X%02X%02X%02X%02X:0000%02X%02X%02X%02X%02"
0000b0  30303025
0000b4  30325825
0000b8  30325825
0000bc  30325825
0000c0  30325825
0000c4  30325825
0000c8  3032583a
0000cc  30303030
0000d0  25303258
0000d4  25303258
0000d8  25303258
0000dc  25303258
0000e0  253032  
0000e3  58253032          DCB      "X%02X:\r\n",0
0000e7  583a0d0a
0000eb  00      

                          AREA ||i.app_system_LedOn||, CODE, READONLY, ALIGN=2

                  app_system_LedOn PROC
;;;34      */
;;;35     void app_system_LedOn(void)
000000  b510              PUSH     {r4,lr}
;;;36     {	
;;;37     	if(sysCfg.parameter.data_socket == SOCK_TCPS)
000002  4809              LDR      r0,|L2.40|
000004  f89000c0          LDRB     r0,[r0,#0xc0]  ; sysCfg
000008  b930              CBNZ     r0,|L2.24|
;;;38     	{
;;;39     		bsp_LedOff(3);	
00000a  2003              MOVS     r0,#3
00000c  f7fffffe          BL       bsp_LedOff
;;;40     		bsp_LedOn(2);				
000010  2002              MOVS     r0,#2
000012  f7fffffe          BL       bsp_LedOn
000016  e005              B        |L2.36|
                  |L2.24|
;;;41     	}
;;;42     	else
;;;43     	{
;;;44     		bsp_LedOff(2);	
000018  2002              MOVS     r0,#2
00001a  f7fffffe          BL       bsp_LedOff
;;;45     		bsp_LedOn(3);	
00001e  2003              MOVS     r0,#3
000020  f7fffffe          BL       bsp_LedOn
                  |L2.36|
;;;46     	}	
;;;47     }
000024  bd10              POP      {r4,pc}
;;;48     
                          ENDP

000026  0000              DCW      0x0000
                  |L2.40|
                          DCD      sysCfg

                          AREA ||i.app_system_MqttConnect||, CODE, READONLY, ALIGN=2

                  app_system_MqttConnect PROC
;;;205    */
;;;206    void app_system_MqttConnect(uint8_t socket)
000000  b538              PUSH     {r3-r5,lr}
;;;207    {
000002  4604              MOV      r4,r0
;;;208    	int rc = 0;
000004  2500              MOVS     r5,#0
;;;209    
;;;210    	if(sysCfg.parameter.dhcp == NETINFO_STATIC)
000006  4823              LDR      r0,|L3.148|
000008  f8900059          LDRB     r0,[r0,#0x59]  ; sysCfg
00000c  2801              CMP      r0,#1
00000e  d102              BNE      |L3.22|
;;;211    	{
;;;212    		rc = DHCP_IP_LEASED;
000010  2504              MOVS     r5,#4
;;;213    		set_netparm();
000012  f7fffffe          BL       set_netparm
                  |L3.22|
;;;214    	}
;;;215    	
;;;216    	while(rc!=DHCP_IP_LEASED)
000016  e008              B        |L3.42|
                  |L3.24|
;;;217    	{
;;;218    		#if APP_DEBUG
;;;219    		printf("DHCP_run.\r\n");
;;;220    		#endif
;;;221    		IWDG_Feed();  /*喂狗*/
000018  f7fffffe          BL       IWDG_Feed
;;;222    		vTaskDelay(2000); 
00001c  f44f60fa          MOV      r0,#0x7d0
000020  f7fffffe          BL       vTaskDelay
;;;223    		rc = DHCP_run();			
000024  f7fffffe          BL       DHCP_run
000028  4605              MOV      r5,r0
                  |L3.42|
00002a  2d04              CMP      r5,#4                 ;216
00002c  d1f4              BNE      |L3.24|
;;;224    	}
;;;225    
;;;226    	transport_close(socket);   //关闭端口
00002e  4620              MOV      r0,r4
000030  f7fffffe          BL       transport_close
;;;227    	
;;;228    	#if APP_DEBUG
;;;229    	printf("close socket:%d\r\n",socket);
;;;230    	#endif 
;;;231    
;;;232    	if(socket == SOCK_TCPS)      /*连接主服务器*/
000034  b9bc              CBNZ     r4,|L3.102|
;;;233    	{
;;;234    		if(0 != mqtt_connect(SOCK_TCPS,default_server_ip, SERVER_PORT, (char *)default_server_user , (char *)default_server_pass )) //连接服务器	
000036  4818              LDR      r0,|L3.152|
000038  4b18              LDR      r3,|L3.156|
00003a  f240725b          MOV      r2,#0x75b
00003e  4918              LDR      r1,|L3.160|
000040  9000              STR      r0,[sp,#0]
000042  2000              MOVS     r0,#0
000044  f7fffffe          BL       mqtt_connect
000048  b310              CBZ      r0,|L3.144|
;;;235    		{
;;;236    			vTaskDelay(3000);
00004a  f64030b8          MOV      r0,#0xbb8
00004e  f7fffffe          BL       vTaskDelay
;;;237    			app_system_TcpsStart();		
000052  f7fffffe          BL       app_system_TcpsStart
;;;238    			if(sysCfg.parameter.data_socket == SOCK_TCPS)
000056  480f              LDR      r0,|L3.148|
000058  f89000c0          LDRB     r0,[r0,#0xc0]  ; sysCfg
00005c  b9c0              CBNZ     r0,|L3.144|
;;;239    			{
;;;240    				app_system_Subscrib(SOCK_TCPS);
00005e  2000              MOVS     r0,#0
000060  f7fffffe          BL       app_system_Subscrib
000064  e014              B        |L3.144|
                  |L3.102|
;;;241    			}
;;;242    		}
;;;243    	}
;;;244    	else if(socket == SOCK_TCP) /*连接第三方服务器*/
000066  2c01              CMP      r4,#1
000068  d112              BNE      |L3.144|
;;;245    	{
;;;246    		if(0 != mqtt_connect(SOCK_TCP, sysCfg.parameter.server_ip, sysCfg.parameter.server_port, (char *)sysCfg.parameter.server_user , (char *)sysCfg.parameter.server_pass ))
00006a  480a              LDR      r0,|L3.148|
00006c  3018              ADDS     r0,r0,#0x18
00006e  9000              STR      r0,[sp,#0]
000070  3818              SUBS     r0,r0,#0x18
000072  f8b0204a          LDRH     r2,[r0,#0x4a]  ; sysCfg
000076  1d03              ADDS     r3,r0,#4
000078  4601              MOV      r1,r0
00007a  2001              MOVS     r0,#1
00007c  f7fffffe          BL       mqtt_connect
000080  b130              CBZ      r0,|L3.144|
;;;247    		{
;;;248    			vTaskDelay(1000);	
000082  f44f707a          MOV      r0,#0x3e8
000086  f7fffffe          BL       vTaskDelay
;;;249    			app_system_Subscrib(SOCK_TCP);
00008a  2001              MOVS     r0,#1
00008c  f7fffffe          BL       app_system_Subscrib
                  |L3.144|
;;;250    		}
;;;251    	}
;;;252    }
000090  bd38              POP      {r3-r5,pc}
;;;253    
                          ENDP

000092  0000              DCW      0x0000
                  |L3.148|
                          DCD      sysCfg
                  |L3.152|
                          DCD      default_server_pass
                  |L3.156|
                          DCD      default_server_user
                  |L3.160|
                          DCD      default_server_ip

                          AREA ||i.app_system_NetLedToggle||, CODE, READONLY, ALIGN=2

                  app_system_NetLedToggle PROC
;;;10      */
;;;11     void app_system_NetLedToggle(void)
000000  b510              PUSH     {r4,lr}
;;;12     {
;;;13     	if(sysCfg.parameter.data_socket == SOCK_TCPS)
000002  480c              LDR      r0,|L4.52|
000004  f89000c0          LDRB     r0,[r0,#0xc0]  ; sysCfg
000008  b948              CBNZ     r0,|L4.30|
;;;14     	{
;;;15     		bsp_LedOff(3);
00000a  2003              MOVS     r0,#3
00000c  f7fffffe          BL       bsp_LedOff
;;;16     		bsp_LedOff(4);
000010  2004              MOVS     r0,#4
000012  f7fffffe          BL       bsp_LedOff
;;;17     		bsp_LedToggle(2);				
000016  2002              MOVS     r0,#2
000018  f7fffffe          BL       bsp_LedToggle
00001c  e008              B        |L4.48|
                  |L4.30|
;;;18     	}
;;;19     	else
;;;20     	{
;;;21         bsp_LedOff(2);	
00001e  2002              MOVS     r0,#2
000020  f7fffffe          BL       bsp_LedOff
;;;22     		bsp_LedOff(4);
000024  2004              MOVS     r0,#4
000026  f7fffffe          BL       bsp_LedOff
;;;23     		bsp_LedToggle(3);	
00002a  2003              MOVS     r0,#3
00002c  f7fffffe          BL       bsp_LedToggle
                  |L4.48|
;;;24     	}
;;;25     }
000030  bd10              POP      {r4,pc}
;;;26     
                          ENDP

000032  0000              DCW      0x0000
                  |L4.52|
                          DCD      sysCfg

                          AREA ||i.app_system_NetPublic||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_flags
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_x
                          REQUIRE _printf_longlong_hex
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_s
                          REQUIRE _printf_str
                  app_system_NetPublic PROC
;;;56      */
;;;57     void app_system_NetPublic(void)
000000  b570              PUSH     {r4-r6,lr}
;;;58     {
000002  f5ad7d34          SUB      sp,sp,#0x2d0
;;;59     	uint8_t mac[6];
;;;60     	uint8_t cip[4];
;;;61     	uint8_t sip[4];
;;;62     	uint8_t nrf[6];
;;;63       uint8_t startstatus = 0;
000006  2400              MOVS     r4,#0
;;;64     	
;;;65     	char dev[30] = {0};
000008  2120              MOVS     r1,#0x20
00000a  a8a6              ADD      r0,sp,#0x298
00000c  f7fffffe          BL       __aeabi_memclr4
;;;66     	char ble[30] = {0};
000010  2120              MOVS     r1,#0x20
000012  a89e              ADD      r0,sp,#0x278
000014  f7fffffe          BL       __aeabi_memclr4
;;;67     	char link[30] = {0};
000018  2120              MOVS     r1,#0x20
00001a  a896              ADD      r0,sp,#0x258
00001c  f7fffffe          BL       __aeabi_memclr4
;;;68     	char netparm[500] = {0};
000020  f44f71fa          MOV      r1,#0x1f4
000024  a819              ADD      r0,sp,#0x64
000026  f7fffffe          BL       __aeabi_memclr4
;;;69     	//char *state[6] = {"UNRST","PORRST","SFTRST","IWDGRS","WWDGRS","LPWRRSTF"};
;;;70     	char *state[6] = {"unrst","porrst","sftrst","iwdrst","wwdrst","lpwrst"};
00002a  2218              MOVS     r2,#0x18
00002c  4953              LDR      r1,|L5.380|
00002e  a813              ADD      r0,sp,#0x4c
000030  f7fffffe          BL       __aeabi_memcpy4
;;;71     	
;;;72     	uint32_t CSR = RCC->CSR;
000034  4852              LDR      r0,|L5.384|
000036  6a45              LDR      r5,[r0,#0x24]
;;;73     	uint32_t reset_state[5] = {PORRSTF_MASK,SFTRST_MASK,IWDGRST_MASK,WWDGRST_MASK,LPWRRSTF_MASK};
000038  2214              MOVS     r2,#0x14
00003a  4950              LDR      r1,|L5.380|
00003c  3118              ADDS     r1,r1,#0x18
00003e  a80e              ADD      r0,sp,#0x38
000040  f7fffffe          BL       __aeabi_memcpy4
;;;74     		
;;;75       /*startstatus: 1：电源复位 2：软件复位 3：独立看门狗复位 4：窗口看门狗复位 5：低功耗复位*/	
;;;76     	for(uint8_t i = 0; i < 5; i++)
000044  2000              MOVS     r0,#0
000046  e009              B        |L5.92|
                  |L5.72|
;;;77     	{
;;;78     		if(CSR & reset_state[i])
000048  a90e              ADD      r1,sp,#0x38
00004a  f8511020          LDR      r1,[r1,r0,LSL #2]
00004e  4029              ANDS     r1,r1,r5
000050  b111              CBZ      r1,|L5.88|
;;;79     		{
;;;80     			startstatus = i + 1;
000052  1c41              ADDS     r1,r0,#1
000054  b2cc              UXTB     r4,r1
;;;81     			break;
000056  e003              B        |L5.96|
                  |L5.88|
000058  1c41              ADDS     r1,r0,#1              ;76
00005a  b2c8              UXTB     r0,r1                 ;76
                  |L5.92|
00005c  2805              CMP      r0,#5                 ;76
00005e  dbf3              BLT      |L5.72|
                  |L5.96|
000060  bf00              NOP      
;;;82     		}
;;;83     	}
;;;84       
;;;85     	#if APP_DEBUG
;;;86     	printf("startstatus:%s\r\n",state[startstatus]);
;;;87     	#endif
;;;88     	
;;;89     	RCC_ClearFlag();
000062  f7fffffe          BL       RCC_ClearFlag
;;;90     	
;;;91     	memcpy(sip,sysCfg.parameter.server_ip,4);  
000066  4847              LDR      r0,|L5.388|
000068  6800              LDR      r0,[r0,#0]  ; sysCfg
00006a  90b0              STR      r0,[sp,#0x2c0]
;;;92     	memcpy(cip,sysCfg.parameter.client_ip,4);  
00006c  4845              LDR      r0,|L5.388|
00006e  f8d000c4          LDR      r0,[r0,#0xc4]  ; sysCfg
000072  90b1              STR      r0,[sp,#0x2c4]
;;;93     	memcpy(mac,sysCfg.parameter.client_mac,6); 
000074  4843              LDR      r0,|L5.388|
000076  30da              ADDS     r0,r0,#0xda
000078  6801              LDR      r1,[r0,#0]  ; sysCfg
00007a  91b2              STR      r1,[sp,#0x2c8]
00007c  8880              LDRH     r0,[r0,#4]  ; sysCfg
00007e  f8ad02cc          STRH     r0,[sp,#0x2cc]
;;;94     	memcpy(nrf,&sysCfg.parameter.nrfstation[2],6);
000082  4840              LDR      r0,|L5.388|
000084  30e6              ADDS     r0,r0,#0xe6
000086  6801              LDR      r1,[r0,#0]
000088  91ae              STR      r1,[sp,#0x2b8]
00008a  8880              LDRH     r0,[r0,#4]
00008c  f8ad02bc          STRH     r0,[sp,#0x2bc]
;;;95     	
;;;96     	sprintf(dev,"0000%02x%02x%02x%02x%02x%02x",mac[0],mac[1],mac[2],mac[3],mac[4],mac[5]);
000090  f89d02cd          LDRB     r0,[sp,#0x2cd]
000094  f89d12cc          LDRB     r1,[sp,#0x2cc]
000098  f89d22cb          LDRB     r2,[sp,#0x2cb]
00009c  f89d32ca          LDRB     r3,[sp,#0x2ca]
0000a0  e9cd3200          STRD     r3,r2,[sp,#0]
0000a4  e9cd1002          STRD     r1,r0,[sp,#8]
0000a8  f89d32c9          LDRB     r3,[sp,#0x2c9]
0000ac  f89d22c8          LDRB     r2,[sp,#0x2c8]
0000b0  a135              ADR      r1,|L5.392|
0000b2  a8a6              ADD      r0,sp,#0x298
0000b4  f7fffffe          BL       __2sprintf
;;;97     	sprintf(ble,"0000%02x%02x%02x%02x%02x%02x",nrf[0],nrf[1],nrf[2],nrf[3],nrf[4],nrf[5]);
0000b8  f89d12bd          LDRB     r1,[sp,#0x2bd]
0000bc  f89d22bc          LDRB     r2,[sp,#0x2bc]
0000c0  f89d02bb          LDRB     r0,[sp,#0x2bb]
0000c4  f89d32ba          LDRB     r3,[sp,#0x2ba]
0000c8  e9cd3000          STRD     r3,r0,[sp,#0]
0000cc  e9cd2102          STRD     r2,r1,[sp,#8]
0000d0  f89d32b9          LDRB     r3,[sp,#0x2b9]
0000d4  f89d22b8          LDRB     r2,[sp,#0x2b8]
0000d8  a12b              ADR      r1,|L5.392|
0000da  a89e              ADD      r0,sp,#0x278
0000dc  f7fffffe          BL       __2sprintf
;;;98     	sprintf(link,"%d.%d.%d.%d:%d",sip[0],sip[1],sip[2],sip[3],sysCfg.parameter.server_port);
0000e0  4828              LDR      r0,|L5.388|
0000e2  f8b0104a          LDRH     r1,[r0,#0x4a]  ; sysCfg
0000e6  f89d02c3          LDRB     r0,[sp,#0x2c3]
0000ea  f89d22c2          LDRB     r2,[sp,#0x2c2]
0000ee  e9cd2000          STRD     r2,r0,[sp,#0]
0000f2  9102              STR      r1,[sp,#8]
0000f4  f89d32c1          LDRB     r3,[sp,#0x2c1]
0000f8  f89d22c0          LDRB     r2,[sp,#0x2c0]
0000fc  a12a              ADR      r1,|L5.424|
0000fe  a896              ADD      r0,sp,#0x258
000100  f7fffffe          BL       __2sprintf
;;;99     	
;;;100    	sprintf(netparm,"{\"gid\":\"%s\",\"bid\":\"%s\",\"cip\":\"%d.%d.%d.%d\",\"mac\":\"%02X:%02X:%02X:%02X:%02X:%02X\",\"connect\":\"%s\",\"sver\":\"%s\",\"hver\":\"%s\",\"sta\":\"%s\"}",
000104  a813              ADD      r0,sp,#0x4c
000106  f8500024          LDR      r0,[r0,r4,LSL #2]
00010a  a12b              ADR      r1,|L5.440|
00010c  a22d              ADR      r2,|L5.452|
00010e  ab96              ADD      r3,sp,#0x258
000110  e9cd320a          STRD     r3,r2,[sp,#0x28]
000114  e9cd100c          STRD     r1,r0,[sp,#0x30]
000118  f89d12cd          LDRB     r1,[sp,#0x2cd]
00011c  f89d22cc          LDRB     r2,[sp,#0x2cc]
000120  f89d02cb          LDRB     r0,[sp,#0x2cb]
000124  f89d32ca          LDRB     r3,[sp,#0x2ca]
000128  e9cd3006          STRD     r3,r0,[sp,#0x18]
00012c  e9cd2108          STRD     r2,r1,[sp,#0x20]
000130  f89d02c9          LDRB     r0,[sp,#0x2c9]
000134  f89d22c8          LDRB     r2,[sp,#0x2c8]
000138  f89d12c7          LDRB     r1,[sp,#0x2c7]
00013c  f89d32c6          LDRB     r3,[sp,#0x2c6]
000140  e9cd3102          STRD     r3,r1,[sp,#8]
000144  e9cd2004          STRD     r2,r0,[sp,#0x10]
000148  f89d02c5          LDRB     r0,[sp,#0x2c5]
00014c  f89d12c4          LDRB     r1,[sp,#0x2c4]
000150  ab9e              ADD      r3,sp,#0x278
000152  aaa6              ADD      r2,sp,#0x298
000154  e9cd1000          STRD     r1,r0,[sp,#0]
000158  4920              LDR      r1,|L5.476|
00015a  a819              ADD      r0,sp,#0x64
00015c  f7fffffe          BL       __2sprintf
;;;101    	dev,ble,cip[0],cip[1],cip[2],cip[3],mac[0],mac[1],mac[2],mac[3],mac[4],mac[5],link,SOFTWARE_VERSION,HARDWARE_VERSION,state[startstatus]);
;;;102    		
;;;103    	//printf("%s\r\n",netparm);	
;;;104    	
;;;105    	mqtt_publish(SOCK_TCPS,SOFTVERSION_TOPIC,netparm,strlen(netparm));//上报版本号-
000160  a819              ADD      r0,sp,#0x64
000162  f7fffffe          BL       strlen
000166  4606              MOV      r6,r0
000168  4633              MOV      r3,r6
00016a  aa19              ADD      r2,sp,#0x64
00016c  a11c              ADR      r1,|L5.480|
00016e  2000              MOVS     r0,#0
000170  f7fffffe          BL       mqtt_publish
;;;106    }
000174  f50d7d34          ADD      sp,sp,#0x2d0
000178  bd70              POP      {r4-r6,pc}
;;;107    
                          ENDP

00017a  0000              DCW      0x0000
                  |L5.380|
                          DCD      ||.constdata||+0x200
                  |L5.384|
                          DCD      0x40021000
                  |L5.388|
                          DCD      sysCfg
                  |L5.392|
000188  30303030          DCB      "0000%02x%02x%02x%02x%02x%02x",0
00018c  25303278
000190  25303278
000194  25303278
000198  25303278
00019c  25303278
0001a0  25303278
0001a4  00      
0001a5  00                DCB      0
0001a6  00                DCB      0
0001a7  00                DCB      0
                  |L5.424|
0001a8  25642e25          DCB      "%d.%d.%d.%d:%d",0
0001ac  642e2564
0001b0  2e25643a
0001b4  256400  
0001b7  00                DCB      0
                  |L5.440|
0001b8  4d434252          DCB      "MCBR02_V1.7",0
0001bc  30325f56
0001c0  312e3700
                  |L5.452|
0001c4  42535f56          DCB      "BS_V100R010C01B143_0409",0
0001c8  31303052
0001cc  30313043
0001d0  30314231
0001d4  34335f30
0001d8  34303900
                  |L5.476|
                          DCD      ||.conststring||+0x30
                  |L5.480|
0001e0  2f6a736f          DCB      "/json/iot_gateway/version/report",0
0001e4  6e2f696f
0001e8  745f6761
0001ec  74657761
0001f0  792f7665
0001f4  7273696f
0001f8  6e2f7265
0001fc  706f7274
000200  00      
000201  00                DCB      0
000202  00                DCB      0
000203  00                DCB      0

                          AREA ||i.app_system_Start||, CODE, READONLY, ALIGN=2

                  app_system_Start PROC
;;;336    */
;;;337    void app_system_Start(void)
000000  b508              PUSH     {r3,lr}
;;;338    {
;;;339    	/*连接主服务器*/
;;;340    	if(0 != mqtt_connect(SOCK_TCPS,default_server_ip, SERVER_PORT, (char *)default_server_user , (char *)default_server_pass)) //连接服务器	
000002  4818              LDR      r0,|L6.100|
000004  4b18              LDR      r3,|L6.104|
000006  f240725b          MOV      r2,#0x75b
00000a  4918              LDR      r1,|L6.108|
00000c  9000              STR      r0,[sp,#0]
00000e  2000              MOVS     r0,#0
000010  f7fffffe          BL       mqtt_connect
000014  b168              CBZ      r0,|L6.50|
;;;341    	{
;;;342    		vTaskDelay(1000);
000016  f44f707a          MOV      r0,#0x3e8
00001a  f7fffffe          BL       vTaskDelay
;;;343    		app_system_TcpsStart();
00001e  f7fffffe          BL       app_system_TcpsStart
;;;344    		
;;;345    		if(sysCfg.parameter.data_socket == SOCK_TCPS)
000022  4813              LDR      r0,|L6.112|
000024  f89000c0          LDRB     r0,[r0,#0xc0]  ; sysCfg
000028  b918              CBNZ     r0,|L6.50|
;;;346    		{
;;;347    			app_system_Subscrib(SOCK_TCPS);
00002a  2000              MOVS     r0,#0
00002c  f7fffffe          BL       app_system_Subscrib
                  |L6.48|
;;;348    			return;
;;;349    		}
;;;350    	}
;;;351    	
;;;352    	/*连接第三方服务器，订阅主题*/
;;;353    	vTaskDelay(1000);
;;;354    	if(0 != mqtt_connect(SOCK_TCP, sysCfg.parameter.server_ip, sysCfg.parameter.server_port, (char *)sysCfg.parameter.server_user , (char *)sysCfg.parameter.server_pass))
;;;355    	{
;;;356    		vTaskDelay(1000);	
;;;357    		app_system_Subscrib(SOCK_TCP);
;;;358    	}
;;;359    }
000030  bd08              POP      {r3,pc}
                  |L6.50|
000032  f44f707a          MOV      r0,#0x3e8             ;353
000036  f7fffffe          BL       vTaskDelay
00003a  480d              LDR      r0,|L6.112|
00003c  3018              ADDS     r0,r0,#0x18           ;354
00003e  9000              STR      r0,[sp,#0]            ;354
000040  3818              SUBS     r0,r0,#0x18           ;354
000042  f8b0204a          LDRH     r2,[r0,#0x4a]         ;354  ; sysCfg
000046  1d03              ADDS     r3,r0,#4              ;354
000048  4601              MOV      r1,r0                 ;354
00004a  2001              MOVS     r0,#1                 ;354
00004c  f7fffffe          BL       mqtt_connect
000050  b130              CBZ      r0,|L6.96|
000052  f44f707a          MOV      r0,#0x3e8             ;356
000056  f7fffffe          BL       vTaskDelay
00005a  2001              MOVS     r0,#1                 ;357
00005c  f7fffffe          BL       app_system_Subscrib
                  |L6.96|
000060  bf00              NOP      
000062  e7e5              B        |L6.48|
;;;360    
                          ENDP

                  |L6.100|
                          DCD      default_server_pass
                  |L6.104|
                          DCD      default_server_user
                  |L6.108|
                          DCD      default_server_ip
                  |L6.112|
                          DCD      sysCfg

                          AREA ||i.app_system_Subscrib||, CODE, READONLY, ALIGN=2

                  app_system_Subscrib PROC
;;;178    */
;;;179    void static app_system_Subscrib(uint8_t socket)
000000  b510              PUSH     {r4,lr}
;;;180    {
000002  4604              MOV      r4,r0
;;;181    	/*消息主题*/
;;;182    	if(0 != mqtt_subscrib(socket,sms_topic)) 
000004  4904              LDR      r1,|L7.24|
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       mqtt_subscrib
;;;183    	{
;;;184    		#if APP_DEBUG
;;;185    		printf("subscrib topic:%s\r\n",sms_topic);
;;;186    		#endif
;;;187    	}	
;;;188    	
;;;189    	/*用户信息设置*/
;;;190    	if(0 != mqtt_subscrib(socket,userinfo_topic))      
00000c  4903              LDR      r1,|L7.28|
00000e  4620              MOV      r0,r4
000010  f7fffffe          BL       mqtt_subscrib
;;;191    	{
;;;192    		#if APP_DEBUG
;;;193    		printf("subscrib topic:%s\r\n",userinfo_topic);
;;;194     		#endif  
;;;195    	}	
;;;196    }
000014  bd10              POP      {r4,pc}
;;;197    
                          ENDP

000016  0000              DCW      0x0000
                  |L7.24|
                          DCD      sms_topic
                  |L7.28|
                          DCD      userinfo_topic

                          AREA ||i.app_system_TcpsStart||, CODE, READONLY, ALIGN=2

                  app_system_TcpsStart PROC
;;;115     */
;;;116    void static app_system_TcpsStart(void)
000000  b510              PUSH     {r4,lr}
;;;117    {
;;;118    	/*蓝牙升级主题*/
;;;119    	if(0 != mqtt_subscrib(SOCK_TCPS,bleupdata_topic))      
000002  490a              LDR      r1,|L8.44|
000004  2000              MOVS     r0,#0
000006  f7fffffe          BL       mqtt_subscrib
;;;120    	{
;;;121    		#if APP_DEBUG
;;;122    		printf("subscrib topic:%s\r\n",bleupdata_topic);
;;;123     		#endif  
;;;124    	}	
;;;125    	
;;;126    	/*主控升级主题*/
;;;127    	if(0 != mqtt_subscrib(SOCK_TCPS,gateupdata_topic))      
00000a  4909              LDR      r1,|L8.48|
00000c  2000              MOVS     r0,#0
00000e  f7fffffe          BL       mqtt_subscrib
;;;128    	{
;;;129    		#if APP_DEBUG
;;;130    		printf("subscrib topic:%s\r\n",gateupdata_topic);
;;;131     		#endif  
;;;132    	}	
;;;133    	
;;;134    	/*蓝牙手环升级主题*/
;;;135    	if(0 != mqtt_subscrib(SOCK_TCPS,bracelet_topic))      
000012  4908              LDR      r1,|L8.52|
000014  2000              MOVS     r0,#0
000016  f7fffffe          BL       mqtt_subscrib
;;;136    	{
;;;137    		#if APP_DEBUG
;;;138    		printf("subscrib topic:%s\r\n",bracelet_topic);
;;;139     		#endif  
;;;140    	}	
;;;141    			
;;;142    	/*配置设备信息主题*/
;;;143    	if(0 != mqtt_subscrib(SOCK_TCPS,devcfgpara_topic))      
00001a  4907              LDR      r1,|L8.56|
00001c  2000              MOVS     r0,#0
00001e  f7fffffe          BL       mqtt_subscrib
;;;144    	{
;;;145    		#if APP_DEBUG
;;;146    		printf("subscrib topic:%s\r\n",devcfgpara_topic);
;;;147     		#endif  
;;;148    	}	
;;;149    			
;;;150    	/*考勤信标管理主题*/
;;;151    //	if(0 != mqtt_subscrib(SOCK_TCPS,beaconmanagement_topic))   
;;;152    //	{
;;;153    //		#if APP_DEBUG
;;;154    //		printf("subscrib topic:%s\r\n",beaconmanagement_topic);
;;;155    //		#endif
;;;156    //	}
;;;157    
;;;158    	/*网关重启主题*/
;;;159    	if(0 != mqtt_subscrib(SOCK_TCPS,gatereset_topic))      
000022  4906              LDR      r1,|L8.60|
000024  2000              MOVS     r0,#0
000026  f7fffffe          BL       mqtt_subscrib
;;;160    	{
;;;161    		#if APP_DEBUG
;;;162    		printf("subscrib topic:%s\r\n",devcfgpara_topic);
;;;163     		#endif  
;;;164    	}	
;;;165    	
;;;166    	#ifdef MCBR03
;;;167    	app_plat_SHTDataPublish();  /*上报温湿度数据*/
;;;168    	#endif
;;;169    }
00002a  bd10              POP      {r4,pc}
;;;170    
                          ENDP

                  |L8.44|
                          DCD      bleupdata_topic
                  |L8.48|
                          DCD      gateupdata_topic
                  |L8.52|
                          DCD      bracelet_topic
                  |L8.56|
                          DCD      devcfgpara_topic
                  |L8.60|
                          DCD      gatereset_topic

                          AREA ||i.app_system_UpdataBle||, CODE, READONLY, ALIGN=1

                  app_system_UpdataBle PROC
;;;261    */
;;;262    void app_system_UpdataBle(void)
000000  b530              PUSH     {r4,r5,lr}
;;;263    {
000002  f2ad5d1c          SUB      sp,sp,#0x51c
;;;264    	uint16_t len = 0;
000006  2500              MOVS     r5,#0
;;;265    	uint8_t  byte = 0;
000008  2000              MOVS     r0,#0
00000a  f8cd0518          STR      r0,[sp,#0x518]
;;;266    	uint8_t  recbleacklen = 0;
00000e  2400              MOVS     r4,#0
;;;267    	
;;;268      uint8_t  buf[1200] = {0};               /*升级蓝牙数据缓冲*/
000010  f44f6196          MOV      r1,#0x4b0
000014  a81a              ADD      r0,sp,#0x68
000016  f7fffffe          BL       __aeabi_memclr4
;;;269    	uint8_t  recbleackbuf[100] = {0};       /*升级蓝牙数据回执*/
00001a  2164              MOVS     r1,#0x64
00001c  a801              ADD      r0,sp,#4
00001e  f7fffffe          BL       __aeabi_memclr4
;;;270    	
;;;271    	if((len = getSn_RX_RSR(SOCK_BLE)) > 0)
000022  2002              MOVS     r0,#2
000024  f7fffffe          BL       getSn_RX_RSR
000028  1e05              SUBS     r5,r0,#0
00002a  dd28              BLE      |L9.126|
;;;272    	{
;;;273    		recv(SOCK_BLE,buf,len);
00002c  462a              MOV      r2,r5
00002e  a91a              ADD      r1,sp,#0x68
000030  2002              MOVS     r0,#2
000032  f7fffffe          BL       recv
;;;274    						
;;;275    		while(comGetChar(NRF_PORT,&byte));  
000036  bf00              NOP      
                  |L9.56|
000038  f50d61a3          ADD      r1,sp,#0x518
00003c  2002              MOVS     r0,#2
00003e  f7fffffe          BL       comGetChar
000042  2800              CMP      r0,#0
000044  d1f8              BNE      |L9.56|
;;;276    		comSendBuf(NRF_PORT,buf,len);
000046  462a              MOV      r2,r5
000048  a91a              ADD      r1,sp,#0x68
00004a  2002              MOVS     r0,#2
00004c  f7fffffe          BL       comSendBuf
;;;277    		
;;;278    		vTaskDelay(1000);
000050  f44f707a          MOV      r0,#0x3e8
000054  f7fffffe          BL       vTaskDelay
;;;279    		
;;;280    		while(comGetChar(NRF_PORT,&recbleackbuf[recbleacklen++]));
000058  bf00              NOP      
                  |L9.90|
00005a  4620              MOV      r0,r4
00005c  1c62              ADDS     r2,r4,#1
00005e  b2d4              UXTB     r4,r2
000060  aa01              ADD      r2,sp,#4
000062  1881              ADDS     r1,r0,r2
000064  2002              MOVS     r0,#2
000066  f7fffffe          BL       comGetChar
00006a  2800              CMP      r0,#0
00006c  d1f5              BNE      |L9.90|
;;;281    		
;;;282    		#if 0
;;;283    		printf("len:%d  ",len);
;;;284    	  for(uint8_t i = 0; i < recbleacklen - 1; i++)
;;;285    		{
;;;286    				printf("%02x ",recbleackbuf[i]);
;;;287    		}
;;;288    		printf("\r\n");
;;;289    		#endif
;;;290    		
;;;291    		if(recbleacklen > 1)
00006e  2c01              CMP      r4,#1
000070  dd05              BLE      |L9.126|
;;;292    		{
;;;293    			send(SOCK_BLE,recbleackbuf,recbleacklen-1);
000072  1e60              SUBS     r0,r4,#1
000074  b282              UXTH     r2,r0
000076  a901              ADD      r1,sp,#4
000078  2002              MOVS     r0,#2
00007a  f7fffffe          BL       send
                  |L9.126|
;;;294    		}
;;;295    	}
;;;296    }
00007e  f20d5d1c          ADD      sp,sp,#0x51c
000082  bd30              POP      {r4,r5,pc}
;;;297    /*
                          ENDP


                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  aucCRCHi
000000  00c18140          DCB      0x00,0xc1,0x81,0x40
000004  01c08041          DCB      0x01,0xc0,0x80,0x41
000008  01c08041          DCB      0x01,0xc0,0x80,0x41
00000c  00c18140          DCB      0x00,0xc1,0x81,0x40
000010  01c08041          DCB      0x01,0xc0,0x80,0x41
000014  00c18140          DCB      0x00,0xc1,0x81,0x40
000018  00c18140          DCB      0x00,0xc1,0x81,0x40
00001c  01c08041          DCB      0x01,0xc0,0x80,0x41
000020  01c08041          DCB      0x01,0xc0,0x80,0x41
000024  00c18140          DCB      0x00,0xc1,0x81,0x40
000028  00c18140          DCB      0x00,0xc1,0x81,0x40
00002c  01c08041          DCB      0x01,0xc0,0x80,0x41
000030  00c18140          DCB      0x00,0xc1,0x81,0x40
000034  01c08041          DCB      0x01,0xc0,0x80,0x41
000038  01c08041          DCB      0x01,0xc0,0x80,0x41
00003c  00c18140          DCB      0x00,0xc1,0x81,0x40
000040  01c08041          DCB      0x01,0xc0,0x80,0x41
000044  00c18140          DCB      0x00,0xc1,0x81,0x40
000048  00c18140          DCB      0x00,0xc1,0x81,0x40
00004c  01c08041          DCB      0x01,0xc0,0x80,0x41
000050  00c18140          DCB      0x00,0xc1,0x81,0x40
000054  01c08041          DCB      0x01,0xc0,0x80,0x41
000058  01c08041          DCB      0x01,0xc0,0x80,0x41
00005c  00c18140          DCB      0x00,0xc1,0x81,0x40
000060  00c18140          DCB      0x00,0xc1,0x81,0x40
000064  01c08041          DCB      0x01,0xc0,0x80,0x41
000068  01c08041          DCB      0x01,0xc0,0x80,0x41
00006c  00c18140          DCB      0x00,0xc1,0x81,0x40
000070  01c08041          DCB      0x01,0xc0,0x80,0x41
000074  00c18140          DCB      0x00,0xc1,0x81,0x40
000078  00c18140          DCB      0x00,0xc1,0x81,0x40
00007c  01c08041          DCB      0x01,0xc0,0x80,0x41
000080  01c08041          DCB      0x01,0xc0,0x80,0x41
000084  00c18140          DCB      0x00,0xc1,0x81,0x40
000088  00c18140          DCB      0x00,0xc1,0x81,0x40
00008c  01c08041          DCB      0x01,0xc0,0x80,0x41
000090  00c18140          DCB      0x00,0xc1,0x81,0x40
000094  01c08041          DCB      0x01,0xc0,0x80,0x41
000098  01c08041          DCB      0x01,0xc0,0x80,0x41
00009c  00c18140          DCB      0x00,0xc1,0x81,0x40
0000a0  00c18140          DCB      0x00,0xc1,0x81,0x40
0000a4  01c08041          DCB      0x01,0xc0,0x80,0x41
0000a8  01c08041          DCB      0x01,0xc0,0x80,0x41
0000ac  00c18140          DCB      0x00,0xc1,0x81,0x40
0000b0  01c08041          DCB      0x01,0xc0,0x80,0x41
0000b4  00c18140          DCB      0x00,0xc1,0x81,0x40
0000b8  00c18140          DCB      0x00,0xc1,0x81,0x40
0000bc  01c08041          DCB      0x01,0xc0,0x80,0x41
0000c0  00c18140          DCB      0x00,0xc1,0x81,0x40
0000c4  01c08041          DCB      0x01,0xc0,0x80,0x41
0000c8  01c08041          DCB      0x01,0xc0,0x80,0x41
0000cc  00c18140          DCB      0x00,0xc1,0x81,0x40
0000d0  01c08041          DCB      0x01,0xc0,0x80,0x41
0000d4  00c18140          DCB      0x00,0xc1,0x81,0x40
0000d8  00c18140          DCB      0x00,0xc1,0x81,0x40
0000dc  01c08041          DCB      0x01,0xc0,0x80,0x41
0000e0  01c08041          DCB      0x01,0xc0,0x80,0x41
0000e4  00c18140          DCB      0x00,0xc1,0x81,0x40
0000e8  00c18140          DCB      0x00,0xc1,0x81,0x40
0000ec  01c08041          DCB      0x01,0xc0,0x80,0x41
0000f0  00c18140          DCB      0x00,0xc1,0x81,0x40
0000f4  01c08041          DCB      0x01,0xc0,0x80,0x41
0000f8  01c08041          DCB      0x01,0xc0,0x80,0x41
0000fc  00c18140          DCB      0x00,0xc1,0x81,0x40
                  aucCRCLo
000100  00c0c101          DCB      0x00,0xc0,0xc1,0x01
000104  c30302c2          DCB      0xc3,0x03,0x02,0xc2
000108  c60607c7          DCB      0xc6,0x06,0x07,0xc7
00010c  05c5c404          DCB      0x05,0xc5,0xc4,0x04
000110  cc0c0dcd          DCB      0xcc,0x0c,0x0d,0xcd
000114  0fcfce0e          DCB      0x0f,0xcf,0xce,0x0e
000118  0acacb0b          DCB      0x0a,0xca,0xcb,0x0b
00011c  c90908c8          DCB      0xc9,0x09,0x08,0xc8
000120  d81819d9          DCB      0xd8,0x18,0x19,0xd9
000124  1bdbda1a          DCB      0x1b,0xdb,0xda,0x1a
000128  1ededf1f          DCB      0x1e,0xde,0xdf,0x1f
00012c  dd1d1cdc          DCB      0xdd,0x1d,0x1c,0xdc
000130  14d4d515          DCB      0x14,0xd4,0xd5,0x15
000134  d71716d6          DCB      0xd7,0x17,0x16,0xd6
000138  d21213d3          DCB      0xd2,0x12,0x13,0xd3
00013c  11d1d010          DCB      0x11,0xd1,0xd0,0x10
000140  f03031f1          DCB      0xf0,0x30,0x31,0xf1
000144  33f3f232          DCB      0x33,0xf3,0xf2,0x32
000148  36f6f737          DCB      0x36,0xf6,0xf7,0x37
00014c  f53534f4          DCB      0xf5,0x35,0x34,0xf4
000150  3cfcfd3d          DCB      0x3c,0xfc,0xfd,0x3d
000154  ff3f3efe          DCB      0xff,0x3f,0x3e,0xfe
000158  fa3a3bfb          DCB      0xfa,0x3a,0x3b,0xfb
00015c  39f9f838          DCB      0x39,0xf9,0xf8,0x38
000160  28e8e929          DCB      0x28,0xe8,0xe9,0x29
000164  eb2b2aea          DCB      0xeb,0x2b,0x2a,0xea
000168  ee2e2fef          DCB      0xee,0x2e,0x2f,0xef
00016c  2dedec2c          DCB      0x2d,0xed,0xec,0x2c
000170  e42425e5          DCB      0xe4,0x24,0x25,0xe5
000174  27e7e626          DCB      0x27,0xe7,0xe6,0x26
000178  22e2e323          DCB      0x22,0xe2,0xe3,0x23
00017c  e12120e0          DCB      0xe1,0x21,0x20,0xe0
000180  a06061a1          DCB      0xa0,0x60,0x61,0xa1
000184  63a3a262          DCB      0x63,0xa3,0xa2,0x62
000188  66a6a767          DCB      0x66,0xa6,0xa7,0x67
00018c  a56564a4          DCB      0xa5,0x65,0x64,0xa4
000190  6cacad6d          DCB      0x6c,0xac,0xad,0x6d
000194  af6f6eae          DCB      0xaf,0x6f,0x6e,0xae
000198  aa6a6bab          DCB      0xaa,0x6a,0x6b,0xab
00019c  69a9a868          DCB      0x69,0xa9,0xa8,0x68
0001a0  78b8b979          DCB      0x78,0xb8,0xb9,0x79
0001a4  bb7b7aba          DCB      0xbb,0x7b,0x7a,0xba
0001a8  be7e7fbf          DCB      0xbe,0x7e,0x7f,0xbf
0001ac  7dbdbc7c          DCB      0x7d,0xbd,0xbc,0x7c
0001b0  b47475b5          DCB      0xb4,0x74,0x75,0xb5
0001b4  77b7b676          DCB      0x77,0xb7,0xb6,0x76
0001b8  72b2b373          DCB      0x72,0xb2,0xb3,0x73
0001bc  b17170b0          DCB      0xb1,0x71,0x70,0xb0
0001c0  50909151          DCB      0x50,0x90,0x91,0x51
0001c4  93535292          DCB      0x93,0x53,0x52,0x92
0001c8  96565797          DCB      0x96,0x56,0x57,0x97
0001cc  55959454          DCB      0x55,0x95,0x94,0x54
0001d0  9c5c5d9d          DCB      0x9c,0x5c,0x5d,0x9d
0001d4  5f9f9e5e          DCB      0x5f,0x9f,0x9e,0x5e
0001d8  5a9a9b5b          DCB      0x5a,0x9a,0x9b,0x5b
0001dc  99595898          DCB      0x99,0x59,0x58,0x98
0001e0  88484989          DCB      0x88,0x48,0x49,0x89
0001e4  4b8b8a4a          DCB      0x4b,0x8b,0x8a,0x4a
0001e8  4e8e8f4f          DCB      0x4e,0x8e,0x8f,0x4f
0001ec  8d4d4c8c          DCB      0x8d,0x4d,0x4c,0x8c
0001f0  44848545          DCB      0x44,0x84,0x85,0x45
0001f4  87474686          DCB      0x87,0x47,0x46,0x86
0001f8  82424383          DCB      0x82,0x42,0x43,0x83
0001fc  41818040          DCB      0x41,0x81,0x80,0x40
                          DCD      ||.conststring||
                          DCD      ||.conststring||+0x8
                          DCD      ||.conststring||+0x10
                          DCD      ||.conststring||+0x18
                          DCD      ||.conststring||+0x20
                          DCD      ||.conststring||+0x28
                          DCD      0x08000000
                          DCD      0x10000000
                          DCD      0x20000000
                          DCD      0x40000000
                          DCD      0x80000000

                          AREA ||.conststring||, DATA, READONLY, MERGE=1, STRINGS, ALIGN=2

000000  756e7273          DCB      "unrst",0
000004  7400    
000006  00                DCB      0
000007  00                DCB      0
000008  706f7272          DCB      "porrst",0
00000c  737400  
00000f  00                DCB      0
000010  73667472          DCB      "sftrst",0
000014  737400  
000017  00                DCB      0
000018  69776472          DCB      "iwdrst",0
00001c  737400  
00001f  00                DCB      0
000020  77776472          DCB      "wwdrst",0
000024  737400  
000027  00                DCB      0
000028  6c707772          DCB      "lpwrst",0
00002c  737400  
00002f  00                DCB      0
000030  7b226769          DCB      "{""gid"":""%s"",""bid"":""%s"",""cip"":""%d.%d.%d.%d"","
000034  64223a22
000038  2573222c
00003c  22626964
000040  223a2225
000044  73222c22
000048  63697022
00004c  3a222564
000050  2e25642e
000054  25642e25
000058  64222c  
00005b  226d6163          DCB      """mac"":""%02X:%02X:%02X:%02X:%02X:%02X"",""connect"":"""
00005f  223a2225
000063  3032583a
000067  25303258
00006b  3a253032
00006f  583a2530
000073  32583a25
000077  3032583a
00007b  25303258
00007f  222c2263
000083  6f6e6e65
000087  6374223a
00008b  22      
00008c  2573222c          DCB      "%s"",""sver"":""%s"",""hver"":""%s"",""sta"":""%s""}",0
000090  22737665
000094  72223a22
000098  2573222c
00009c  22687665
0000a0  72223a22
0000a4  2573222c
0000a8  22737461
0000ac  223a2225
0000b0  73227d00

                          AREA ||.data||, DATA, ALIGN=2

                  xHandleTaskUserIF
                          DCD      0x00000000
                  xHandleCheckNet
                          DCD      0x00000000
                  xHandleTaskWEB
                          DCD      0x00000000
                  xHandleTaskMsgPro
                          DCD      0x00000000
                  xHandleTaskStart
                          DCD      0x00000000
                  xSemaphore
                          DCD      0x00000000
                  xMutex
                          DCD      0x00000000
                  xPingTimers
                          DCD      0x00000000
                  xNoNetTimers
                          DCD      0x00000000
                  xCreatedEventGroup
                          DCD      0x00000000
                  xUpdataEventGroup
                          DCD      0x00000000
                  xQueue1
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\..\\User\\app\\src\\app_system.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___12_app_system_c_7dfb42f5____REV16|
#line 114 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___12_app_system_c_7dfb42f5____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___12_app_system_c_7dfb42f5____REVSH|
#line 128
|__asm___12_app_system_c_7dfb42f5____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
