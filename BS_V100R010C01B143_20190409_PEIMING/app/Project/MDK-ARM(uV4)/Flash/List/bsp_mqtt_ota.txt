; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\flash\obj\bsp_mqtt_ota.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\bsp_mqtt_ota.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931,870 -I..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\User\bsp -I..\..\User\bsp\inc -I..\..\User -I..\..\Libraries\CMSIS\Include -I..\..\FreeRTOS\include -I..\..\FreeRTOS\portable\RVDS\ARM_CM3 -I..\..\MQTT -I..\..\Ethernet -I..\..\Ethernet\W5500 -I..\..\Internet\DHCP -I..\..\Internet\DNS -I..\..\User\app\src -I..\..\User\app\inc -I..\..\Internet\NTP -I..\..\Internet\HTTP -I.\RTE\_Flash -ID:\MDK5\ARM\CMSIS\5.0.1\CMSIS\Include -ID:\MDK5\Keil\STM32F1xx_DFP\2.0.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=523 -D_RTE_ -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=.\flash\obj\bsp_mqtt_ota.crf ..\..\User\bsp\src\bsp_mqtt_ota.c]
                          THUMB

                          AREA ||i.FLASH_PagesMask||, CODE, READONLY, ALIGN=1

                  FLASH_PagesMask PROC
;;;10     */
;;;11     static uint32_t FLASH_PagesMask(uint32_t Size)
000000  4601              MOV      r1,r0
;;;12     {
;;;13       uint32_t pagenumber = 0x0;
000002  2000              MOVS     r0,#0
;;;14       uint32_t size = Size;
000004  460a              MOV      r2,r1
;;;15     
;;;16       if((size % 0x800) != 0)
000006  f3c2030a          UBFX     r3,r2,#0,#11
00000a  b11b              CBZ      r3,|L1.20|
;;;17       {
;;;18         pagenumber = (size / 0x800) + 1;
00000c  2301              MOVS     r3,#1
00000e  eb0320d2          ADD      r0,r3,r2,LSR #11
000012  e000              B        |L1.22|
                  |L1.20|
;;;19       }
;;;20       else
;;;21       {
;;;22         pagenumber = size / 0x800;
000014  0ad0              LSRS     r0,r2,#11
                  |L1.22|
;;;23       }
;;;24       return pagenumber;
;;;25     }
000016  4770              BX       lr
;;;26     
                          ENDP


                          AREA ||i.app_nrf_SendBleCmd||, CODE, READONLY, ALIGN=2

                  app_nrf_SendBleCmd PROC
;;;315    */
;;;316    static void app_nrf_SendBleCmd(uint8_t *mac,uint8_t *len,uint8_t *messge)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;317    {
000004  b088              SUB      sp,sp,#0x20
000006  4605              MOV      r5,r0
000008  460e              MOV      r6,r1
00000a  4617              MOV      r7,r2
;;;318    	uint8_t i=0;
00000c  2400              MOVS     r4,#0
;;;319    	uint8_t check_results=0;
00000e  46a0              MOV      r8,r4
;;;320    	uint8_t Sendbuf[31]={0x5A,0x49,0x00,0x19};
000010  211b              MOVS     r1,#0x1b
000012  a801              ADD      r0,sp,#4
000014  f7fffffe          BL       __aeabi_memclr4
000018  481a              LDR      r0,|L2.132|
00001a  6800              LDR      r0,[r0,#0]  ; <Data3>
00001c  9000              STR      r0,[sp,#0]
;;;321    
;;;322    	Sendbuf[1] = OTA_CMD;         /*消息ID*/
00001e  2049              MOVS     r0,#0x49
000020  f88d0001          STRB     r0,[sp,#1]
;;;323      Sendbuf[4]=0x01;
000024  2001              MOVS     r0,#1
000026  f88d0004          STRB     r0,[sp,#4]
;;;324    	memcpy(&Sendbuf[5],mac,6);
00002a  6828              LDR      r0,[r5,#0]
00002c  f8cd0005          STR      r0,[sp,#5]
000030  88a8              LDRH     r0,[r5,#4]
000032  f8ad0009          STRH     r0,[sp,#9]
;;;325    	memcpy(&Sendbuf[11],len,4);
000036  6830              LDR      r0,[r6,#0]
000038  f8cd000b          STR      r0,[sp,#0xb]
;;;326    	memcpy(&Sendbuf[15],messge,14);
00003c  220e              MOVS     r2,#0xe
00003e  4639              MOV      r1,r7
000040  f10d000f          ADD      r0,sp,#0xf
000044  f7fffffe          BL       __aeabi_memcpy
;;;327    	check_results=Sendbuf[1];
000048  f89d8001          LDRB     r8,[sp,#1]
;;;328    	for(i=2;i<(Sendbuf[3]+2+3-1);i++)   //CMD字段到数据字段进行校验
00004c  2402              MOVS     r4,#2
00004e  e005              B        |L2.92|
                  |L2.80|
;;;329    	{
;;;330    		check_results^=Sendbuf[i];
000050  f81d0004          LDRB     r0,[sp,r4]
000054  ea800808          EOR      r8,r0,r8
000058  1c60              ADDS     r0,r4,#1              ;328
00005a  b2c4              UXTB     r4,r0                 ;328
                  |L2.92|
00005c  f89d0003          LDRB     r0,[sp,#3]            ;328
000060  1d00              ADDS     r0,r0,#4              ;328
000062  42a0              CMP      r0,r4                 ;328
000064  dcf4              BGT      |L2.80|
;;;331    	}
;;;332    	Sendbuf[i]=check_results;           //校验值
000066  f80d8004          STRB     r8,[sp,r4]
;;;333    	Sendbuf[i+1]=0xca;                  //结束符
00006a  21ca              MOVS     r1,#0xca
00006c  1c60              ADDS     r0,r4,#1
00006e  f80d1000          STRB     r1,[sp,r0]
;;;334    
;;;335    	comSendBuf( NRF_PORT , Sendbuf ,31 ); //发送数据包
000072  221f              MOVS     r2,#0x1f
000074  4669              MOV      r1,sp
000076  2002              MOVS     r0,#2
000078  f7fffffe          BL       comSendBuf
;;;336    }
00007c  b008              ADD      sp,sp,#0x20
00007e  e8bd81f0          POP      {r4-r8,pc}
;;;337    /*
                          ENDP

000082  0000              DCW      0x0000
                  |L2.132|
                          DCD      ||.constdata||+0x218

                          AREA ||i.app_nrf_SendBleData||, CODE, READONLY, ALIGN=2

                  app_nrf_SendBleData PROC
;;;344    */
;;;345    static void app_nrf_SendBleData(uint8_t *mac,uint8_t *data,uint16_t lenth)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;346    {
000004  f5ad7d7e          SUB      sp,sp,#0x3f8
000008  4606              MOV      r6,r0
00000a  4688              MOV      r8,r1
00000c  4614              MOV      r4,r2
;;;347    	uint16_t i=0;
00000e  2500              MOVS     r5,#0
;;;348    	uint8_t check_results=0;
000010  2700              MOVS     r7,#0
;;;349    	uint8_t Sendbuf[1013]={0x5A,0x49,0x03,0xEF};
000012  f24031f1          MOV      r1,#0x3f1
000016  a801              ADD      r0,sp,#4
000018  f7fffffe          BL       __aeabi_memclr4
00001c  4821              LDR      r0,|L3.164|
00001e  6800              LDR      r0,[r0,#0]  ; <Data4>
000020  9000              STR      r0,[sp,#0]
;;;350    
;;;351    	Sendbuf[1] = OTA_CMD;         /*消息ID*/
000022  2049              MOVS     r0,#0x49
000024  f88d0001          STRB     r0,[sp,#1]
;;;352    	Sendbuf[4]=0x02;
000028  2002              MOVS     r0,#2
00002a  f88d0004          STRB     r0,[sp,#4]
;;;353    	memcpy(&Sendbuf[5],mac,6);
00002e  6830              LDR      r0,[r6,#0]
000030  f8cd0005          STR      r0,[sp,#5]
000034  88b0              LDRH     r0,[r6,#4]
000036  f8ad0009          STRH     r0,[sp,#9]
;;;354      memcpy(&Sendbuf[11],data,lenth);
00003a  4622              MOV      r2,r4
00003c  4641              MOV      r1,r8
00003e  f10d000b          ADD      r0,sp,#0xb
000042  f7fffffe          BL       __aeabi_memcpy
;;;355    	Sendbuf[2]=(lenth+7)/256;
000046  1de0              ADDS     r0,r4,#7
000048  17c1              ASRS     r1,r0,#31
00004a  eb006111          ADD      r1,r0,r1,LSR #24
00004e  0a09              LSRS     r1,r1,#8
000050  f88d1002          STRB     r1,[sp,#2]
;;;356    	Sendbuf[3]=(lenth+7)%256;
000054  17c1              ASRS     r1,r0,#31
000056  eb006111          ADD      r1,r0,r1,LSR #24
00005a  1209              ASRS     r1,r1,#8
00005c  eba02101          SUB      r1,r0,r1,LSL #8
000060  b2c9              UXTB     r1,r1
000062  f88d1003          STRB     r1,[sp,#3]
;;;357    	check_results=Sendbuf[1];
000066  f89d7001          LDRB     r7,[sp,#1]
;;;358    	for(i=2;i<(lenth+7+2+3-1);i++)   //CMD字段到数据字段进行校验
00006a  2502              MOVS     r5,#2
00006c  e004              B        |L3.120|
                  |L3.110|
;;;359    	{
;;;360    		check_results^=Sendbuf[i];
00006e  f81d0005          LDRB     r0,[sp,r5]
000072  4047              EORS     r7,r7,r0
000074  1c68              ADDS     r0,r5,#1              ;358
000076  b285              UXTH     r5,r0                 ;358
                  |L3.120|
000078  f104000b          ADD      r0,r4,#0xb            ;358
00007c  42a8              CMP      r0,r5                 ;358
00007e  dcf6              BGT      |L3.110|
;;;361    	}
;;;362    	Sendbuf[i]=check_results;           //校验值
000080  f80d7005          STRB     r7,[sp,r5]
;;;363    	Sendbuf[i+1]=0xca;                  //结束符
000084  21ca              MOVS     r1,#0xca
000086  1c68              ADDS     r0,r5,#1
000088  f80d1000          STRB     r1,[sp,r0]
;;;364    
;;;365    	comSendBuf( NRF_PORT , Sendbuf ,lenth+13 );       //发送数据包
00008c  f104000d          ADD      r0,r4,#0xd
000090  b282              UXTH     r2,r0
000092  4669              MOV      r1,sp
000094  2002              MOVS     r0,#2
000096  f7fffffe          BL       comSendBuf
;;;366    }
00009a  f50d7d7e          ADD      sp,sp,#0x3f8
00009e  e8bd81f0          POP      {r4-r8,pc}
;;;367    
                          ENDP

0000a2  0000              DCW      0x0000
                  |L3.164|
                          DCD      ||.constdata||+0x21c

                          AREA ||i.bsp_ble_ackResponse||, CODE, READONLY, ALIGN=2

                  bsp_ble_ackResponse PROC
;;;61     */
;;;62     void bsp_ble_ackResponse( uint8_t asktype , uint8_t *serialnumber, uint8_t *bracelet_mac)
000000  b570              PUSH     {r4-r6,lr}
;;;63     {
000002  b088              SUB      sp,sp,#0x20
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
;;;64     	uint16_t crcdata;
;;;65     	uint8_t i;
;;;66     	uint8_t ackbuf[26]={0x16,0x00,0x9A};
00000a  2116              MOVS     r1,#0x16
00000c  a801              ADD      r0,sp,#4
00000e  f7fffffe          BL       __aeabi_memclr4
000012  481d              LDR      r0,|L4.136|
000014  6800              LDR      r0,[r0,#0]  ; <Data2>
000016  9000              STR      r0,[sp,#0]
;;;67     	
;;;68     	ackbuf[2] = BLE_UPDATA;
000018  209a              MOVS     r0,#0x9a
00001a  f88d0002          STRB     r0,[sp,#2]
;;;69     	
;;;70     	memset(&ackbuf[3],0,2);                           /*网关设备ID低字节补齐*/
00001e  2000              MOVS     r0,#0
000020  f8ad0003          STRH     r0,[sp,#3]
;;;71     	memcpy(&ackbuf[5],sysCfg.parameter.client_mac,6); /*网关ID*/
000024  4819              LDR      r0,|L4.140|
000026  6801              LDR      r1,[r0,#0]  ; sysCfg
000028  f8cd1005          STR      r1,[sp,#5]
00002c  8880              LDRH     r0,[r0,#4]  ; sysCfg
00002e  f8ad0009          STRH     r0,[sp,#9]
;;;72     	memset(&ackbuf[11],0,2); 
000032  2000              MOVS     r0,#0
000034  f8ad000b          STRH     r0,[sp,#0xb]
;;;73     	memcpy(&ackbuf[13],bracelet_mac,6);               /*手环MAC*/
000038  6830              LDR      r0,[r6,#0]
00003a  f8cd000d          STR      r0,[sp,#0xd]
00003e  88b0              LDRH     r0,[r6,#4]
000040  f8ad0011          STRH     r0,[sp,#0x11]
;;;74     	ackbuf[19] = asktype;
000044  f88d4013          STRB     r4,[sp,#0x13]
;;;75     	memcpy(&ackbuf[20],serialnumber,4);     				  /*数据包流水号*/
000048  6828              LDR      r0,[r5,#0]
00004a  9005              STR      r0,[sp,#0x14]
;;;76     	
;;;77     	/*CRC校验*/
;;;78     	crcdata=app_plat_usMBCRC16(ackbuf,ackbuf[1]*256+ackbuf[0]+2);
00004c  f89d2000          LDRB     r2,[sp,#0]
000050  f89d0001          LDRB     r0,[sp,#1]
000054  eb022000          ADD      r0,r2,r0,LSL #8
000058  1c80              ADDS     r0,r0,#2
00005a  b281              UXTH     r1,r0
00005c  4668              MOV      r0,sp
00005e  f7fffffe          BL       app_plat_usMBCRC16
000062  9007              STR      r0,[sp,#0x1c]
;;;79     	memcpy(&ackbuf[24],(uint8_t *)&crcdata,2); 
000064  f8bd001c          LDRH     r0,[sp,#0x1c]
000068  f8ad0018          STRH     r0,[sp,#0x18]
;;;80     
;;;81       mqtt_publish( SOCK_TCPS , UPDATABLE_TOPIC , (char *)ackbuf , ackbuf[1]*256+ackbuf[0]+4 );
00006c  f89d1000          LDRB     r1,[sp,#0]
000070  f89d0001          LDRB     r0,[sp,#1]
000074  eb012000          ADD      r0,r1,r0,LSL #8
000078  1d03              ADDS     r3,r0,#4
00007a  466a              MOV      r2,sp
00007c  a104              ADR      r1,|L4.144|
00007e  2000              MOVS     r0,#0
000080  f7fffffe          BL       mqtt_publish
;;;82     }
000084  b008              ADD      sp,sp,#0x20
000086  bd70              POP      {r4-r6,pc}
;;;83     /*
                          ENDP

                  |L4.136|
                          DCD      ||.constdata||+0x214
                  |L4.140|
                          DCD      sysCfg+0xda
                  |L4.144|
000090  2f696f74          DCB      "/iot_gateway/braupdate/ack",0
000094  5f676174
000098  65776179
00009c  2f627261
0000a0  75706461
0000a4  74652f61
0000a8  636b00  
0000ab  00                DCB      0

                          AREA ||i.bsp_ota_UpdataBracelet||, CODE, READONLY, ALIGN=2

                  bsp_ota_UpdataBracelet PROC
;;;376    */
;;;377    void bsp_ota_UpdataBracelet(uint16_t messgelen,uint8_t* payload)
000000  e92d43f0          PUSH     {r4-r9,lr}
;;;378    {
000004  b08f              SUB      sp,sp,#0x3c
000006  4606              MOV      r6,r0
000008  460d              MOV      r5,r1
;;;379    	uint16_t count=0;											//计数第几包 
00000a  2700              MOVS     r7,#0
;;;380      uint16_t i,num = 0;
00000c  46b8              MOV      r8,r7
;;;381    
;;;382    	uint8_t  byte;
;;;383      uint8_t  recbleacklen = 0;  
00000e  46b9              MOV      r9,r7
;;;384    	uint8_t  readbuf[MAX_BLE_RESPONSE_LEN] = {0};
000010  2134              MOVS     r1,#0x34
000012  a801              ADD      r0,sp,#4
000014  f7fffffe          BL       __aeabi_memclr4
;;;385    
;;;386    	uint32_t serialnumber;   /*流水号*/
;;;387    
;;;388    	static uint8_t buf[6] = {0};
;;;389    	static uint8_t updata_flag = 0;
;;;390      static uint8_t upd_bra[6] = {0};      //目标手环MAC
;;;391    	static uint8_t new_bra[6] = {0};      //目标手环MAC
;;;392    	static uint8_t firmwarelen[4] = {0}; 
;;;393    	
;;;394    	static uint16_t firmwarepacknum;  
;;;395    	
;;;396    	static uint32_t rxlen=0;							//接收长度	
;;;397    	static uint32_t content_len=0;				//有效总字节
;;;398    	
;;;399    	/*包序号*/
;;;400    	count = payload[3] + payload[4]*256;  
000018  78e9              LDRB     r1,[r5,#3]
00001a  7928              LDRB     r0,[r5,#4]
00001c  eb012000          ADD      r0,r1,r0,LSL #8
000020  b287              UXTH     r7,r0
;;;401    
;;;402    	if(count == 1)
000022  2f01              CMP      r7,#1
000024  d150              BNE      |L5.200|
;;;403    	{
;;;404    		content_len = 0;  																			   /*清零总长度*/
000026  2000              MOVS     r0,#0
000028  497e              LDR      r1,|L5.548|
00002a  6008              STR      r0,[r1,#0]  ; content_len
;;;405    		memcpy((uint8_t *)&serialnumber,&payload[messgelen-6],4);  /*当前数据包流水号*/
00002c  1fb0              SUBS     r0,r6,#6
00002e  4428              ADD      r0,r0,r5
000030  6800              LDR      r0,[r0,#0]
000032  9000              STR      r0,[sp,#0]
;;;406    		
;;;407    		memcpy(buf,&payload[7],6);      									 /*当前升级手环MAC*/
000034  487c              LDR      r0,|L5.552|
000036  f8551f07          LDR      r1,[r5,#7]!
00003a  6001              STR      r1,[r0,#0]  ; buf
00003c  88a9              LDRH     r1,[r5,#4]
00003e  8081              STRH     r1,[r0,#4]
;;;408    		memcpy(firmwarelen,&payload[15],4);    /*手环固件总长度*/
000040  487a              LDR      r0,|L5.556|
000042  68a9              LDR      r1,[r5,#8]
000044  1fed              SUBS     r5,r5,#7
000046  6001              STR      r1,[r0,#0]  ; firmwarelen
;;;409    		
;;;410    		for(i = 0; i < 4; i++)  /*获取传输字节总长度*/
000048  2400              MOVS     r4,#0
00004a  e00b              B        |L5.100|
                  |L5.76|
;;;411    		{
;;;412    			content_len |= (payload[15+i] << (8 * i));
00004c  f104000f          ADD      r0,r4,#0xf
000050  5c28              LDRB     r0,[r5,r0]
000052  00e1              LSLS     r1,r4,#3
000054  4088              LSLS     r0,r0,r1
000056  4973              LDR      r1,|L5.548|
000058  6809              LDR      r1,[r1,#0]  ; content_len
00005a  4308              ORRS     r0,r0,r1
00005c  4971              LDR      r1,|L5.548|
00005e  6008              STR      r0,[r1,#0]  ; content_len
000060  1c60              ADDS     r0,r4,#1              ;410
000062  b284              UXTH     r4,r0                 ;410
                  |L5.100|
000064  2c04              CMP      r4,#4                 ;410
000066  dbf1              BLT      |L5.76|
;;;413    		}		
;;;414    		
;;;415    		firmwarepacknum = payload[5] + payload[6]*256; /*总包数*/				
000068  7969              LDRB     r1,[r5,#5]
00006a  79a8              LDRB     r0,[r5,#6]
00006c  eb012000          ADD      r0,r1,r0,LSL #8
000070  496f              LDR      r1,|L5.560|
000072  8008              STRH     r0,[r1,#0]
;;;416    		rxlen = 0;     																 /*接收计数清零*/
000074  2000              MOVS     r0,#0
000076  496f              LDR      r1,|L5.564|
000078  6008              STR      r0,[r1,#0]  ; rxlen
;;;417    
;;;418    		for(i = 0; i < 6; i++)
00007a  2400              MOVS     r4,#0
00007c  e007              B        |L5.142|
                  |L5.126|
;;;419    		{
;;;420    			new_bra[i] = buf[5-i];
00007e  f1c40005          RSB      r0,r4,#5
000082  4969              LDR      r1,|L5.552|
000084  5c08              LDRB     r0,[r1,r0]
000086  496c              LDR      r1,|L5.568|
000088  5508              STRB     r0,[r1,r4]
00008a  1c60              ADDS     r0,r4,#1              ;418
00008c  b284              UXTH     r4,r0                 ;418
                  |L5.142|
00008e  2c06              CMP      r4,#6                 ;418
000090  dbf5              BLT      |L5.126|
;;;421    		}
;;;422    		
;;;423    		#if APP_DEBUG
;;;424    		printf("firmware_len:%d,total package num:%d\r\n",content_len ,firmwarepacknum);     /*固件总长度*/
;;;425    		printf("updata bracelet:");
;;;426    		for(i = 0; i < 6; i++)
;;;427    		{
;;;428    			printf("%02X ",new_bra[i]);
;;;429    		}
;;;430    		printf("\r\n");
;;;431    		#endif		
;;;432    		
;;;433    		if(updata_flag == 1)
000092  486a              LDR      r0,|L5.572|
000094  7800              LDRB     r0,[r0,#0]  ; updata_flag
000096  2801              CMP      r0,#1
000098  d107              BNE      |L5.170|
;;;434    		{
;;;435    			#if APP_DEBUG
;;;436    			printf("another bralecet data count:%d\r\n",count);
;;;437    			for(i = 0; i < 6; i++)
;;;438    			{
;;;439    				printf("%02X ",new_bra[i]);
;;;440    			}
;;;441    			printf("\r\n");
;;;442    			#endif		
;;;443    			bsp_ble_ackResponse( ACK_FAIL ,(uint8_t *)&serialnumber,new_bra);	
00009a  4a67              LDR      r2,|L5.568|
00009c  4669              MOV      r1,sp
00009e  2000              MOVS     r0,#0
0000a0  f7fffffe          BL       bsp_ble_ackResponse
                  |L5.164|
;;;444    		  return;
;;;445    		}
;;;446    				
;;;447    		updata_flag = 1;
;;;448    		memcpy(upd_bra,new_bra,6);
;;;449    		bsp_ble_ackResponse( OTA_STA ,(uint8_t *)&serialnumber,upd_bra);	
;;;450    	}
;;;451    	else if(count == 2)      
;;;452    	{ 			
;;;453    		memcpy(buf,&payload[5],6);                                    /*当前升级手环MAC*/
;;;454    		memcpy((uint8_t *)&serialnumber,&payload[messgelen-6],4);     /*当前数据包流水号*/
;;;455    		
;;;456    		for(i = 0; i < 6; i++)
;;;457    		{
;;;458    			new_bra[i] = buf[5-i];
;;;459    		}
;;;460    //		if(0 != memcmp(upd_bra,new_bra,6))
;;;461    //		{
;;;462    //			#if APP_DEBUG
;;;463    //			printf("another bralecet data count:%d\r\n",count);
;;;464    //			for(i = 0; i < 6; i++)
;;;465    //			{
;;;466    //				printf("%02X ",new_bra[i]);
;;;467    //			}
;;;468    //			printf("\r\n");
;;;469    //			#endif		
;;;470    //			bsp_ble_ackResponse( ACK_FAIL ,(uint8_t *)&serialnumber,new_bra);	
;;;471    //		  return;
;;;472    //		}
;;;473    		
;;;474    		comClearTxFifo(NRF_PORT);
;;;475        app_nrf_SendBleCmd(buf,firmwarelen,&payload[13]);	  /*发送密钥和固件长度*/
;;;476    		
;;;477    		#if APP_DEBUG
;;;478    		printf("wait connect bralecet...\r\n");
;;;479        #endif
;;;480    		
;;;481    //		num = 0;		
;;;482    //    while(1) 
;;;483    //	  {	
;;;484    //			num++;
;;;485    //			if(num > 60)
;;;486    //			{
;;;487    //				#if APP_DEBUG
;;;488    //				printf("connect bralecet outtime...\r\n");	
;;;489    //				#endif	
;;;490    				
;;;491    //				bsp_ble_ackResponse( ACK_FAIL ,(uint8_t *)&serialnumber,new_bra);	
;;;492    //				mqtt_disconnect();
;;;493    //				vTaskDelay(2000);
;;;494    //				__set_FAULTMASK(1);
;;;495    //				NVIC_SystemReset();  /*重启系统*/
;;;496    //				break;
;;;497    //			}
;;;498       
;;;499        for(i = 0; i < 60; i++)
;;;500        {		
;;;501    			IWDG_Feed();
;;;502    			vTaskDelay(1000);
;;;503    
;;;504    			memset(readbuf,0x00,sizeof(readbuf));
;;;505    			if(SUCCESS == app_nrf_ReadData(readbuf) && readbuf[1] == 0x49)
;;;506    			{
;;;507    				if(readbuf[11] == 0x01)
;;;508    				{
;;;509    					#if APP_DEBUG
;;;510    					printf("connect bralecet.\r\n");	
;;;511    					#endif	
;;;512    					bsp_ble_ackResponse( KEY_OK ,(uint8_t *)&serialnumber,&readbuf[5]);	
;;;513    					return;
;;;514    				}
;;;515    				
;;;516    				break;
;;;517    //				else
;;;518    //				{
;;;519    //					#if APP_DEBUG
;;;520    //					printf("connect bralecet fail...\r\n");	
;;;521    //					#endif	
;;;522    //					bsp_ble_ackResponse( ACK_FAIL ,(uint8_t *)&serialnumber,new_bra);	
;;;523    //				}
;;;524    //				break;
;;;525    			}
;;;526    		}
;;;527    		
;;;528    		bsp_ble_ackResponse( ACK_FAIL ,(uint8_t *)&serialnumber,new_bra);	
;;;529    	}
;;;530    	else if(count > 2)       
;;;531    	{			
;;;532    		memcpy(buf,&payload[5],6);                                    /*当前升级手环MAC*/
;;;533    		memcpy((uint8_t *)&serialnumber,&payload[messgelen-6],4);     /*当前数据包流水号*/
;;;534    		
;;;535    		for(i = 0; i < 6; i++)
;;;536    		{
;;;537    			new_bra[i] = buf[5-i];
;;;538    		}
;;;539    		
;;;540    //		if(0 != memcmp(upd_bra,new_bra,6))
;;;541    //		{
;;;542    //			#if APP_DEBUG
;;;543    //			printf("another bralecet data count:%d\r\n",count);
;;;544    //			for(i = 0; i < 6; i++)
;;;545    //			{
;;;546    //				printf("%02X ",new_bra[i]);
;;;547    //			}
;;;548    //			printf("\r\n");
;;;549    //			#endif		
;;;550    //			bsp_ble_ackResponse( ACK_FAIL ,(uint8_t *)&serialnumber,new_bra);	
;;;551    //		  return;
;;;552    //		}
;;;553    		
;;;554    		rxlen += (messgelen-19);
;;;555    		#if APP_DEBUG
;;;556    		printf("receive %6d bytes ok\r\n",rxlen);	 
;;;557    		#endif
;;;558    		
;;;559    		while(comGetChar(NRF_PORT,&byte)); 
;;;560    		app_nrf_SendBleData(buf,&payload[13],messgelen-19);
;;;561    		
;;;562    //		num = 0;	
;;;563    //		while(1) 
;;;564    //	  {	
;;;565    //			num++;
;;;566    //			if(num > 80)
;;;567    //			{
;;;568    		 for(i = 0; i < 80; i++)
;;;569         {
;;;570    //				#if APP_DEBUG
;;;571    //				printf("data fail...\r\n");	
;;;572    //				#endif
;;;573    //				bsp_ble_ackResponse( ACK_FAIL ,(uint8_t *)&serialnumber,upd_bra);	
;;;574    //				vTaskDelay(1000);
;;;575    //				mqtt_disconnect();
;;;576    //				vTaskDelay(1000);
;;;577    //				__set_FAULTMASK(1);
;;;578    //				NVIC_SystemReset();  /*重启系统*/
;;;579    //				return;
;;;580    //			}
;;;581    			
;;;582    			vTaskDelay(200);
;;;583    			memset(readbuf,0x00,sizeof(readbuf));
;;;584    			if((SUCCESS==app_nrf_ReadData(readbuf)) && (readbuf[1]==0x49))
;;;585    			{
;;;586    				bsp_ble_ackResponse( ACK_OK ,(uint8_t *)&serialnumber,&readbuf[5]);	
;;;587    				
;;;588    				//printf("rxlen:%d content_len:%d count:%d firmwarepacknum:%d\r\n",rxlen,content_len,count,firmwarepacknum);
;;;589    				
;;;590    				if((rxlen == content_len) && ((count) == firmwarepacknum))   	  /*接收数据完成*/
;;;591    				{	
;;;592    					mqtt_disconnect();	
;;;593    					
;;;594    					#if APP_DEBUG
;;;595    					printf("Send ble data complete.\r\n");
;;;596    					#endif	
;;;597    				}	
;;;598    				
;;;599    				return;
;;;600    			}
;;;601    		}	
;;;602    
;;;603        bsp_ble_ackResponse( ACK_FAIL ,(uint8_t *)&serialnumber,new_bra);			
;;;604    	}		 
;;;605    }
0000a4  b00f              ADD      sp,sp,#0x3c
0000a6  e8bd83f0          POP      {r4-r9,pc}
                  |L5.170|
0000aa  2001              MOVS     r0,#1                 ;447
0000ac  4963              LDR      r1,|L5.572|
0000ae  7008              STRB     r0,[r1,#0]            ;447
0000b0  4863              LDR      r0,|L5.576|
0000b2  4961              LDR      r1,|L5.568|
0000b4  680a              LDR      r2,[r1,#0]            ;448  ; new_bra
0000b6  6002              STR      r2,[r0,#0]            ;448  ; upd_bra
0000b8  8889              LDRH     r1,[r1,#4]            ;448  ; new_bra
0000ba  8081              STRH     r1,[r0,#4]            ;448
0000bc  4602              MOV      r2,r0                 ;449
0000be  4669              MOV      r1,sp                 ;449
0000c0  2002              MOVS     r0,#2                 ;449
0000c2  f7fffffe          BL       bsp_ble_ackResponse
0000c6  e0aa              B        |L5.542|
                  |L5.200|
0000c8  2f02              CMP      r7,#2                 ;451
0000ca  d14b              BNE      |L5.356|
0000cc  4856              LDR      r0,|L5.552|
0000ce  f8d51005          LDR      r1,[r5,#5]            ;453
0000d2  6001              STR      r1,[r0,#0]            ;453  ; buf
0000d4  f8b51009          LDRH     r1,[r5,#9]            ;453
0000d8  8081              STRH     r1,[r0,#4]            ;453
0000da  1fb0              SUBS     r0,r6,#6              ;454
0000dc  4428              ADD      r0,r0,r5              ;454
0000de  6800              LDR      r0,[r0,#0]            ;454
0000e0  9000              STR      r0,[sp,#0]            ;454
0000e2  2400              MOVS     r4,#0                 ;456
0000e4  e007              B        |L5.246|
                  |L5.230|
0000e6  f1c40005          RSB      r0,r4,#5              ;458
0000ea  494f              LDR      r1,|L5.552|
0000ec  5c08              LDRB     r0,[r1,r0]            ;458
0000ee  4952              LDR      r1,|L5.568|
0000f0  5508              STRB     r0,[r1,r4]            ;458
0000f2  1c60              ADDS     r0,r4,#1              ;456
0000f4  b284              UXTH     r4,r0                 ;456
                  |L5.246|
0000f6  2c06              CMP      r4,#6                 ;456
0000f8  dbf5              BLT      |L5.230|
0000fa  2002              MOVS     r0,#2                 ;474
0000fc  f7fffffe          BL       comClearTxFifo
000100  f105020d          ADD      r2,r5,#0xd            ;475
000104  4949              LDR      r1,|L5.556|
000106  4848              LDR      r0,|L5.552|
000108  f7fffffe          BL       app_nrf_SendBleCmd
00010c  2400              MOVS     r4,#0                 ;499
00010e  e020              B        |L5.338|
                  |L5.272|
000110  f7fffffe          BL       IWDG_Feed
000114  f44f707a          MOV      r0,#0x3e8             ;502
000118  f7fffffe          BL       vTaskDelay
00011c  2134              MOVS     r1,#0x34              ;504
00011e  a801              ADD      r0,sp,#4              ;504
000120  f7fffffe          BL       __aeabi_memclr4
000124  a801              ADD      r0,sp,#4              ;505
000126  f7fffffe          BL       app_nrf_ReadData
00012a  2801              CMP      r0,#1                 ;505
00012c  d10f              BNE      |L5.334|
00012e  f89d0005          LDRB     r0,[sp,#5]            ;505
000132  2849              CMP      r0,#0x49              ;505
000134  d10b              BNE      |L5.334|
000136  f89d000f          LDRB     r0,[sp,#0xf]          ;507
00013a  2801              CMP      r0,#1                 ;507
00013c  d106              BNE      |L5.332|
00013e  f10d0209          ADD      r2,sp,#9              ;512
000142  4669              MOV      r1,sp                 ;512
000144  2003              MOVS     r0,#3                 ;512
000146  f7fffffe          BL       bsp_ble_ackResponse
00014a  e7ab              B        |L5.164|
                  |L5.332|
00014c  e003              B        |L5.342|
                  |L5.334|
00014e  1c60              ADDS     r0,r4,#1              ;499
000150  b284              UXTH     r4,r0                 ;499
                  |L5.338|
000152  2c3c              CMP      r4,#0x3c              ;499
000154  dbdc              BLT      |L5.272|
                  |L5.342|
000156  bf00              NOP                            ;516
000158  4a37              LDR      r2,|L5.568|
00015a  4669              MOV      r1,sp                 ;528
00015c  2000              MOVS     r0,#0                 ;528
00015e  f7fffffe          BL       bsp_ble_ackResponse
000162  e05c              B        |L5.542|
                  |L5.356|
000164  2f02              CMP      r7,#2                 ;530
000166  dd5a              BLE      |L5.542|
000168  482f              LDR      r0,|L5.552|
00016a  f8d51005          LDR      r1,[r5,#5]            ;532
00016e  6001              STR      r1,[r0,#0]            ;532  ; buf
000170  f8b51009          LDRH     r1,[r5,#9]            ;532
000174  8081              STRH     r1,[r0,#4]            ;532
000176  1fb0              SUBS     r0,r6,#6              ;533
000178  4428              ADD      r0,r0,r5              ;533
00017a  6800              LDR      r0,[r0,#0]            ;533
00017c  9000              STR      r0,[sp,#0]            ;533
00017e  2400              MOVS     r4,#0                 ;535
000180  e007              B        |L5.402|
                  |L5.386|
000182  f1c40005          RSB      r0,r4,#5              ;537
000186  4928              LDR      r1,|L5.552|
000188  5c08              LDRB     r0,[r1,r0]            ;537
00018a  492b              LDR      r1,|L5.568|
00018c  5508              STRB     r0,[r1,r4]            ;537
00018e  1c60              ADDS     r0,r4,#1              ;535
000190  b284              UXTH     r4,r0                 ;535
                  |L5.402|
000192  2c06              CMP      r4,#6                 ;535
000194  dbf5              BLT      |L5.386|
000196  f1a60013          SUB      r0,r6,#0x13           ;554
00019a  4926              LDR      r1,|L5.564|
00019c  6809              LDR      r1,[r1,#0]            ;554  ; rxlen
00019e  4408              ADD      r0,r0,r1              ;554
0001a0  4924              LDR      r1,|L5.564|
0001a2  6008              STR      r0,[r1,#0]            ;554  ; rxlen
0001a4  bf00              NOP                            ;559
                  |L5.422|
0001a6  a90e              ADD      r1,sp,#0x38           ;559
0001a8  2002              MOVS     r0,#2                 ;559
0001aa  f7fffffe          BL       comGetChar
0001ae  2800              CMP      r0,#0                 ;559
0001b0  d1f9              BNE      |L5.422|
0001b2  f1a60013          SUB      r0,r6,#0x13           ;560
0001b6  b282              UXTH     r2,r0                 ;560
0001b8  f105010d          ADD      r1,r5,#0xd            ;560
0001bc  481a              LDR      r0,|L5.552|
0001be  f7fffffe          BL       app_nrf_SendBleData
0001c2  2400              MOVS     r4,#0                 ;568
0001c4  e024              B        |L5.528|
                  |L5.454|
0001c6  20c8              MOVS     r0,#0xc8              ;582
0001c8  f7fffffe          BL       vTaskDelay
0001cc  2134              MOVS     r1,#0x34              ;583
0001ce  a801              ADD      r0,sp,#4              ;583
0001d0  f7fffffe          BL       __aeabi_memclr4
0001d4  a801              ADD      r0,sp,#4              ;584
0001d6  f7fffffe          BL       app_nrf_ReadData
0001da  2801              CMP      r0,#1                 ;584
0001dc  d116              BNE      |L5.524|
0001de  f89d0005          LDRB     r0,[sp,#5]            ;584
0001e2  2849              CMP      r0,#0x49              ;584
0001e4  d112              BNE      |L5.524|
0001e6  f10d0209          ADD      r2,sp,#9              ;586
0001ea  4669              MOV      r1,sp                 ;586
0001ec  2001              MOVS     r0,#1                 ;586
0001ee  f7fffffe          BL       bsp_ble_ackResponse
0001f2  4810              LDR      r0,|L5.564|
0001f4  6800              LDR      r0,[r0,#0]            ;590  ; rxlen
0001f6  490b              LDR      r1,|L5.548|
0001f8  6809              LDR      r1,[r1,#0]            ;590  ; content_len
0001fa  4288              CMP      r0,r1                 ;590
0001fc  d105              BNE      |L5.522|
0001fe  480c              LDR      r0,|L5.560|
000200  8800              LDRH     r0,[r0,#0]            ;590  ; firmwarepacknum
000202  4287              CMP      r7,r0                 ;590
000204  d101              BNE      |L5.522|
000206  f7fffffe          BL       mqtt_disconnect
                  |L5.522|
00020a  e74b              B        |L5.164|
                  |L5.524|
00020c  1c60              ADDS     r0,r4,#1              ;568
00020e  b284              UXTH     r4,r0                 ;568
                  |L5.528|
000210  2c50              CMP      r4,#0x50              ;568
000212  dbd8              BLT      |L5.454|
000214  4a08              LDR      r2,|L5.568|
000216  4669              MOV      r1,sp                 ;603
000218  2000              MOVS     r0,#0                 ;603
00021a  f7fffffe          BL       bsp_ble_ackResponse
                  |L5.542|
00021e  bf00              NOP      
000220  e740              B        |L5.164|
;;;606    
                          ENDP

000222  0000              DCW      0x0000
                  |L5.548|
                          DCD      |symbol_number.51|
                  |L5.552|
                          DCD      buf
                  |L5.556|
                          DCD      firmwarelen
                  |L5.560|
                          DCD      |symbol_number.49|
                  |L5.564|
                          DCD      |symbol_number.50|
                  |L5.568|
                          DCD      new_bra
                  |L5.572|
                          DCD      updata_flag
                  |L5.576|
                          DCD      upd_bra

                          AREA ||i.bsp_ota_UpdataGateway||, CODE, READONLY, ALIGN=2

                  bsp_ota_UpdataGateway PROC
;;;93     */
;;;94     void bsp_ota_UpdataGateway(uint16_t messgelen,uint8_t* payload)
000000  e92d5fff          PUSH     {r0-r12,lr}
;;;95     {
000004  4605              MOV      r5,r0
000006  460c              MOV      r4,r1
;;;96     	uint8_t count=0;											//计数第几包 
000008  2700              MOVS     r7,#0
;;;97     
;;;98       uint16_t i;
;;;99     	uint16_t data;                        //接收数据
;;;100    	uint16_t status;                      //Flash状态		
;;;101    
;;;102    	uint32_t n_pages=0;                   //擦除的页
00000a  2000              MOVS     r0,#0
00000c  9003              STR      r0,[sp,#0xc]
;;;103    	uint32_t n_erased=0;
00000e  4683              MOV      r11,r0
;;;104      uint32_t firmwaretype;
;;;105    	
;;;106    	static uint16_t  lastpacknum = 0;        //上一包固件序号
;;;107    	static uint16_t  firmwarepacknum = 0;      //固件总包数
;;;108    	
;;;109    	static uint32_t rxlen=0;							//接收长度	
;;;110    	static uint32_t content_len=0;				//总字节
;;;111    	static uint32_t flashdest=BACKUPADRR;	//备份区地址
;;;112    		
;;;113    	/*包序号*/
;;;114    	count = payload[3] + payload[4]*256;  
000010  78e1              LDRB     r1,[r4,#3]
000012  7920              LDRB     r0,[r4,#4]
000014  eb012000          ADD      r0,r1,r0,LSL #8
000018  b2c7              UXTB     r7,r0
;;;115    	
;;;116    	uint8_t device_info[4] = {GATEWAY,STM32F103ZET6,TRANS_WW5500,NOSRAM};
00001a  a0ae              ADR      r0,|L6.724|
00001c  6800              LDR      r0,[r0,#0]
00001e  9001              STR      r0,[sp,#4]
;;;117    	uint8_t ask[4] = {ACK_DEVTYPE_ERROR,ACK_MCUTYPE_ERROR,ACK_TRSTYPE_ERROR,ACK_SRATYPE_ERROR};
000020  a0ad              ADR      r0,|L6.728|
000022  6800              LDR      r0,[r0,#0]
000024  9000              STR      r0,[sp,#0]
;;;118    	
;;;119    	if(lastpacknum == count)  /*重复固件包*/
000026  48ad              LDR      r0,|L6.732|
000028  8800              LDRH     r0,[r0,#0]  ; lastpacknum
00002a  42b8              CMP      r0,r7
00002c  d106              BNE      |L6.60|
;;;120    	{
;;;121    		bsp_ota_ackResponse( ACK_OK , &payload[messgelen-6] );	
00002e  1fa8              SUBS     r0,r5,#6
000030  1901              ADDS     r1,r0,r4
000032  2001              MOVS     r0,#1
000034  f7fffffe          BL       bsp_ota_ackResponse
                  |L6.56|
;;;122        return;		
;;;123    	}
;;;124    	
;;;125    	if(count == 1)       /*第一包数据*/
;;;126    	{ 		
;;;127    		content_len = 0;   /*清零总长度*/
;;;128    		for(i=0;i<4;i++)   /*获取固件长度*/
;;;129    		{
;;;130    			content_len |= (payload[7+i] << (8 * i));
;;;131    		}		
;;;132    					
;;;133    		/*固件长度错误*/
;;;134    		if(BACKUPADRR + content_len - FIRM_INFO_LEN > FLAGADRR)
;;;135    		{
;;;136    			#if APP_DEBUG
;;;137    			printf("firmware len error.\r\n");	 
;;;138    			#endif
;;;139    			bsp_ota_ackResponse( ACK_LEN_ERROR , &payload[messgelen-6] );
;;;140    			return;
;;;141    		}
;;;142    		
;;;143    		FLASH_Unlock();
;;;144    		FLASH_ClearFlag(FLASH_FLAG_BSY | FLASH_FLAG_EOP | FLASH_FLAG_PGERR | FLASH_FLAG_WRPRTERR);
;;;145    		n_pages = FLASH_PagesMask(content_len - FIRM_INFO_LEN);    /*计算要擦除的页*/
;;;146    		for(n_erased = 0; n_erased < n_pages; n_erased++)      		 /*擦除页*/
;;;147    		{			
;;;148    			status=FLASH_ErasePage(BACKUPADRR + 0x800 * n_erased);
;;;149    			if(status != 4)       /*擦除失败*/
;;;150    			{
;;;151    				#if APP_DEBUG
;;;152    				printf("eraser flash fail\r\n");
;;;153    				#endif
;;;154    				bsp_ota_ackResponse( ACK_ERASE_ERROR , &payload[messgelen-6] );
;;;155    				return;
;;;156    			}
;;;157    		}				
;;;158    		
;;;159    		rxlen = 0;                   /*接收计数清零*/
;;;160    		lastpacknum=count;           /*上一包固件序号*/
;;;161    		flashdest=BACKUPADRR;        /*写入开始地址*/
;;;162    		firmwarepacknum=payload[5]+payload[6]*256; /*总包数*/
;;;163    		
;;;164    		#if APP_DEBUG
;;;165    		printf("firmware_len:%d,total package num:%d\r\n",content_len - FIRM_INFO_LEN,firmwarepacknum);     /*固件总长度*/
;;;166    		printf("eraser flash Sucessful\r\n");
;;;167    		#endif
;;;168    		
;;;169    		bsp_ota_ackResponse( ACK_OK , &payload[messgelen-6] );
;;;170    	}
;;;171    	else if(count == 2)      
;;;172    	{
;;;173    		/*设备信息检查*/
;;;174    		for(uint8_t i = 0; i < 4;i++)
;;;175    		{
;;;176    			if(payload[5+i] != device_info[i])
;;;177    			{
;;;178    				bsp_ota_ackResponse( ask[i] , &payload[messgelen-6] );
;;;179    				#if APP_DEBUG
;;;180    				printf("firmware type error code:%d\r\n",i);
;;;181    				#endif
;;;182    				return;
;;;183    			}
;;;184    		}
;;;185    		
;;;186    		if(payload[12] < SOFTVERSION)
;;;187    		{                      
;;;188    			bsp_ota_ackResponse( ACK_VERTYPE_ERROR , &payload[messgelen-6] );
;;;189    			#if APP_DEBUG
;;;190    			printf("firmware version error\r\n");
;;;191    			#endif
;;;192    			return;			
;;;193    		}
;;;194    		
;;;195    		memcpy((uint8_t *)&firmwaretype,&payload[13],4);
;;;196    		if((firmwaretype & 0x2FFE0000) != 0x20000000)
;;;197    		{
;;;198    			#if APP_DEBUG
;;;199    			printf("firmware type error.\r\n");	 
;;;200    			#endif
;;;201    			bsp_ota_ackResponse( ACK_FIRTYPE_ERROR , &payload[messgelen-6] ); /*固件类型错误*/
;;;202    			return;			
;;;203    		}
;;;204    		
;;;205    		/*数据写入flash备份区*/
;;;206    		for(i = 0;i < messgelen - 11 - FIRM_INFO_LEN ; i += 2)
;;;207    		{
;;;208    			if(flashdest > FLAGADRR)        /*判断是否写入越界*/
;;;209    			{
;;;210    				flashdest = BACKUPADRR;       /*写入开始地址*/
;;;211    				#if APP_DEBUG
;;;212    				printf("write firmware over backupadrr.\r\n");
;;;213    				#endif 
;;;214    				bsp_ota_ackResponse( ACK_ADDROV_ERROR , &payload[messgelen-6] );
;;;215    				return;            
;;;216    			}
;;;217    			data = payload[i+6+FIRM_INFO_LEN];	
;;;218    			data = (data<<8) + payload[i+5+FIRM_INFO_LEN];
;;;219    			status = FLASH_ProgramHalfWord(flashdest, data);									      
;;;220    			flashdest += 2;	 
;;;221    			rxlen += 2;
;;;222    			if(status != 4)        /*写入flash失败*/
;;;223    			{
;;;224    				#if APP_DEBUG
;;;225    				printf("write flash fail\r\n");
;;;226    				#endif
;;;227    				
;;;228    				bsp_ota_ackResponse( ACK_WRITE_ERROR , &payload[messgelen-6] );
;;;229    				return;
;;;230    			}
;;;231    		} 
;;;232    		
;;;233    		lastpacknum = count;          /*上一包固件序号*/		
;;;234    		
;;;235    		#if APP_DEBUG
;;;236    		printf("download %6d bytes ok\r\n",rxlen);	 
;;;237    		#endif		
;;;238    		bsp_ota_ackResponse( ACK_OK , &payload[messgelen-6] );
;;;239    	}
;;;240    	else if(count > 2)       
;;;241    	{
;;;242    		/*数据写入flash备份区*/
;;;243    		for(i=0;i<messgelen-11;i+=2)
;;;244    		{
;;;245    			if(flashdest > FLAGADRR)        /*判断是否写入越界*/
;;;246    			{
;;;247    				flashdest = BACKUPADRR;         /*写入开始地址*/
;;;248    				#if APP_DEBUG
;;;249    				printf("write firmware over backupadrr.\r\n");
;;;250    				#endif
;;;251    				bsp_ota_ackResponse( ACK_ADDROV_ERROR , &payload[messgelen-6] );
;;;252    				return;            
;;;253    			}
;;;254    			data = payload[i+6];	
;;;255    			data = (data<<8) + payload[i+5];
;;;256    			status = FLASH_ProgramHalfWord(flashdest, data);									      
;;;257    			flashdest += 2;	 
;;;258    			rxlen += 2;
;;;259    			if(status != 4)        /*写入flash失败*/
;;;260    			{
;;;261    				#if APP_DEBUG
;;;262    				printf("write flash fail\r\n");
;;;263    				#endif
;;;264    				
;;;265    				bsp_ota_ackResponse( ACK_WRITE_ERROR , &payload[messgelen-6] );
;;;266    				return;
;;;267    			}
;;;268    		} 
;;;269    		
;;;270    		lastpacknum = count;          /*上一包固件序号*/		
;;;271    		
;;;272    		#if APP_DEBUG
;;;273    		printf("download %6d bytes ok\r\n",rxlen);	 
;;;274    		#endif
;;;275    		if((rxlen == content_len - FIRM_INFO_LEN) && ((count-1) == firmwarepacknum))   	  /*接收数据完成*/
;;;276    		{				
;;;277    			bsp_ota_ackResponse( ACK_OK , &payload[messgelen-6] );
;;;278    			
;;;279    			/*写入文件长度*/									 
;;;280    			if(!(bsp_WriteCpuFlash(FLAGADRR,(uint8_t *)&rxlen,4)))
;;;281    			{
;;;282    				#if APP_DEBUG
;;;283    				printf("\r\nReady t o reboot.......\r\n");
;;;284    				#endif
;;;285    				/*断开Mqtt连接*/
;;;286    				mqtt_disconnect();
;;;287    				vTaskDelay(5000);
;;;288    				__set_FAULTMASK(1);
;;;289    				NVIC_SystemReset();  /*重启系统*/
;;;290    			}
;;;291    			else	/*写入标志位失败*/
;;;292    			{
;;;293    				#if APP_DEBUG
;;;294    				printf("write flag fail\r\n");
;;;295            #endif			  
;;;296    				bsp_ota_ackResponse( ACK_FLAG_ERROR , &payload[messgelen-6] );
;;;297    				return;
;;;298    			}
;;;299    		}			
;;;300        else
;;;301    		{
;;;302    			bsp_ota_ackResponse( ACK_OK , &payload[messgelen-6] );
;;;303    		}			
;;;304    	}		 
;;;305    }
000038  e8bd9fff          POP      {r0-r12,pc}
                  |L6.60|
00003c  2f01              CMP      r7,#1                 ;125
00003e  d158              BNE      |L6.242|
000040  2000              MOVS     r0,#0                 ;127
000042  49a7              LDR      r1,|L6.736|
000044  6008              STR      r0,[r1,#0]            ;127  ; content_len
000046  2600              MOVS     r6,#0                 ;128
000048  e00a              B        |L6.96|
                  |L6.74|
00004a  1df0              ADDS     r0,r6,#7              ;130
00004c  5c20              LDRB     r0,[r4,r0]            ;130
00004e  00f1              LSLS     r1,r6,#3              ;130
000050  4088              LSLS     r0,r0,r1              ;130
000052  49a3              LDR      r1,|L6.736|
000054  6809              LDR      r1,[r1,#0]            ;130  ; content_len
000056  4308              ORRS     r0,r0,r1              ;130
000058  49a1              LDR      r1,|L6.736|
00005a  6008              STR      r0,[r1,#0]            ;130  ; content_len
00005c  1c70              ADDS     r0,r6,#1              ;128
00005e  b286              UXTH     r6,r0                 ;128
                  |L6.96|
000060  2e04              CMP      r6,#4                 ;128
000062  dbf2              BLT      |L6.74|
000064  489e              LDR      r0,|L6.736|
000066  6800              LDR      r0,[r0,#0]            ;134  ; content_len
000068  499e              LDR      r1,|L6.740|
00006a  4408              ADD      r0,r0,r1              ;134
00006c  3808              SUBS     r0,r0,#8              ;134
00006e  499e              LDR      r1,|L6.744|
000070  4288              CMP      r0,r1                 ;134
000072  d905              BLS      |L6.128|
000074  1fa8              SUBS     r0,r5,#6              ;139
000076  1901              ADDS     r1,r0,r4              ;139
000078  2004              MOVS     r0,#4                 ;139
00007a  f7fffffe          BL       bsp_ota_ackResponse
00007e  e7db              B        |L6.56|
                  |L6.128|
000080  f7fffffe          BL       FLASH_Unlock
000084  2035              MOVS     r0,#0x35              ;144
000086  f7fffffe          BL       FLASH_ClearFlag
00008a  4995              LDR      r1,|L6.736|
00008c  6809              LDR      r1,[r1,#0]            ;145  ; content_len
00008e  f1a10008          SUB      r0,r1,#8              ;145
000092  f7fffffe          BL       FLASH_PagesMask
000096  9003              STR      r0,[sp,#0xc]          ;145
000098  f04f0b00          MOV      r11,#0                ;146
00009c  e012              B        |L6.196|
                  |L6.158|
00009e  4991              LDR      r1,|L6.740|
0000a0  f44f6200          MOV      r2,#0x800             ;148
0000a4  fb02100b          MLA      r0,r2,r11,r1          ;148
0000a8  f7fffffe          BL       FLASH_ErasePage
0000ac  4680              MOV      r8,r0                 ;148
0000ae  f1b80f04          CMP      r8,#4                 ;149
0000b2  d005              BEQ      |L6.192|
0000b4  1fa8              SUBS     r0,r5,#6              ;154
0000b6  1901              ADDS     r1,r0,r4              ;154
0000b8  2002              MOVS     r0,#2                 ;154
0000ba  f7fffffe          BL       bsp_ota_ackResponse
0000be  e7bb              B        |L6.56|
                  |L6.192|
0000c0  f10b0b01          ADD      r11,r11,#1            ;146
                  |L6.196|
0000c4  9803              LDR      r0,[sp,#0xc]          ;146
0000c6  4583              CMP      r11,r0                ;146
0000c8  d3e9              BCC      |L6.158|
0000ca  2000              MOVS     r0,#0                 ;159
0000cc  4987              LDR      r1,|L6.748|
0000ce  6008              STR      r0,[r1,#0]            ;159  ; rxlen
0000d0  4882              LDR      r0,|L6.732|
0000d2  8007              STRH     r7,[r0,#0]            ;160
0000d4  4883              LDR      r0,|L6.740|
0000d6  4986              LDR      r1,|L6.752|
0000d8  6008              STR      r0,[r1,#0]            ;161  ; flashdest
0000da  7961              LDRB     r1,[r4,#5]            ;162
0000dc  79a0              LDRB     r0,[r4,#6]            ;162
0000de  eb012000          ADD      r0,r1,r0,LSL #8       ;162
0000e2  4984              LDR      r1,|L6.756|
0000e4  8008              STRH     r0,[r1,#0]            ;162
0000e6  1fa8              SUBS     r0,r5,#6              ;169
0000e8  1901              ADDS     r1,r0,r4              ;169
0000ea  2001              MOVS     r0,#1                 ;169
0000ec  f7fffffe          BL       bsp_ota_ackResponse
0000f0  e0ee              B        |L6.720|
                  |L6.242|
0000f2  2f02              CMP      r7,#2                 ;171
0000f4  d172              BNE      |L6.476|
0000f6  f04f0900          MOV      r9,#0                 ;174
0000fa  e012              B        |L6.290|
                  |L6.252|
0000fc  f1090005          ADD      r0,r9,#5              ;176
000100  5c20              LDRB     r0,[r4,r0]            ;176
000102  a901              ADD      r1,sp,#4              ;176
000104  f8111009          LDRB     r1,[r1,r9]            ;176
000108  4288              CMP      r0,r1                 ;176
00010a  d006              BEQ      |L6.282|
00010c  1faa              SUBS     r2,r5,#6              ;178
00010e  1911              ADDS     r1,r2,r4              ;178
000110  f81d0009          LDRB     r0,[sp,r9]            ;178
000114  f7fffffe          BL       bsp_ota_ackResponse
000118  e78e              B        |L6.56|
                  |L6.282|
00011a  f1090001          ADD      r0,r9,#1              ;174
00011e  f00009ff          AND      r9,r0,#0xff           ;174
                  |L6.290|
000122  f1b90f04          CMP      r9,#4                 ;174
000126  dbe9              BLT      |L6.252|
000128  7b20              LDRB     r0,[r4,#0xc]          ;186
00012a  280e              CMP      r0,#0xe               ;186
00012c  da05              BGE      |L6.314|
00012e  1fa8              SUBS     r0,r5,#6              ;188
000130  1901              ADDS     r1,r0,r4              ;188
000132  200d              MOVS     r0,#0xd               ;188
000134  f7fffffe          BL       bsp_ota_ackResponse
000138  e77e              B        |L6.56|
                  |L6.314|
00013a  f8d4000d          LDR      r0,[r4,#0xd]          ;195
00013e  9002              STR      r0,[sp,#8]            ;195
000140  496d              LDR      r1,|L6.760|
000142  9802              LDR      r0,[sp,#8]            ;196
000144  4008              ANDS     r0,r0,r1              ;196
000146  f1b05f00          CMP      r0,#0x20000000        ;196
00014a  d005              BEQ      |L6.344|
00014c  1fa8              SUBS     r0,r5,#6              ;201
00014e  1901              ADDS     r1,r0,r4              ;201
000150  2008              MOVS     r0,#8                 ;201
000152  f7fffffe          BL       bsp_ota_ackResponse
000156  e76f              B        |L6.56|
                  |L6.344|
000158  2600              MOVS     r6,#0                 ;206
00015a  e032              B        |L6.450|
                  |L6.348|
00015c  4864              LDR      r0,|L6.752|
00015e  6800              LDR      r0,[r0,#0]            ;208  ; flashdest
000160  4961              LDR      r1,|L6.744|
000162  4288              CMP      r0,r1                 ;208
000164  d908              BLS      |L6.376|
000166  485f              LDR      r0,|L6.740|
000168  4961              LDR      r1,|L6.752|
00016a  6008              STR      r0,[r1,#0]            ;210  ; flashdest
00016c  1fa8              SUBS     r0,r5,#6              ;214
00016e  1901              ADDS     r1,r0,r4              ;214
000170  2007              MOVS     r0,#7                 ;214
000172  f7fffffe          BL       bsp_ota_ackResponse
000176  e75f              B        |L6.56|
                  |L6.376|
000178  f106000e          ADD      r0,r6,#0xe            ;217
00017c  f814a000          LDRB     r10,[r4,r0]           ;217
000180  1e40              SUBS     r0,r0,#1              ;218
000182  5c20              LDRB     r0,[r4,r0]            ;218
000184  eb00200a          ADD      r0,r0,r10,LSL #8      ;218
000188  fa1ffa80          UXTH     r10,r0                ;218
00018c  4651              MOV      r1,r10                ;219
00018e  4858              LDR      r0,|L6.752|
000190  6800              LDR      r0,[r0,#0]            ;219  ; flashdest
000192  f7fffffe          BL       FLASH_ProgramHalfWord
000196  4680              MOV      r8,r0                 ;219
000198  4855              LDR      r0,|L6.752|
00019a  6800              LDR      r0,[r0,#0]            ;220  ; flashdest
00019c  1c80              ADDS     r0,r0,#2              ;220
00019e  4954              LDR      r1,|L6.752|
0001a0  6008              STR      r0,[r1,#0]            ;220  ; flashdest
0001a2  4852              LDR      r0,|L6.748|
0001a4  6800              LDR      r0,[r0,#0]            ;221  ; rxlen
0001a6  1c80              ADDS     r0,r0,#2              ;221
0001a8  4950              LDR      r1,|L6.748|
0001aa  6008              STR      r0,[r1,#0]            ;221  ; rxlen
0001ac  f1b80f04          CMP      r8,#4                 ;222
0001b0  d005              BEQ      |L6.446|
0001b2  1fa8              SUBS     r0,r5,#6              ;228
0001b4  1901              ADDS     r1,r0,r4              ;228
0001b6  2003              MOVS     r0,#3                 ;228
0001b8  f7fffffe          BL       bsp_ota_ackResponse
0001bc  e73c              B        |L6.56|
                  |L6.446|
0001be  1cb0              ADDS     r0,r6,#2              ;206
0001c0  b286              UXTH     r6,r0                 ;206
                  |L6.450|
0001c2  f1a50013          SUB      r0,r5,#0x13           ;206
0001c6  42b0              CMP      r0,r6                 ;206
0001c8  dcc8              BGT      |L6.348|
0001ca  4844              LDR      r0,|L6.732|
0001cc  8007              STRH     r7,[r0,#0]            ;233
0001ce  1fa8              SUBS     r0,r5,#6              ;238
0001d0  1901              ADDS     r1,r0,r4              ;238
0001d2  2001              MOVS     r0,#1                 ;238
0001d4  f7fffffe          BL       bsp_ota_ackResponse
0001d8  e07a              B        |L6.720|
0001da  e7ff              B        |L6.476|
                  |L6.476|
0001dc  2f02              CMP      r7,#2                 ;240
0001de  dd77              BLE      |L6.720|
0001e0  2600              MOVS     r6,#0                 ;243
0001e2  e031              B        |L6.584|
                  |L6.484|
0001e4  4842              LDR      r0,|L6.752|
0001e6  6800              LDR      r0,[r0,#0]            ;245  ; flashdest
0001e8  493f              LDR      r1,|L6.744|
0001ea  4288              CMP      r0,r1                 ;245
0001ec  d908              BLS      |L6.512|
0001ee  483d              LDR      r0,|L6.740|
0001f0  493f              LDR      r1,|L6.752|
0001f2  6008              STR      r0,[r1,#0]            ;247  ; flashdest
0001f4  1fa8              SUBS     r0,r5,#6              ;251
0001f6  1901              ADDS     r1,r0,r4              ;251
0001f8  2007              MOVS     r0,#7                 ;251
0001fa  f7fffffe          BL       bsp_ota_ackResponse
0001fe  e71b              B        |L6.56|
                  |L6.512|
000200  1db0              ADDS     r0,r6,#6              ;254
000202  f814a000          LDRB     r10,[r4,r0]           ;254
000206  1d70              ADDS     r0,r6,#5              ;255
000208  5c20              LDRB     r0,[r4,r0]            ;255
00020a  eb00200a          ADD      r0,r0,r10,LSL #8      ;255
00020e  fa1ffa80          UXTH     r10,r0                ;255
000212  4651              MOV      r1,r10                ;256
000214  4836              LDR      r0,|L6.752|
000216  6800              LDR      r0,[r0,#0]            ;256  ; flashdest
000218  f7fffffe          BL       FLASH_ProgramHalfWord
00021c  4680              MOV      r8,r0                 ;256
00021e  4834              LDR      r0,|L6.752|
000220  6800              LDR      r0,[r0,#0]            ;257  ; flashdest
000222  1c80              ADDS     r0,r0,#2              ;257
000224  4932              LDR      r1,|L6.752|
000226  6008              STR      r0,[r1,#0]            ;257  ; flashdest
000228  4830              LDR      r0,|L6.748|
00022a  6800              LDR      r0,[r0,#0]            ;258  ; rxlen
00022c  1c80              ADDS     r0,r0,#2              ;258
00022e  492f              LDR      r1,|L6.748|
000230  6008              STR      r0,[r1,#0]            ;258  ; rxlen
000232  f1b80f04          CMP      r8,#4                 ;259
000236  d005              BEQ      |L6.580|
000238  1fa8              SUBS     r0,r5,#6              ;265
00023a  1901              ADDS     r1,r0,r4              ;265
00023c  2003              MOVS     r0,#3                 ;265
00023e  f7fffffe          BL       bsp_ota_ackResponse
000242  e6f9              B        |L6.56|
                  |L6.580|
000244  1cb0              ADDS     r0,r6,#2              ;243
000246  b286              UXTH     r6,r0                 ;243
                  |L6.584|
000248  f1a5000b          SUB      r0,r5,#0xb            ;243
00024c  42b0              CMP      r0,r6                 ;243
00024e  dcc9              BGT      |L6.484|
000250  4822              LDR      r0,|L6.732|
000252  8007              STRH     r7,[r0,#0]            ;270
000254  4822              LDR      r0,|L6.736|
000256  6800              LDR      r0,[r0,#0]            ;275  ; content_len
000258  3808              SUBS     r0,r0,#8              ;275
00025a  4924              LDR      r1,|L6.748|
00025c  6809              LDR      r1,[r1,#0]            ;275  ; rxlen
00025e  4288              CMP      r0,r1                 ;275
000260  d131              BNE      |L6.710|
000262  1e78              SUBS     r0,r7,#1              ;275
000264  4923              LDR      r1,|L6.756|
000266  8809              LDRH     r1,[r1,#0]            ;275  ; firmwarepacknum
000268  4288              CMP      r0,r1                 ;275
00026a  d12c              BNE      |L6.710|
00026c  1fa8              SUBS     r0,r5,#6              ;277
00026e  1901              ADDS     r1,r0,r4              ;277
000270  2001              MOVS     r0,#1                 ;277
000272  f7fffffe          BL       bsp_ota_ackResponse
000276  2204              MOVS     r2,#4                 ;280
000278  491c              LDR      r1,|L6.748|
00027a  481b              LDR      r0,|L6.744|
00027c  f7fffffe          BL       bsp_WriteCpuFlash
000280  b9d0              CBNZ     r0,|L6.696|
000282  f7fffffe          BL       mqtt_disconnect
000286  f2413088          MOV      r0,#0x1388            ;287
00028a  f7fffffe          BL       vTaskDelay
00028e  2001              MOVS     r0,#1                 ;288
000290  f3808813          MSR      FAULTMASK,r0          ;288
000294  bf00              NOP                            ;288
000296  bf00              NOP                            ;289
000298  f3bf8f4f          DSB                            ;289
00029c  4817              LDR      r0,|L6.764|
00029e  6800              LDR      r0,[r0,#0]            ;289
0002a0  f40060e0          AND      r0,r0,#0x700          ;289
0002a4  4916              LDR      r1,|L6.768|
0002a6  4308              ORRS     r0,r0,r1              ;289
0002a8  1d00              ADDS     r0,r0,#4              ;289
0002aa  4914              LDR      r1,|L6.764|
0002ac  6008              STR      r0,[r1,#0]            ;289
0002ae  f3bf8f4f          DSB                            ;289
0002b2  bf00              NOP                            ;289
0002b4  bf00              NOP                            ;289
                  |L6.694|
0002b6  e7fe              B        |L6.694|
                  |L6.696|
0002b8  1fa8              SUBS     r0,r5,#6              ;296
0002ba  1901              ADDS     r1,r0,r4              ;296
0002bc  2005              MOVS     r0,#5                 ;296
0002be  f7fffffe          BL       bsp_ota_ackResponse
0002c2  e6b9              B        |L6.56|
0002c4  e004              B        |L6.720|
                  |L6.710|
0002c6  1fa8              SUBS     r0,r5,#6              ;302
0002c8  1901              ADDS     r1,r0,r4              ;302
0002ca  2001              MOVS     r0,#1                 ;302
0002cc  f7fffffe          BL       bsp_ota_ackResponse
                  |L6.720|
0002d0  bf00              NOP      
0002d2  e6b1              B        |L6.56|
;;;306    /*
                          ENDP

                  |L6.724|
0002d4  01010101          DCB      1,1,1,1
                  |L6.728|
0002d8  090a0b0c          DCB      "\t\n\v\f"
                  |L6.732|
                          DCD      lastpacknum
                  |L6.736|
                          DCD      content_len
                  |L6.740|
                          DCD      0x08043800
                  |L6.744|
                          DCD      0x0807f000
                  |L6.748|
                          DCD      rxlen
                  |L6.752|
                          DCD      flashdest
                  |L6.756|
                          DCD      firmwarepacknum
                  |L6.760|
                          DCD      0x2ffe0000
                  |L6.764|
                          DCD      0xe000ed0c
                  |L6.768|
                          DCD      0x05fa0000

                          AREA ||i.bsp_ota_ackResponse||, CODE, READONLY, ALIGN=2

                  bsp_ota_ackResponse PROC
;;;35     */
;;;36     static void bsp_ota_ackResponse( uint8_t asktype , uint8_t *serialnumber )
000000  b530              PUSH     {r4,r5,lr}
;;;37     {
000002  b087              SUB      sp,sp,#0x1c
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
;;;38     	uint16_t crcdata;
;;;39     	uint8_t ackbuf[18]={0x0E,0x00,0x3A};
000008  2214              MOVS     r2,#0x14
00000a  4919              LDR      r1,|L7.112|
00000c  a801              ADD      r0,sp,#4
00000e  f7fffffe          BL       __aeabi_memcpy4
;;;40     	
;;;41     	ackbuf[2] = UPDATA;
000012  203a              MOVS     r0,#0x3a
000014  f88d0006          STRB     r0,[sp,#6]
;;;42     	ackbuf[11] = asktype;
000018  f88d400f          STRB     r4,[sp,#0xf]
;;;43     	
;;;44     	memset(&ackbuf[3],0,2);                           /*网关设备ID低字节补齐*/
00001c  2000              MOVS     r0,#0
00001e  f8ad0007          STRH     r0,[sp,#7]
;;;45     	memcpy(&ackbuf[5],sysCfg.parameter.client_mac,6); /*网关ID*/
000022  4814              LDR      r0,|L7.116|
000024  6801              LDR      r1,[r0,#0]  ; sysCfg
000026  f8cd1009          STR      r1,[sp,#9]
00002a  8880              LDRH     r0,[r0,#4]  ; sysCfg
00002c  f8ad000d          STRH     r0,[sp,#0xd]
;;;46     	memcpy(&ackbuf[12],serialnumber,4);     				  /*数据包流水号*/
000030  6828              LDR      r0,[r5,#0]
000032  9004              STR      r0,[sp,#0x10]
;;;47     	
;;;48     	/*CRC校验*/
;;;49     	crcdata=app_plat_usMBCRC16(ackbuf,ackbuf[1]*256+ackbuf[0]+2);
000034  f89d2004          LDRB     r2,[sp,#4]
000038  f89d0005          LDRB     r0,[sp,#5]
00003c  eb022000          ADD      r0,r2,r0,LSL #8
000040  1c80              ADDS     r0,r0,#2
000042  b281              UXTH     r1,r0
000044  a801              ADD      r0,sp,#4
000046  f7fffffe          BL       app_plat_usMBCRC16
00004a  9006              STR      r0,[sp,#0x18]
;;;50     	memcpy(&ackbuf[16],(uint8_t *)&crcdata,2);  
00004c  f8bd0018          LDRH     r0,[sp,#0x18]
000050  f8ad0014          STRH     r0,[sp,#0x14]
;;;51       mqtt_publish( SOCK_TCPS , UPDATABCD_TOPIC , (char *)ackbuf , ackbuf[1]*256+ackbuf[0]+4 );
000054  f89d1004          LDRB     r1,[sp,#4]
000058  f89d0005          LDRB     r0,[sp,#5]
00005c  eb012000          ADD      r0,r1,r0,LSL #8
000060  1d03              ADDS     r3,r0,#4
000062  aa01              ADD      r2,sp,#4
000064  a104              ADR      r1,|L7.120|
000066  2000              MOVS     r0,#0
000068  f7fffffe          BL       mqtt_publish
;;;52     }
00006c  b007              ADD      sp,sp,#0x1c
00006e  bd30              POP      {r4,r5,pc}
;;;53     /*
                          ENDP

                  |L7.112|
                          DCD      ||.constdata||+0x200
                  |L7.116|
                          DCD      sysCfg+0xda
                  |L7.120|
000078  2f696f74          DCB      "/iot_gateway/update/ack",0
00007c  5f676174
000080  65776179
000084  2f757064
000088  6174652f
00008c  61636b00

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  aucCRCHi
000000  00c18140          DCB      0x00,0xc1,0x81,0x40
000004  01c08041          DCB      0x01,0xc0,0x80,0x41
000008  01c08041          DCB      0x01,0xc0,0x80,0x41
00000c  00c18140          DCB      0x00,0xc1,0x81,0x40
000010  01c08041          DCB      0x01,0xc0,0x80,0x41
000014  00c18140          DCB      0x00,0xc1,0x81,0x40
000018  00c18140          DCB      0x00,0xc1,0x81,0x40
00001c  01c08041          DCB      0x01,0xc0,0x80,0x41
000020  01c08041          DCB      0x01,0xc0,0x80,0x41
000024  00c18140          DCB      0x00,0xc1,0x81,0x40
000028  00c18140          DCB      0x00,0xc1,0x81,0x40
00002c  01c08041          DCB      0x01,0xc0,0x80,0x41
000030  00c18140          DCB      0x00,0xc1,0x81,0x40
000034  01c08041          DCB      0x01,0xc0,0x80,0x41
000038  01c08041          DCB      0x01,0xc0,0x80,0x41
00003c  00c18140          DCB      0x00,0xc1,0x81,0x40
000040  01c08041          DCB      0x01,0xc0,0x80,0x41
000044  00c18140          DCB      0x00,0xc1,0x81,0x40
000048  00c18140          DCB      0x00,0xc1,0x81,0x40
00004c  01c08041          DCB      0x01,0xc0,0x80,0x41
000050  00c18140          DCB      0x00,0xc1,0x81,0x40
000054  01c08041          DCB      0x01,0xc0,0x80,0x41
000058  01c08041          DCB      0x01,0xc0,0x80,0x41
00005c  00c18140          DCB      0x00,0xc1,0x81,0x40
000060  00c18140          DCB      0x00,0xc1,0x81,0x40
000064  01c08041          DCB      0x01,0xc0,0x80,0x41
000068  01c08041          DCB      0x01,0xc0,0x80,0x41
00006c  00c18140          DCB      0x00,0xc1,0x81,0x40
000070  01c08041          DCB      0x01,0xc0,0x80,0x41
000074  00c18140          DCB      0x00,0xc1,0x81,0x40
000078  00c18140          DCB      0x00,0xc1,0x81,0x40
00007c  01c08041          DCB      0x01,0xc0,0x80,0x41
000080  01c08041          DCB      0x01,0xc0,0x80,0x41
000084  00c18140          DCB      0x00,0xc1,0x81,0x40
000088  00c18140          DCB      0x00,0xc1,0x81,0x40
00008c  01c08041          DCB      0x01,0xc0,0x80,0x41
000090  00c18140          DCB      0x00,0xc1,0x81,0x40
000094  01c08041          DCB      0x01,0xc0,0x80,0x41
000098  01c08041          DCB      0x01,0xc0,0x80,0x41
00009c  00c18140          DCB      0x00,0xc1,0x81,0x40
0000a0  00c18140          DCB      0x00,0xc1,0x81,0x40
0000a4  01c08041          DCB      0x01,0xc0,0x80,0x41
0000a8  01c08041          DCB      0x01,0xc0,0x80,0x41
0000ac  00c18140          DCB      0x00,0xc1,0x81,0x40
0000b0  01c08041          DCB      0x01,0xc0,0x80,0x41
0000b4  00c18140          DCB      0x00,0xc1,0x81,0x40
0000b8  00c18140          DCB      0x00,0xc1,0x81,0x40
0000bc  01c08041          DCB      0x01,0xc0,0x80,0x41
0000c0  00c18140          DCB      0x00,0xc1,0x81,0x40
0000c4  01c08041          DCB      0x01,0xc0,0x80,0x41
0000c8  01c08041          DCB      0x01,0xc0,0x80,0x41
0000cc  00c18140          DCB      0x00,0xc1,0x81,0x40
0000d0  01c08041          DCB      0x01,0xc0,0x80,0x41
0000d4  00c18140          DCB      0x00,0xc1,0x81,0x40
0000d8  00c18140          DCB      0x00,0xc1,0x81,0x40
0000dc  01c08041          DCB      0x01,0xc0,0x80,0x41
0000e0  01c08041          DCB      0x01,0xc0,0x80,0x41
0000e4  00c18140          DCB      0x00,0xc1,0x81,0x40
0000e8  00c18140          DCB      0x00,0xc1,0x81,0x40
0000ec  01c08041          DCB      0x01,0xc0,0x80,0x41
0000f0  00c18140          DCB      0x00,0xc1,0x81,0x40
0000f4  01c08041          DCB      0x01,0xc0,0x80,0x41
0000f8  01c08041          DCB      0x01,0xc0,0x80,0x41
0000fc  00c18140          DCB      0x00,0xc1,0x81,0x40
                  aucCRCLo
000100  00c0c101          DCB      0x00,0xc0,0xc1,0x01
000104  c30302c2          DCB      0xc3,0x03,0x02,0xc2
000108  c60607c7          DCB      0xc6,0x06,0x07,0xc7
00010c  05c5c404          DCB      0x05,0xc5,0xc4,0x04
000110  cc0c0dcd          DCB      0xcc,0x0c,0x0d,0xcd
000114  0fcfce0e          DCB      0x0f,0xcf,0xce,0x0e
000118  0acacb0b          DCB      0x0a,0xca,0xcb,0x0b
00011c  c90908c8          DCB      0xc9,0x09,0x08,0xc8
000120  d81819d9          DCB      0xd8,0x18,0x19,0xd9
000124  1bdbda1a          DCB      0x1b,0xdb,0xda,0x1a
000128  1ededf1f          DCB      0x1e,0xde,0xdf,0x1f
00012c  dd1d1cdc          DCB      0xdd,0x1d,0x1c,0xdc
000130  14d4d515          DCB      0x14,0xd4,0xd5,0x15
000134  d71716d6          DCB      0xd7,0x17,0x16,0xd6
000138  d21213d3          DCB      0xd2,0x12,0x13,0xd3
00013c  11d1d010          DCB      0x11,0xd1,0xd0,0x10
000140  f03031f1          DCB      0xf0,0x30,0x31,0xf1
000144  33f3f232          DCB      0x33,0xf3,0xf2,0x32
000148  36f6f737          DCB      0x36,0xf6,0xf7,0x37
00014c  f53534f4          DCB      0xf5,0x35,0x34,0xf4
000150  3cfcfd3d          DCB      0x3c,0xfc,0xfd,0x3d
000154  ff3f3efe          DCB      0xff,0x3f,0x3e,0xfe
000158  fa3a3bfb          DCB      0xfa,0x3a,0x3b,0xfb
00015c  39f9f838          DCB      0x39,0xf9,0xf8,0x38
000160  28e8e929          DCB      0x28,0xe8,0xe9,0x29
000164  eb2b2aea          DCB      0xeb,0x2b,0x2a,0xea
000168  ee2e2fef          DCB      0xee,0x2e,0x2f,0xef
00016c  2dedec2c          DCB      0x2d,0xed,0xec,0x2c
000170  e42425e5          DCB      0xe4,0x24,0x25,0xe5
000174  27e7e626          DCB      0x27,0xe7,0xe6,0x26
000178  22e2e323          DCB      0x22,0xe2,0xe3,0x23
00017c  e12120e0          DCB      0xe1,0x21,0x20,0xe0
000180  a06061a1          DCB      0xa0,0x60,0x61,0xa1
000184  63a3a262          DCB      0x63,0xa3,0xa2,0x62
000188  66a6a767          DCB      0x66,0xa6,0xa7,0x67
00018c  a56564a4          DCB      0xa5,0x65,0x64,0xa4
000190  6cacad6d          DCB      0x6c,0xac,0xad,0x6d
000194  af6f6eae          DCB      0xaf,0x6f,0x6e,0xae
000198  aa6a6bab          DCB      0xaa,0x6a,0x6b,0xab
00019c  69a9a868          DCB      0x69,0xa9,0xa8,0x68
0001a0  78b8b979          DCB      0x78,0xb8,0xb9,0x79
0001a4  bb7b7aba          DCB      0xbb,0x7b,0x7a,0xba
0001a8  be7e7fbf          DCB      0xbe,0x7e,0x7f,0xbf
0001ac  7dbdbc7c          DCB      0x7d,0xbd,0xbc,0x7c
0001b0  b47475b5          DCB      0xb4,0x74,0x75,0xb5
0001b4  77b7b676          DCB      0x77,0xb7,0xb6,0x76
0001b8  72b2b373          DCB      0x72,0xb2,0xb3,0x73
0001bc  b17170b0          DCB      0xb1,0x71,0x70,0xb0
0001c0  50909151          DCB      0x50,0x90,0x91,0x51
0001c4  93535292          DCB      0x93,0x53,0x52,0x92
0001c8  96565797          DCB      0x96,0x56,0x57,0x97
0001cc  55959454          DCB      0x55,0x95,0x94,0x54
0001d0  9c5c5d9d          DCB      0x9c,0x5c,0x5d,0x9d
0001d4  5f9f9e5e          DCB      0x5f,0x9f,0x9e,0x5e
0001d8  5a9a9b5b          DCB      0x5a,0x9a,0x9b,0x5b
0001dc  99595898          DCB      0x99,0x59,0x58,0x98
0001e0  88484989          DCB      0x88,0x48,0x49,0x89
0001e4  4b8b8a4a          DCB      0x4b,0x8b,0x8a,0x4a
0001e8  4e8e8f4f          DCB      0x4e,0x8e,0x8f,0x4f
0001ec  8d4d4c8c          DCB      0x8d,0x4d,0x4c,0x8c
0001f0  44848545          DCB      0x44,0x84,0x85,0x45
0001f4  87474686          DCB      0x87,0x47,0x46,0x86
0001f8  82424383          DCB      0x82,0x42,0x43,0x83
0001fc  41818040          DCB      0x41,0x81,0x80,0x40
000200  0e003a00          DCB      0x0e,0x00,0x3a,0x00
                          %        12
000210  00000000          DCB      0x00,0x00,0x00,0x00
000214  16009a00          DCB      0x16,0x00,0x9a,0x00
000218  5a490019          DCB      0x5a,0x49,0x00,0x19
00021c  5a4903ef          DCB      0x5a,0x49,0x03,0xef

                          AREA ||.data||, DATA, ALIGN=2

                  xHandleTaskUserIF
                          DCD      0x00000000
                  xHandleCheckNet
                          DCD      0x00000000
                  xHandleTaskWEB
                          DCD      0x00000000
                  xHandleTaskMsgPro
                          DCD      0x00000000
                  xHandleTaskStart
                          DCD      0x00000000
                  xSemaphore
                          DCD      0x00000000
                  xMutex
                          DCD      0x00000000
                  xPingTimers
                          DCD      0x00000000
                  xNoNetTimers
                          DCD      0x00000000
                  xCreatedEventGroup
                          DCD      0x00000000
                  xUpdataEventGroup
                          DCD      0x00000000
                  xQueue1
                          DCD      0x00000000
                  lastpacknum
000030  0000              DCW      0x0000
                  firmwarepacknum
000032  0000              DCW      0x0000
                  rxlen
                          DCD      0x00000000
                  content_len
                          DCD      0x00000000
                  flashdest
                          DCD      0x08043800
                  buf
000040  00000000          DCB      0x00,0x00,0x00,0x00
000044  0000              DCB      0x00,0x00
                  updata_flag
000046  00                DCB      0x00
                  upd_bra
000047  00                DCB      0x00
                          DCD      0x00000000
00004c  00                DCB      0x00
                  new_bra
00004d  000000            DCB      0x00,0x00,0x00
000050  000000            DCB      0x00,0x00,0x00
                  firmwarelen
000053  00                DCB      0x00
000054  00000000          DCB      0x00,0x00,0x00,0x00
                  |symbol_number.49|
000058  00000000          DCB      0x00,0x00,0x00,0x00
                  |symbol_number.50|
                          DCD      0x00000000
                  |symbol_number.51|
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\..\\User\\bsp\\src\\bsp_mqtt_ota.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___14_bsp_mqtt_ota_c_02e964d5____REV16|
#line 114 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___14_bsp_mqtt_ota_c_02e964d5____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___14_bsp_mqtt_ota_c_02e964d5____REVSH|
#line 128
|__asm___14_bsp_mqtt_ota_c_02e964d5____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
