; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\flash\obj\mqttsubscribeserver.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\mqttsubscribeserver.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931,870 -I..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\User\bsp -I..\..\User\bsp\inc -I..\..\User -I..\..\Libraries\CMSIS\Include -I..\..\FreeRTOS\include -I..\..\FreeRTOS\portable\RVDS\ARM_CM3 -I..\..\MQTT -I..\..\Ethernet -I..\..\Ethernet\W5500 -I..\..\Internet\DHCP -I..\..\Internet\DNS -I..\..\User\app\src -I..\..\User\app\inc -I..\..\Internet\NTP -I..\..\Internet\HTTP -I.\RTE\_Flash -ID:\MDK5\ARM\CMSIS\5.0.1\CMSIS\Include -ID:\MDK5\Keil\STM32F1xx_DFP\2.0.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=523 -D_RTE_ -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=.\flash\obj\mqttsubscribeserver.crf ..\..\MQTT\MQTTSubscribeServer.c]
                          THUMB

                          AREA ||i.MQTTDeserialize_subscribe||, CODE, READONLY, ALIGN=1

                  MQTTDeserialize_subscribe PROC
;;;34       */
;;;35     int MQTTDeserialize_subscribe(unsigned char* dup, unsigned short* packetid, int maxcount, int* count, MQTTString topicFilters[],
000000  e92d4ffe          PUSH     {r1-r11,lr}
;;;36     	int requestedQoSs[], unsigned char* buf, int buflen)
;;;37     {
000004  4606              MOV      r6,r0
000006  460f              MOV      r7,r1
000008  461c              MOV      r4,r3
00000a  e9dd9a0d          LDRD     r9,r10,[sp,#0x34]
00000e  f8dd8030          LDR      r8,[sp,#0x30]
;;;38     	MQTTHeader header = {0};
000012  2000              MOVS     r0,#0
000014  9002              STR      r0,[sp,#8]
;;;39     	unsigned char* curdata = buf;
000016  f8cda004          STR      r10,[sp,#4]
;;;40     	unsigned char* enddata = NULL;
00001a  2500              MOVS     r5,#0
;;;41     	int rc = -1;
00001c  f04f3bff          MOV      r11,#0xffffffff
;;;42     	int mylen = 0;
000020  9000              STR      r0,[sp,#0]
;;;43     
;;;44     	FUNC_ENTRY;
;;;45     	header.byte = readChar(&curdata);
000022  a801              ADD      r0,sp,#4
000024  f7fffffe          BL       readChar
000028  f88d0008          STRB     r0,[sp,#8]
;;;46     	if (header.bits.type != SUBSCRIBE)
00002c  9802              LDR      r0,[sp,#8]
00002e  f3c01003          UBFX     r0,r0,#4,#4
000032  2808              CMP      r0,#8
000034  d000              BEQ      |L1.56|
;;;47     		goto exit;
000036  e033              B        |L1.160|
                  |L1.56|
;;;48     	*dup = header.bits.dup;
000038  9802              LDR      r0,[sp,#8]
00003a  f3c000c0          UBFX     r0,r0,#3,#1
00003e  7030              STRB     r0,[r6,#0]
;;;49     
;;;50     	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
000040  4669              MOV      r1,sp
000042  9801              LDR      r0,[sp,#4]
000044  f7fffffe          BL       MQTTPacket_decodeBuf
000048  4683              MOV      r11,r0
00004a  9901              LDR      r1,[sp,#4]
00004c  4408              ADD      r0,r0,r1
00004e  9001              STR      r0,[sp,#4]
;;;51     	enddata = curdata + mylen;
000050  e9dd1000          LDRD     r1,r0,[sp,#0]
000054  1845              ADDS     r5,r0,r1
;;;52     
;;;53     	*packetid = readInt(&curdata);
000056  a801              ADD      r0,sp,#4
000058  f7fffffe          BL       readInt
00005c  8038              STRH     r0,[r7,#0]
;;;54     
;;;55     	*count = 0;
00005e  2000              MOVS     r0,#0
000060  6020              STR      r0,[r4,#0]
;;;56     	while (curdata < enddata)
000062  e017              B        |L1.148|
                  |L1.100|
;;;57     	{
;;;58     		if (!readMQTTLenString(&topicFilters[*count], &curdata, enddata))
000064  6821              LDR      r1,[r4,#0]
000066  eb010141          ADD      r1,r1,r1,LSL #1
00006a  eb080081          ADD      r0,r8,r1,LSL #2
00006e  462a              MOV      r2,r5
000070  a901              ADD      r1,sp,#4
000072  f7fffffe          BL       readMQTTLenString
000076  b900              CBNZ     r0,|L1.122|
;;;59     			goto exit;
000078  e012              B        |L1.160|
                  |L1.122|
;;;60     		if (curdata >= enddata) /* do we have enough data to read the req_qos version byte? */
00007a  9801              LDR      r0,[sp,#4]
00007c  42a8              CMP      r0,r5
00007e  d300              BCC      |L1.130|
;;;61     			goto exit;
000080  e00e              B        |L1.160|
                  |L1.130|
;;;62     		requestedQoSs[*count] = readChar(&curdata);
000082  a801              ADD      r0,sp,#4
000084  f7fffffe          BL       readChar
000088  6821              LDR      r1,[r4,#0]
00008a  f8490021          STR      r0,[r9,r1,LSL #2]
;;;63     		(*count)++;
00008e  6820              LDR      r0,[r4,#0]
000090  1c40              ADDS     r0,r0,#1
000092  6020              STR      r0,[r4,#0]
                  |L1.148|
000094  9801              LDR      r0,[sp,#4]            ;56
000096  42a8              CMP      r0,r5                 ;56
000098  d3e4              BCC      |L1.100|
;;;64     	}
;;;65     
;;;66     	rc = 1;
00009a  f04f0b01          MOV      r11,#1
;;;67     exit:
00009e  bf00              NOP      
                  |L1.160|
;;;68     	FUNC_EXIT_RC(rc);
;;;69     	return rc;
0000a0  4658              MOV      r0,r11
;;;70     }
0000a2  e8bd8ffe          POP      {r1-r11,pc}
;;;71     
                          ENDP


                          AREA ||i.MQTTSerialize_suback||, CODE, READONLY, ALIGN=1

                  MQTTSerialize_suback PROC
;;;81       */
;;;82     int MQTTSerialize_suback(unsigned char* buf, int buflen, unsigned short packetid, int count, int* grantedQoSs)
000000  e92d47fc          PUSH     {r2-r10,lr}
;;;83     {
000004  4606              MOV      r6,r0
000006  460f              MOV      r7,r1
000008  4690              MOV      r8,r2
00000a  461c              MOV      r4,r3
00000c  f8dd9028          LDR      r9,[sp,#0x28]
;;;84     	MQTTHeader header = {0};
000010  2000              MOVS     r0,#0
000012  9001              STR      r0,[sp,#4]
;;;85     	int rc = -1;
000014  f04f3aff          MOV      r10,#0xffffffff
;;;86     	unsigned char *ptr = buf;
000018  9600              STR      r6,[sp,#0]
;;;87     	int i;
;;;88     
;;;89     	FUNC_ENTRY;
;;;90     	if (buflen < 2 + count)
00001a  1ca0              ADDS     r0,r4,#2
00001c  42b8              CMP      r0,r7
00001e  dd02              BLE      |L2.38|
;;;91     	{
;;;92     		rc = MQTTPACKET_BUFFER_TOO_SHORT;
000020  f06f0a01          MVN      r10,#1
;;;93     		goto exit;
000024  e025              B        |L2.114|
                  |L2.38|
;;;94     	}
;;;95     	header.byte = 0;
000026  2000              MOVS     r0,#0
000028  f88d0004          STRB     r0,[sp,#4]
;;;96     	header.bits.type = SUBACK;
00002c  9801              LDR      r0,[sp,#4]
00002e  f02000f0          BIC      r0,r0,#0xf0
000032  3090              ADDS     r0,r0,#0x90
000034  9001              STR      r0,[sp,#4]
;;;97     	writeChar(&ptr, header.byte); /* write header */
000036  f89d1004          LDRB     r1,[sp,#4]
00003a  4668              MOV      r0,sp
00003c  f7fffffe          BL       writeChar
;;;98     
;;;99     	ptr += MQTTPacket_encode(ptr, 2 + count); /* write remaining length */
000040  1ca1              ADDS     r1,r4,#2
000042  9800              LDR      r0,[sp,#0]
000044  f7fffffe          BL       MQTTPacket_encode
000048  9900              LDR      r1,[sp,#0]
00004a  4408              ADD      r0,r0,r1
00004c  9000              STR      r0,[sp,#0]
;;;100    
;;;101    	writeInt(&ptr, packetid);
00004e  4641              MOV      r1,r8
000050  4668              MOV      r0,sp
000052  f7fffffe          BL       writeInt
;;;102    
;;;103    	for (i = 0; i < count; ++i)
000056  2500              MOVS     r5,#0
000058  e005              B        |L2.102|
                  |L2.90|
;;;104    		writeChar(&ptr, grantedQoSs[i]);
00005a  f8191025          LDRB     r1,[r9,r5,LSL #2]
00005e  4668              MOV      r0,sp
000060  f7fffffe          BL       writeChar
000064  1c6d              ADDS     r5,r5,#1              ;103
                  |L2.102|
000066  42a5              CMP      r5,r4                 ;103
000068  dbf7              BLT      |L2.90|
;;;105    
;;;106    	rc = ptr - buf;
00006a  9800              LDR      r0,[sp,#0]
00006c  eba00a06          SUB      r10,r0,r6
;;;107    exit:
000070  bf00              NOP      
                  |L2.114|
;;;108    	FUNC_EXIT_RC(rc);
;;;109    	return rc;
000072  4650              MOV      r0,r10
;;;110    }
000074  e8bd87fc          POP      {r2-r10,pc}
;;;111    
                          ENDP

