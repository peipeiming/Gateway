; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\flash\obj\main.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\main.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931,870 -I..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\User\bsp -I..\..\User\bsp\inc -I..\..\User -I..\..\Libraries\CMSIS\Include -I..\..\FreeRTOS\include -I..\..\FreeRTOS\portable\RVDS\ARM_CM3 -I..\..\MQTT -I..\..\Ethernet -I..\..\Ethernet\W5500 -I..\..\Internet\DHCP -I..\..\Internet\DNS -I..\..\User\app\src -I..\..\User\app\inc -I..\..\Internet\NTP -I..\..\Internet\HTTP -I.\RTE\_Flash -ID:\MDK5\ARM\CMSIS\5.0.1\CMSIS\Include -ID:\MDK5\Keil\STM32F1xx_DFP\2.0.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=523 -D_RTE_ -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=.\flash\obj\main.crf ..\..\User\main.c]
                          THUMB

                          AREA ||i.AppObjCreate||, CODE, READONLY, ALIGN=2

                  AppObjCreate PROC
;;;535    */
;;;536    static void AppObjCreate (void)
000000  b5f8              PUSH     {r3-r7,lr}
;;;537    {
;;;538    	uint8_t i=0;
000002  2400              MOVS     r4,#0
;;;539    	const TickType_t  xTimerPer = 30000;
000004  f2475530          MOV      r5,#0x7530
;;;540    	/* 创建二值信号量，首次创建信号量计数值是0 */
;;;541    	xSemaphore = xSemaphoreCreateBinary();
000008  2203              MOVS     r2,#3
00000a  2100              MOVS     r1,#0
00000c  2001              MOVS     r0,#1
00000e  f7fffffe          BL       xQueueGenericCreate
000012  492c              LDR      r1,|L1.196|
000014  6008              STR      r0,[r1,#0]  ; xSemaphore
;;;542    	if(xSemaphore == NULL)
000016  4608              MOV      r0,r1
000018  6800              LDR      r0,[r0,#0]  ; xSemaphore
00001a  b920              CBNZ     r0,|L1.38|
;;;543    	{
;;;544    		printf("create xSemaphore fail\r\n");
00001c  a02a              ADR      r0,|L1.200|
00001e  f7fffffe          BL       __2printf
;;;545    		while(1);
000022  bf00              NOP      
                  |L1.36|
000024  e7fe              B        |L1.36|
                  |L1.38|
;;;546    	}
;;;547    	/* 创建检测任务运行事件标志组*/
;;;548    	xCreatedEventGroup = xEventGroupCreate();
000026  f7fffffe          BL       xEventGroupCreate
00002a  492e              LDR      r1,|L1.228|
00002c  6008              STR      r0,[r1,#0]  ; xCreatedEventGroup
;;;549    	if(xCreatedEventGroup == NULL)
00002e  4608              MOV      r0,r1
000030  6800              LDR      r0,[r0,#0]  ; xCreatedEventGroup
000032  b920              CBNZ     r0,|L1.62|
;;;550    	{
;;;551    		printf("create EventGroup fail\r\n");
000034  a02c              ADR      r0,|L1.232|
000036  f7fffffe          BL       __2printf
;;;552    		while(1);
00003a  bf00              NOP      
                  |L1.60|
00003c  e7fe              B        |L1.60|
                  |L1.62|
;;;553    	}	
;;;554    	
;;;555    	/*创建消息队列 消息队列长度为1*/
;;;556    	xQueue1 = xQueueCreate(2, sizeof(uint8_t));
00003e  2200              MOVS     r2,#0
000040  2101              MOVS     r1,#1
000042  2002              MOVS     r0,#2
000044  f7fffffe          BL       xQueueGenericCreate
000048  492e              LDR      r1,|L1.260|
00004a  6008              STR      r0,[r1,#0]  ; xQueue1
;;;557    	if( xQueue1 == 0 )
00004c  4608              MOV      r0,r1
00004e  6800              LDR      r0,[r0,#0]  ; xQueue1
000050  b910              CBNZ     r0,|L1.88|
;;;558    	{
;;;559    		printf("QueueCreate fail\r\n");
000052  a02d              ADR      r0,|L1.264|
000054  f7fffffe          BL       __2printf
                  |L1.88|
;;;560    	}
;;;561    
;;;562    	/* 创建升级事件标志组*/
;;;563    	xUpdataEventGroup = xEventGroupCreate();
000058  f7fffffe          BL       xEventGroupCreate
00005c  492f              LDR      r1,|L1.284|
00005e  6008              STR      r0,[r1,#0]  ; xUpdataEventGroup
;;;564    	if(xUpdataEventGroup == NULL)
000060  4608              MOV      r0,r1
000062  6800              LDR      r0,[r0,#0]  ; xUpdataEventGroup
000064  b920              CBNZ     r0,|L1.112|
;;;565    	{
;;;566    		printf("create xUpdataEventGroup fail\r\n");
000066  a02e              ADR      r0,|L1.288|
000068  f7fffffe          BL       __2printf
;;;567    		while(1);
00006c  bf00              NOP      
                  |L1.110|
00006e  e7fe              B        |L1.110|
                  |L1.112|
;;;568    	}	
;;;569    	
;;;570    	xPingTimers = xTimerCreate("Timer",   /* 定时器名字 */
000070  4833              LDR      r0,|L1.320|
000072  4623              MOV      r3,r4
000074  2201              MOVS     r2,#1
000076  f2475130          MOV      r1,#0x7530
00007a  9000              STR      r0,[sp,#0]
00007c  a031              ADR      r0,|L1.324|
00007e  f7fffffe          BL       xTimerCreate
000082  4932              LDR      r1,|L1.332|
000084  6008              STR      r0,[r1,#0]  ; xPingTimers
;;;571    									 xTimerPer,    				/* 定时器周期,单位时钟节拍 */
;;;572    									 pdTRUE ,         		/* 周期性 */
;;;573    									 (void *) i,      		/* 定时器ID */
;;;574    									 vPingTimerCallback); /* 定时器回调函数 */
;;;575    
;;;576    	if(xPingTimers == NULL)
000086  4608              MOV      r0,r1
000088  6800              LDR      r0,[r0,#0]  ; xPingTimers
00008a  b920              CBNZ     r0,|L1.150|
;;;577    	{
;;;578    		printf("create xTimers fail\r\n");
00008c  a030              ADR      r0,|L1.336|
00008e  f7fffffe          BL       __2printf
;;;579    		while(1);
000092  bf00              NOP      
                  |L1.148|
000094  e7fe              B        |L1.148|
                  |L1.150|
;;;580    	}
;;;581    
;;;582    	if(!xTimerStart(xPingTimers, 100) == pdPASS)
000096  f7fffffe          BL       xTaskGetTickCount
00009a  4606              MOV      r6,r0
00009c  2064              MOVS     r0,#0x64
00009e  2300              MOVS     r3,#0
0000a0  4632              MOV      r2,r6
0000a2  2101              MOVS     r1,#1
0000a4  9000              STR      r0,[sp,#0]
0000a6  4829              LDR      r0,|L1.332|
0000a8  6800              LDR      r0,[r0,#0]  ; xPingTimers
0000aa  f7fffffe          BL       xTimerGenericCommand
0000ae  b908              CBNZ     r0,|L1.180|
0000b0  2001              MOVS     r0,#1
0000b2  e000              B        |L1.182|
                  |L1.180|
0000b4  2000              MOVS     r0,#0
                  |L1.182|
0000b6  2801              CMP      r0,#1
0000b8  d102              BNE      |L1.192|
;;;583    	{
;;;584    		printf("Start ping Timer fail!\r\n");
0000ba  a02b              ADR      r0,|L1.360|
0000bc  f7fffffe          BL       __2printf
                  |L1.192|
;;;585    	}
;;;586    }
0000c0  bdf8              POP      {r3-r7,pc}
;;;587    
                          ENDP

0000c2  0000              DCW      0x0000
                  |L1.196|
                          DCD      xSemaphore
                  |L1.200|
0000c8  63726561          DCB      "create xSemaphore fail\r\n",0
0000cc  74652078
0000d0  53656d61
0000d4  70686f72
0000d8  65206661
0000dc  696c0d0a
0000e0  00      
0000e1  00                DCB      0
0000e2  00                DCB      0
0000e3  00                DCB      0
                  |L1.228|
                          DCD      xCreatedEventGroup
                  |L1.232|
0000e8  63726561          DCB      "create EventGroup fail\r\n",0
0000ec  74652045
0000f0  76656e74
0000f4  47726f75
0000f8  70206661
0000fc  696c0d0a
000100  00      
000101  00                DCB      0
000102  00                DCB      0
000103  00                DCB      0
                  |L1.260|
                          DCD      xQueue1
                  |L1.264|
000108  51756575          DCB      "QueueCreate fail\r\n",0
00010c  65437265
000110  61746520
000114  6661696c
000118  0d0a00  
00011b  00                DCB      0
                  |L1.284|
                          DCD      xUpdataEventGroup
                  |L1.288|
000120  63726561          DCB      "create xUpdataEventGroup fail\r\n",0
000124  74652078
000128  55706461
00012c  74614576
000130  656e7447
000134  726f7570
000138  20666169
00013c  6c0d0a00
                  |L1.320|
                          DCD      vPingTimerCallback
                  |L1.324|
000144  54696d65          DCB      "Timer",0
000148  7200    
00014a  00                DCB      0
00014b  00                DCB      0
                  |L1.332|
                          DCD      xPingTimers
                  |L1.336|
000150  63726561          DCB      "create xTimers fail\r\n",0
000154  74652078
000158  54696d65
00015c  72732066
000160  61696c0d
000164  0a00    
000166  00                DCB      0
000167  00                DCB      0
                  |L1.360|
000168  53746172          DCB      "Start ping Timer fail!\r\n",0
00016c  74207069
000170  6e672054
000174  696d6572
000178  20666169
00017c  6c210d0a
000180  00      
000181  00                DCB      0
000182  00                DCB      0
000183  00                DCB      0

                          AREA ||i.AppTaskCreate||, CODE, READONLY, ALIGN=2

                  AppTaskCreate PROC
;;;402    */
;;;403    static void AppTaskCreate (void)
000000  b51f              PUSH     {r0-r4,lr}
;;;404    {
;;;405    	xTaskCreate( vTaskTaskWEB,   			    /* 任务函数  */
000002  2000              MOVS     r0,#0
000004  4a1b              LDR      r2,|L2.116|
000006  e9cd0200          STRD     r0,r2,[sp,#0]
00000a  9002              STR      r0,[sp,#8]
00000c  4603              MOV      r3,r0
00000e  f44f7200          MOV      r2,#0x200
000012  a119              ADR      r1,|L2.120|
000014  9003              STR      r0,[sp,#0xc]
000016  481c              LDR      r0,|L2.136|
000018  f7fffffe          BL       xTaskGenericCreate
;;;406                     "vTaskTaskWEB",     		/* 任务名 	*/
;;;407                     512,               		/* 任务栈大小，单位word，也就是4字节 */
;;;408                     NULL,              		/* 任务参数  */
;;;409                     0,                 	  /* 任务优先级*/
;;;410                     &xHandleTaskWEB );  /* 任务句柄  */
;;;411    	
;;;412    	xTaskCreate( vTaskTaskBleIF,   			  /* 任务函数  */
00001c  2000              MOVS     r0,#0
00001e  4a1b              LDR      r2,|L2.140|
000020  2302              MOVS     r3,#2
000022  e9cd2001          STRD     r2,r0,[sp,#4]
000026  9300              STR      r3,[sp,#0]
000028  9003              STR      r0,[sp,#0xc]
00002a  4603              MOV      r3,r0
00002c  f44f6280          MOV      r2,#0x400
000030  a117              ADR      r1,|L2.144|
000032  481a              LDR      r0,|L2.156|
000034  f7fffffe          BL       xTaskGenericCreate
;;;413                     "vTaskUserIF",     		/* 任务名 	*/
;;;414                     1024,               		/* 任务栈大小，单位word，也就是4字节 */
;;;415                     NULL,              		/* 任务参数  */
;;;416                     2,                 	  /* 任务优先级*/
;;;417                     &xHandleTaskUserIF );  /* 任务句柄  */
;;;418    
;;;419    		xTaskCreate( vTaskStart,     				/* 任务函数  */
000038  2000              MOVS     r0,#0
00003a  4a19              LDR      r2,|L2.160|
00003c  2303              MOVS     r3,#3
00003e  e9cd2001          STRD     r2,r0,[sp,#4]
000042  9300              STR      r3,[sp,#0]
000044  9003              STR      r0,[sp,#0xc]
000046  4603              MOV      r3,r0
000048  f44f7200          MOV      r2,#0x200
00004c  a115              ADR      r1,|L2.164|
00004e  4818              LDR      r0,|L2.176|
000050  f7fffffe          BL       xTaskGenericCreate
;;;420    								 "vTaskStart",   				/* 任务名    */
;;;421    								 512,            				/* 任务栈大小，单位word，也就是4字节 */
;;;422    								 NULL,           				/* 任务参数  */
;;;423    								 3,              				/* 任务优先级*/
;;;424    								 &xHandleTaskStart );   /* 任务句柄  */
;;;425    	
;;;426    	xTaskCreate( vTaskMsgPro,     				/* 任务函数  */
000054  2000              MOVS     r0,#0
000056  4a17              LDR      r2,|L2.180|
000058  2304              MOVS     r3,#4
00005a  e9cd2001          STRD     r2,r0,[sp,#4]
00005e  9300              STR      r3,[sp,#0]
000060  9003              STR      r0,[sp,#0xc]
000062  4603              MOV      r3,r0
000064  f44f6200          MOV      r2,#0x800
000068  a113              ADR      r1,|L2.184|
00006a  4816              LDR      r0,|L2.196|
00006c  f7fffffe          BL       xTaskGenericCreate
;;;427                     "vTaskMsgPro",   			/* 任务名    */
;;;428                     2048,           	      /* 任务栈大小，单位word，也就是4字节 */
;;;429                     NULL,           				/* 任务参数  */
;;;430                     4,               			/* 任务优先级*/
;;;431                     &xHandleTaskMsgPro );  /* 任务句柄  */
;;;432    }
000070  bd1f              POP      {r0-r4,pc}
;;;433    
                          ENDP

000072  0000              DCW      0x0000
                  |L2.116|
                          DCD      xHandleTaskWEB
                  |L2.120|
000078  76546173          DCB      "vTaskTaskWEB",0
00007c  6b546173
000080  6b574542
000084  00      
000085  00                DCB      0
000086  00                DCB      0
000087  00                DCB      0
                  |L2.136|
                          DCD      vTaskTaskWEB
                  |L2.140|
                          DCD      xHandleTaskUserIF
                  |L2.144|
000090  76546173          DCB      "vTaskUserIF",0
000094  6b557365
000098  72494600
                  |L2.156|
                          DCD      vTaskTaskBleIF
                  |L2.160|
                          DCD      xHandleTaskStart
                  |L2.164|
0000a4  76546173          DCB      "vTaskStart",0
0000a8  6b537461
0000ac  727400  
0000af  00                DCB      0
                  |L2.176|
                          DCD      vTaskStart
                  |L2.180|
                          DCD      xHandleTaskMsgPro
                  |L2.184|
0000b8  76546173          DCB      "vTaskMsgPro",0
0000bc  6b4d7367
0000c0  50726f00
                  |L2.196|
                          DCD      vTaskMsgPro

                          AREA ||i.EXTI15_10_IRQHandler||, CODE, READONLY, ALIGN=2

                  EXTI15_10_IRQHandler PROC
;;;464    *******************************************************************************/
;;;465    void EXTI15_10_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;466    {
;;;467    	#ifdef MCBR03
;;;468    	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
;;;469    
;;;470    	if(EXTI_GetITStatus(EXTI_Line11) != RESET)
;;;471    	{		
;;;472    		EXTI_ClearITPendingBit(EXTI_Line11);
;;;473    		
;;;474      	/* 发送计数信号量*/
;;;475    	  xSemaphoreGiveFromISR(xSemaphore, &xHigherPriorityTaskWoken);
;;;476    
;;;477    	  /* 如果xHigherPriorityTaskWoken = pdTRUE，那么退出中断后切到当前最高优先级任务执行 */
;;;478    	  portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
;;;479    	}
;;;480      #endif
;;;481    	
;;;482    	if(EXTI_GetITStatus(EXTI_Line10) != RESET)
000002  f44f6080          MOV      r0,#0x400
000006  f7fffffe          BL       EXTI_GetITStatus
00000a  2845              CMP      r0,#0x45
00000c  d02c              BEQ      |L3.104|
;;;483    	{
;;;484    		EXTI_ClearITPendingBit(EXTI_Line10);
00000e  f44f6080          MOV      r0,#0x400
000012  f7fffffe          BL       EXTI_ClearITPendingBit
;;;485       
;;;486    		delay_ms(20);  /*防抖动*/
000016  2014              MOVS     r0,#0x14
000018  f7fffffe          BL       delay_ms
;;;487    
;;;488        if(0 == GPIO_ReadInputDataBit( GPIOF , GPIO_Pin_10 ))	     /*按键按下*/
00001c  f44f6180          MOV      r1,#0x400
000020  4812              LDR      r0,|L3.108|
000022  f7fffffe          BL       GPIO_ReadInputDataBit
000026  b960              CBNZ     r0,|L3.66|
;;;489    		{			
;;;490    			bsp_LedOn(4);
000028  2004              MOVS     r0,#4
00002a  f7fffffe          BL       bsp_LedOn
;;;491    			key_timer_Start();                                       /*按下开始按键计时*/
00002e  f7fffffe          BL       key_timer_Start
;;;492    			sysCfg.parameter.key_time_count = 0;
000032  2000              MOVS     r0,#0
000034  490e              LDR      r1,|L3.112|
000036  f8a100e2          STRH     r0,[r1,#0xe2]
;;;493    			bsp_Initkey_Triggertype(EXTI_Trigger_Rising);            /*检测上升沿触发*/
00003a  2008              MOVS     r0,#8
00003c  f7fffffe          BL       bsp_Initkey_Triggertype
000040  e012              B        |L3.104|
                  |L3.66|
;;;494    		}
;;;495    		else if(1 == GPIO_ReadInputDataBit( GPIOF , GPIO_Pin_10 )) /*按键松开*/ 	
000042  f44f6180          MOV      r1,#0x400
000046  4809              LDR      r0,|L3.108|
000048  f7fffffe          BL       GPIO_ReadInputDataBit
00004c  2801              CMP      r0,#1
00004e  d10b              BNE      |L3.104|
;;;496    		{
;;;497    			bsp_LedOff(4);
000050  2004              MOVS     r0,#4
000052  f7fffffe          BL       bsp_LedOff
;;;498    			key_timer_Stop();                                        /*关闭按键计时*/
000056  f7fffffe          BL       key_timer_Stop
;;;499    			sysCfg.parameter.key_time_count = 0;
00005a  2000              MOVS     r0,#0
00005c  4904              LDR      r1,|L3.112|
00005e  f8a100e2          STRH     r0,[r1,#0xe2]
;;;500    			bsp_Initkey_Triggertype(EXTI_Trigger_Falling);           /*检测下升沿触发*/
000062  200c              MOVS     r0,#0xc
000064  f7fffffe          BL       bsp_Initkey_Triggertype
                  |L3.104|
;;;501    		}
;;;502    	}		
;;;503    }
000068  bd10              POP      {r4,pc}
;;;504    
                          ENDP

00006a  0000              DCW      0x0000
                  |L3.108|
                          DCD      0x40011c00
                  |L3.112|
                          DCD      sysCfg

                          AREA ||i.EXTI9_5_IRQHandler||, CODE, READONLY, ALIGN=2

                  EXTI9_5_IRQHandler PROC
;;;440    *******************************************************************************/
;;;441    void EXTI9_5_IRQHandler(void)
000000  b508              PUSH     {r3,lr}
;;;442    {
;;;443    	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
000002  2000              MOVS     r0,#0
000004  9000              STR      r0,[sp,#0]
;;;444    	
;;;445    	if(EXTI_GetITStatus(EXTI_Line5) != RESET)
000006  2020              MOVS     r0,#0x20
000008  f7fffffe          BL       EXTI_GetITStatus
00000c  2845              CMP      r0,#0x45
00000e  d00d              BEQ      |L4.44|
;;;446    	{
;;;447    		EXTI_ClearITPendingBit(EXTI_Line5);
000010  2020              MOVS     r0,#0x20
000012  f7fffffe          BL       EXTI_ClearITPendingBit
;;;448    		
;;;449      	/* 发送计数信号量*/
;;;450    	  xSemaphoreGiveFromISR(xSemaphore, &xHigherPriorityTaskWoken);
000016  4669              MOV      r1,sp
000018  4805              LDR      r0,|L4.48|
00001a  6800              LDR      r0,[r0,#0]  ; xSemaphore
00001c  f7fffffe          BL       xQueueGiveFromISR
;;;451    
;;;452    	  /* 如果xHigherPriorityTaskWoken = pdTRUE，那么退出中断后切到当前最高优先级任务执行 */
;;;453    	  portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
000020  9800              LDR      r0,[sp,#0]
000022  b118              CBZ      r0,|L4.44|
000024  f04f5080          MOV      r0,#0x10000000
000028  4902              LDR      r1,|L4.52|
00002a  6008              STR      r0,[r1,#0]
                  |L4.44|
;;;454    	}
;;;455    }
00002c  bd08              POP      {r3,pc}
;;;456    #endif
                          ENDP

00002e  0000              DCW      0x0000
                  |L4.48|
                          DCD      xSemaphore
                  |L4.52|
                          DCD      0xe000ed04

                          AREA ||i.TIM2_IRQHandler||, CODE, READONLY, ALIGN=2

                  TIM2_IRQHandler PROC
;;;505    /*按键定时器 100ms*/
;;;506    void TIM2_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;507    {		
;;;508      if(TIM_GetITStatus(TIM2, TIM_IT_Update) != RESET)
000002  2101              MOVS     r1,#1
000004  0788              LSLS     r0,r1,#30
000006  f7fffffe          BL       TIM_GetITStatus
00000a  2845              CMP      r0,#0x45
00000c  d030              BEQ      |L5.112|
;;;509      {
;;;510    		TIM_ClearITPendingBit(TIM2 , TIM_FLAG_Update);
00000e  2101              MOVS     r1,#1
000010  0788              LSLS     r0,r1,#30
000012  f7fffffe          BL       TIM_ClearITPendingBit
;;;511    		
;;;512    		sysCfg.parameter.key_time_count++;           
000016  4817              LDR      r0,|L5.116|
000018  f8b000e2          LDRH     r0,[r0,#0xe2]  ; sysCfg
00001c  1c40              ADDS     r0,r0,#1
00001e  4915              LDR      r1,|L5.116|
000020  f8a100e2          STRH     r0,[r1,#0xe2]
;;;513    		 
;;;514    		if(sysCfg.parameter.key_time_count == 50)    /*长按5s*/
000024  4608              MOV      r0,r1
000026  f8b000e2          LDRH     r0,[r0,#0xe2]  ; sysCfg
00002a  2832              CMP      r0,#0x32
00002c  d120              BNE      |L5.112|
;;;515    		{
;;;516    	    sysCfg.parameter.config_hold_flag = 0xff;  /*恢复出厂设置*/
00002e  20ff              MOVS     r0,#0xff
000030  f881004c          STRB     r0,[r1,#0x4c]
;;;517    			sysCfg.parameter.dhcp=NETINFO_DHCP;/*默认为开启DHCP*/
000034  2002              MOVS     r0,#2
000036  f8810059          STRB     r0,[r1,#0x59]
;;;518    			if(0 == bsp_WriteCpuFlash(SYSCFG_ADDR,sysCfg.data,SYSCFG_DATA_LEN))
00003a  225a              MOVS     r2,#0x5a
00003c  480e              LDR      r0,|L5.120|
00003e  f7fffffe          BL       bsp_WriteCpuFlash
000042  b9a8              CBNZ     r0,|L5.112|
;;;519    			{
;;;520    				mqtt_disconnect();
000044  f7fffffe          BL       mqtt_disconnect
;;;521    				delay_ms(100);
000048  2064              MOVS     r0,#0x64
00004a  f7fffffe          BL       delay_ms
;;;522    				NVIC_SystemReset();		
00004e  bf00              NOP      
000050  f3bf8f4f          DSB      
000054  4809              LDR      r0,|L5.124|
000056  6800              LDR      r0,[r0,#0]
000058  f40060e0          AND      r0,r0,#0x700
00005c  4908              LDR      r1,|L5.128|
00005e  4308              ORRS     r0,r0,r1
000060  1d00              ADDS     r0,r0,#4
000062  4906              LDR      r1,|L5.124|
000064  6008              STR      r0,[r1,#0]
000066  f3bf8f4f          DSB      
00006a  bf00              NOP      
00006c  bf00              NOP      
                  |L5.110|
00006e  e7fe              B        |L5.110|
                  |L5.112|
;;;523    			}
;;;524    		}
;;;525    	}
;;;526    }
000070  bd10              POP      {r4,pc}
;;;527    
                          ENDP

000072  0000              DCW      0x0000
                  |L5.116|
                          DCD      sysCfg
                  |L5.120|
                          DCD      0x0807fe00
                  |L5.124|
                          DCD      0xe000ed0c
                  |L5.128|
                          DCD      0x05fa0000

                          AREA ||i.main||, CODE, READONLY, ALIGN=1

                  main PROC
;;;9      */
;;;10     int main(void)
000000  2001              MOVS     r0,#1
000002  f3808810          MSR      PRIMASK,r0
000006  bf00              NOP      
;;;11     {
;;;12     	/* 
;;;13     	  在启动调度前，为了防止初始化STM32外设时有中断服务程序执行，这里禁止全局中断(除了NMI和HardFault)。
;;;14     	  这样做的好处是：
;;;15     	  1. 防止执行的中断服务程序中有FreeRTOS的API函数。
;;;16     	  2. 保证系统正常启动，不受别的中断影响。
;;;17     	  3. 关于是否关闭全局中断，大家根据自己的实际情况设置即可。
;;;18     	  在移植文件port.c中的函数prvStartFirstTask中会重新开启全局中断。通过指令cpsie i开启，__set_PRIMASK(1)
;;;19     	  和cpsie i是等效的。
;;;20          */
;;;21     	__set_PRIMASK(1); 	
;;;22     
;;;23       bsp_Init();  								/*硬件初始化 */
000008  f7fffffe          BL       bsp_Init
;;;24     	
;;;25     	app_flash_LoadSysConfig();  /*读取配置参数*/
00000c  f7fffffe          BL       app_flash_LoadSysConfig
;;;26     	
;;;27     	AppTaskCreate();            /*创建任务 */
000010  f7fffffe          BL       AppTaskCreate
;;;28     	AppObjCreate();      				/*创建任务通信机制 */
000014  f7fffffe          BL       AppObjCreate
;;;29       vTaskStartScheduler();      /*启动调度，开始执行任务*/
000018  f7fffffe          BL       vTaskStartScheduler
;;;30     	/* 
;;;31     	  如果系统正常启动是不会运行到这里的，运行到这里极有可能是用于定时器任务或者空闲任务的
;;;32     	  heap空间不足造成创建失败，此要加大FreeRTOSConfig.h文件中定义的heap大小：
;;;33     	*/
;;;34     	while(1);
00001c  bf00              NOP      
                  |L6.30|
00001e  e7fe              B        |L6.30|
;;;35     }
;;;36     /*
                          ENDP


                          AREA ||i.vPingTimerCallback||, CODE, READONLY, ALIGN=2

                  vPingTimerCallback PROC
;;;595    */
;;;596    static void vPingTimerCallback(xTimerHandle pxTimer)
000000  b510              PUSH     {r4,lr}
;;;597    {
000002  4604              MOV      r4,r0
;;;598    	configASSERT(pxTimer);
000004  b91c              CBNZ     r4,|L7.14|
000006  f7fffffe          BL       ulPortSetInterruptMask
00000a  bf00              NOP      
                  |L7.12|
00000c  e7fe              B        |L7.12|
                  |L7.14|
;;;599    	
;;;600    	if( sysCfg.parameter.connect_state == CONNECT )
00000e  480a              LDR      r0,|L7.56|
000010  f89000bf          LDRB     r0,[r0,#0xbf]  ; sysCfg
000014  2801              CMP      r0,#1
000016  d10d              BNE      |L7.52|
;;;601    	{
;;;602    		/*主服务器ping*/
;;;603    		Heartbeat(SOCK_TCPS);    
000018  2000              MOVS     r0,#0
00001a  f7fffffe          BL       Heartbeat
;;;604    	 
;;;605    		/*第三方服务器ping*/
;;;606    		if(sysCfg.parameter.data_socket != SOCK_TCPS)
00001e  4806              LDR      r0,|L7.56|
000020  f89000c0          LDRB     r0,[r0,#0xc0]  ; sysCfg
000024  b130              CBZ      r0,|L7.52|
;;;607    		{
;;;608    			vTaskDelay(1000);
000026  f44f707a          MOV      r0,#0x3e8
00002a  f7fffffe          BL       vTaskDelay
;;;609    			Heartbeat(SOCK_TCP);  
00002e  2001              MOVS     r0,#1
000030  f7fffffe          BL       Heartbeat
                  |L7.52|
;;;610    		}
;;;611    	}
;;;612    }
000034  bd10              POP      {r4,pc}
;;;613    
                          ENDP

000036  0000              DCW      0x0000
                  |L7.56|
                          DCD      sysCfg

                          AREA ||i.vTaskCheckNet||, CODE, READONLY, ALIGN=2

                  vTaskCheckNet PROC
;;;62     */
;;;63     static void vTaskCheckNet(void *pvParameters)
000000  b51c              PUSH     {r2-r4,lr}
;;;64     {
;;;65     	uint8_t tmp=0;
000002  2000              MOVS     r0,#0
000004  9001              STR      r0,[sp,#4]
;;;66     	EventBits_t uxBits;
;;;67     	const TickType_t xTicksToWait = 10 / portTICK_PERIOD_MS; /* 最大延迟100ms */
000006  bf00              NOP      
;;;68     	
;;;69     	while(1)
000008  e077              B        |L8.250|
                  |L8.10|
;;;70     	{
;;;71     		uxBits = xEventGroupWaitBits(xUpdataEventGroup, 	/* 事件标志组句柄 */
00000a  200a              MOVS     r0,#0xa
00000c  2301              MOVS     r3,#1
00000e  2200              MOVS     r2,#0
000010  2107              MOVS     r1,#7
000012  9000              STR      r0,[sp,#0]
000014  4839              LDR      r0,|L8.252|
000016  6800              LDR      r0,[r0,#0]  ; xUpdataEventGroup
000018  f7fffffe          BL       xEventGroupWaitBits
00001c  4604              MOV      r4,r0
;;;72     										 UPDATA_ALL_START,            		/* 等待TASK_UPDATDEVSTART_BIT被设置 */
;;;73     										 pdFALSE,            							/* 退出前TASK_UPDATSTART_BIT不清除*/
;;;74     										 pdTRUE,             		          /* 设置为pdTRUE表示等待TASK_BIT_ALL都被设置*/
;;;75     										 xTicksToWait); 								 	/* 等待延迟时间 */
;;;76     		
;;;77     		/*没有进入升级状态*/
;;;78     		if(uxBits != UPDATA_GAT_START && uxBits != UPDATA_BLE_START && uxBits != UPDATA_BRA_START)
00001e  2c01              CMP      r4,#1
000020  d06b              BEQ      |L8.250|
000022  2c02              CMP      r4,#2
000024  d069              BEQ      |L8.250|
000026  2c04              CMP      r4,#4
000028  d067              BEQ      |L8.250|
;;;79     		{	
;;;80     			/*检测网线连接状态*/
;;;81     			ctlwizchip(CW_GET_PHYLINK, (void*)&tmp);	
00002a  a901              ADD      r1,sp,#4
00002c  200f              MOVS     r0,#0xf
00002e  f7fffffe          BL       ctlwizchip
;;;82     			
;;;83     			if(tmp == PHY_LINK_ON && sysCfg.parameter.connect_state == CONNECT)//有网
000032  f89d0004          LDRB     r0,[sp,#4]
000036  2801              CMP      r0,#1
000038  d11a              BNE      |L8.112|
00003a  4831              LDR      r0,|L8.256|
00003c  f89000bf          LDRB     r0,[r0,#0xbf]  ; sysCfg
000040  2801              CMP      r0,#1
000042  d115              BNE      |L8.112|
;;;84     			{ 
;;;85     				app_system_NetLedToggle();		/*网关指示灯翻转*/
000044  f7fffffe          BL       app_system_NetLedToggle
;;;86     				do_ntp_client();	            /*获取网络时间*/
000048  f7fffffe          BL       do_ntp_client
;;;87     				vTaskDelay(1000);
00004c  f44f707a          MOV      r0,#0x3e8
000050  f7fffffe          BL       vTaskDelay
;;;88     				app_system_CheckID();         /*自动化系统获取设备ID  MCU ID + 蓝牙ID*/
000054  f7fffffe          BL       app_system_CheckID
;;;89     				
;;;90     				/*检查是否新的基站设备接入*/	
;;;91     				if(sysCfg.parameter.register_flag == UNREGISTER)
000058  4829              LDR      r0,|L8.256|
00005a  f89000e0          LDRB     r0,[r0,#0xe0]  ; sysCfg
00005e  b908              CBNZ     r0,|L8.100|
;;;92     				{
;;;93     					app_nrf_GetNewStation();   
000060  f7fffffe          BL       app_nrf_GetNewStation
                  |L8.100|
;;;94     				}	
;;;95     		    
;;;96     				xEventGroupSetBits(xCreatedEventGroup, TASK_BIT_NET);
000064  2101              MOVS     r1,#1
000066  4827              LDR      r0,|L8.260|
000068  6800              LDR      r0,[r0,#0]  ; xCreatedEventGroup
00006a  f7fffffe          BL       xEventGroupSetBits
00006e  e044              B        |L8.250|
                  |L8.112|
;;;97     			}
;;;98     			
;;;99     			else if(tmp == PHY_LINK_OFF)  
000070  f89d0004          LDRB     r0,[sp,#4]
000074  2800              CMP      r0,#0
000076  d140              BNE      |L8.250|
;;;100    			{	
;;;101    				xTimerStop(xPingTimers, 100); 								 /*关ping定时器*/
000078  2064              MOVS     r0,#0x64
00007a  2300              MOVS     r3,#0
00007c  461a              MOV      r2,r3
00007e  2103              MOVS     r1,#3
000080  9000              STR      r0,[sp,#0]
000082  4821              LDR      r0,|L8.264|
000084  6800              LDR      r0,[r0,#0]  ; xPingTimers
000086  f7fffffe          BL       xTimerGenericCommand
;;;102    				
;;;103    				bsp_LedOff(2); 
00008a  2002              MOVS     r0,#2
00008c  f7fffffe          BL       bsp_LedOff
;;;104    				bsp_LedOff(3);
000090  2003              MOVS     r0,#3
000092  f7fffffe          BL       bsp_LedOff
;;;105    				bsp_LedOn(4);
000096  2004              MOVS     r0,#4
000098  f7fffffe          BL       bsp_LedOn
;;;106    				
;;;107    				sysCfg.parameter.connect_state = DISCONNECT;
00009c  2000              MOVS     r0,#0
00009e  4918              LDR      r1,|L8.256|
0000a0  f88100bf          STRB     r0,[r1,#0xbf]
;;;108    				
;;;109    				while(tmp == PHY_LINK_OFF)		/*循环检测网络*/
0000a4  e00c              B        |L8.192|
                  |L8.166|
;;;110    				{
;;;111    					ctlwizchip(CW_GET_PHYLINK, (void*)&tmp); 
0000a6  a901              ADD      r1,sp,#4
0000a8  200f              MOVS     r0,#0xf
0000aa  f7fffffe          BL       ctlwizchip
;;;112    					xEventGroupSetBits(xCreatedEventGroup, TASK_BIT_NET);
0000ae  2101              MOVS     r1,#1
0000b0  4814              LDR      r0,|L8.260|
0000b2  6800              LDR      r0,[r0,#0]  ; xCreatedEventGroup
0000b4  f7fffffe          BL       xEventGroupSetBits
;;;113    					vTaskDelay(1000);
0000b8  f44f707a          MOV      r0,#0x3e8
0000bc  f7fffffe          BL       vTaskDelay
                  |L8.192|
0000c0  f89d0004          LDRB     r0,[sp,#4]            ;109
0000c4  2800              CMP      r0,#0                 ;109
0000c6  d0ee              BEQ      |L8.166|
;;;114    					#if APP_DEBUG
;;;115    					printf("Unknown PHY Link stauts.\r\n");
;;;116    					#endif
;;;117    				}
;;;118    
;;;119    				app_system_MqttConnect(SOCK_TCPS);     				 /*连接到主服务器*/
0000c8  2000              MOVS     r0,#0
0000ca  f7fffffe          BL       app_system_MqttConnect
;;;120    				if(sysCfg.parameter.data_socket != SOCK_TCPS)  /*连接到第三方服务器*/
0000ce  480c              LDR      r0,|L8.256|
0000d0  f89000c0          LDRB     r0,[r0,#0xc0]  ; sysCfg
0000d4  b110              CBZ      r0,|L8.220|
;;;121    				{
;;;122    					app_system_MqttConnect(SOCK_TCP);   
0000d6  2001              MOVS     r0,#1
0000d8  f7fffffe          BL       app_system_MqttConnect
                  |L8.220|
;;;123    				}
;;;124    				
;;;125    				bsp_LedOff(4);
0000dc  2004              MOVS     r0,#4
0000de  f7fffffe          BL       bsp_LedOff
;;;126    				xTimerStart(xPingTimers, 100);
0000e2  f7fffffe          BL       xTaskGetTickCount
0000e6  4605              MOV      r5,r0
0000e8  2064              MOVS     r0,#0x64
0000ea  2300              MOVS     r3,#0
0000ec  462a              MOV      r2,r5
0000ee  2101              MOVS     r1,#1
0000f0  9000              STR      r0,[sp,#0]
0000f2  4805              LDR      r0,|L8.264|
0000f4  6800              LDR      r0,[r0,#0]  ; xPingTimers
0000f6  f7fffffe          BL       xTimerGenericCommand
                  |L8.250|
0000fa  e786              B        |L8.10|
;;;127    			}
;;;128    		}
;;;129    	}
;;;130    }
;;;131    
                          ENDP

                  |L8.252|
                          DCD      xUpdataEventGroup
                  |L8.256|
                          DCD      sysCfg
                  |L8.260|
                          DCD      xCreatedEventGroup
                  |L8.264|
                          DCD      xPingTimers

                          AREA ||i.vTaskMsgPro||, CODE, READONLY, ALIGN=2

                  vTaskMsgPro PROC
;;;323    */
;;;324    static void vTaskMsgPro(void *pvParameters)
000000  f5ad6dbd          SUB      sp,sp,#0x5e8
;;;325    {
;;;326    	BaseType_t xResult;
;;;327    	plat_report_t report_t;
;;;328    	
;;;329      while(1)
000004  e07b              B        |L9.254|
                  |L9.6|
;;;330      {
;;;331    		xResult = xSemaphoreTake(xSemaphore, portMAX_DELAY);	//阻塞，等待中断give二值信号，以解除阻塞 portMAX_DELAY 表示一直等待
000006  2300              MOVS     r3,#0
000008  1e5a              SUBS     r2,r3,#1
00000a  4619              MOV      r1,r3
00000c  483c              LDR      r0,|L9.256|
00000e  6800              LDR      r0,[r0,#0]  ; xSemaphore
000010  f7fffffe          BL       xQueueGenericReceive
000014  4604              MOV      r4,r0
;;;332    		if(xResult == pdTRUE)	 /* 接收到同步信号 */  
000016  2c01              CMP      r4,#1
000018  d171              BNE      |L9.254|
;;;333    		{
;;;334    			/*解析平台数据*/
;;;335    			if(SUCCESS == app_palt_Reportparse(&report_t))
00001a  a801              ADD      r0,sp,#4
00001c  f7fffffe          BL       app_palt_Reportparse
000020  2801              CMP      r0,#1
000022  d16c              BNE      |L9.254|
;;;336    			{
;;;337    				if(report_t.socket != SOCK_BLE)
000024  f89d0005          LDRB     r0,[sp,#5]
000028  2802              CMP      r0,#2
00002a  d064              BEQ      |L9.246|
;;;338    				{
;;;339    					switch( report_t.evt_id )
00002c  f89d0004          LDRB     r0,[sp,#4]
000030  2802              CMP      r0,#2
000032  d008              BEQ      |L9.70|
000034  2803              CMP      r0,#3
000036  d002              BEQ      |L9.62|
000038  280d              CMP      r0,#0xd
00003a  d111              BNE      |L9.96|
00003c  e007              B        |L9.78|
                  |L9.62|
;;;340    					{
;;;341    						case PUBLISH:   /*接收订阅主题数据*/
;;;342    							app_palt_Receicedata(&report_t);
00003e  a801              ADD      r0,sp,#4
000040  f7fffffe          BL       app_palt_Receicedata
;;;343    							break;
000044  e00d              B        |L9.98|
                  |L9.70|
;;;344    						
;;;345    						case CONNACK:   /*连接回执*/
;;;346    							app_palt_Connectack(&report_t);
000046  a801              ADD      r0,sp,#4
000048  f7fffffe          BL       app_palt_Connectack
;;;347    							break;
00004c  e009              B        |L9.98|
                  |L9.78|
;;;348    						
;;;349    						case PINGRESP:  /*到服务器ping回执*/
;;;350    							#if APP_DEBUG
;;;351    						  printf("ping ack:%d\r\n",report_t.socket);
;;;352    						  #endif
;;;353    						  xQueueSend(xQueue1, (void *) &report_t.socket,(TickType_t)10); 
00004e  2300              MOVS     r3,#0
000050  220a              MOVS     r2,#0xa
000052  f10d0105          ADD      r1,sp,#5
000056  482b              LDR      r0,|L9.260|
000058  6800              LDR      r0,[r0,#0]  ; xQueue1
00005a  f7fffffe          BL       xQueueGenericSend
;;;354    							break;
00005e  e000              B        |L9.98|
                  |L9.96|
;;;355    						
;;;356    						default:
;;;357    							break;
000060  bf00              NOP      
                  |L9.98|
000062  bf00              NOP                            ;343
;;;358    					}	
;;;359    					
;;;360    					if(report_t.gateway_updata_flag == GAT_UPDATA_START)
000064  f89d000a          LDRB     r0,[sp,#0xa]
000068  2801              CMP      r0,#1
00006a  d112              BNE      |L9.146|
;;;361    					{
;;;362    						app_system_LedOn();
00006c  f7fffffe          BL       app_system_LedOn
;;;363    						xTimerStop(xPingTimers, 100);                                   /*关闭ping*/
000070  2064              MOVS     r0,#0x64
000072  2300              MOVS     r3,#0
000074  461a              MOV      r2,r3
000076  2103              MOVS     r1,#3
000078  9000              STR      r0,[sp,#0]
00007a  4823              LDR      r0,|L9.264|
00007c  6800              LDR      r0,[r0,#0]  ; xPingTimers
00007e  f7fffffe          BL       xTimerGenericCommand
;;;364    						report_t.gateway_updata_flag = GAT_UPDATA_RESET;
000082  2000              MOVS     r0,#0
000084  f88d000a          STRB     r0,[sp,#0xa]
;;;365    						xEventGroupSetBits(xUpdataEventGroup, UPDATA_GAT_START);	      /*阻塞其他任务*/
000088  2101              MOVS     r1,#1
00008a  4820              LDR      r0,|L9.268|
00008c  6800              LDR      r0,[r0,#0]  ; xUpdataEventGroup
00008e  f7fffffe          BL       xEventGroupSetBits
                  |L9.146|
;;;366    					}
;;;367    					
;;;368    					if(report_t.ble_updata_flag == BLE_UPDATA_START)
000092  f89d0008          LDRB     r0,[sp,#8]
000096  2801              CMP      r0,#1
000098  d115              BNE      |L9.198|
;;;369    					{
;;;370    						app_system_LedOn();
00009a  f7fffffe          BL       app_system_LedOn
;;;371    						comClearTxFifo(NRF_PORT);
00009e  2002              MOVS     r0,#2
0000a0  f7fffffe          BL       comClearTxFifo
;;;372    						xTimerStop(xPingTimers, 100); 
0000a4  2064              MOVS     r0,#0x64
0000a6  2300              MOVS     r3,#0
0000a8  461a              MOV      r2,r3
0000aa  2103              MOVS     r1,#3
0000ac  9000              STR      r0,[sp,#0]
0000ae  4816              LDR      r0,|L9.264|
0000b0  6800              LDR      r0,[r0,#0]  ; xPingTimers
0000b2  f7fffffe          BL       xTimerGenericCommand
;;;373    						report_t.ble_updata_flag = BLE_UPDATA_RESET;
0000b6  2000              MOVS     r0,#0
0000b8  f88d0008          STRB     r0,[sp,#8]
;;;374    						xEventGroupSetBits(xUpdataEventGroup, UPDATA_BLE_START);				/*阻塞其他任务*/
0000bc  2102              MOVS     r1,#2
0000be  4813              LDR      r0,|L9.268|
0000c0  6800              LDR      r0,[r0,#0]  ; xUpdataEventGroup
0000c2  f7fffffe          BL       xEventGroupSetBits
                  |L9.198|
;;;375    					}
;;;376    					
;;;377    					if(report_t.bracelet_updata_flag == BRA_UPDATA_START)
0000c6  f89d0009          LDRB     r0,[sp,#9]
0000ca  2801              CMP      r0,#1
0000cc  d117              BNE      |L9.254|
;;;378    					{
;;;379    						app_system_LedOn();
0000ce  f7fffffe          BL       app_system_LedOn
;;;380    						xTimerStop(xPingTimers, 100); 
0000d2  2064              MOVS     r0,#0x64
0000d4  2300              MOVS     r3,#0
0000d6  461a              MOV      r2,r3
0000d8  2103              MOVS     r1,#3
0000da  9000              STR      r0,[sp,#0]
0000dc  480a              LDR      r0,|L9.264|
0000de  6800              LDR      r0,[r0,#0]  ; xPingTimers
0000e0  f7fffffe          BL       xTimerGenericCommand
;;;381    						report_t.bracelet_updata_flag = BRA_UPDATA_RESET;
0000e4  2000              MOVS     r0,#0
0000e6  f88d0009          STRB     r0,[sp,#9]
;;;382    						xEventGroupSetBits(xUpdataEventGroup, UPDATA_BRA_START);				/*阻塞其他任务*/
0000ea  2104              MOVS     r1,#4
0000ec  4807              LDR      r0,|L9.268|
0000ee  6800              LDR      r0,[r0,#0]  ; xUpdataEventGroup
0000f0  f7fffffe          BL       xEventGroupSetBits
0000f4  e003              B        |L9.254|
                  |L9.246|
;;;383    					}
;;;384    				}
;;;385    				else
;;;386    				{
;;;387    					IWDG_Feed(); 
0000f6  f7fffffe          BL       IWDG_Feed
;;;388    					app_system_UpdataBle();
0000fa  f7fffffe          BL       app_system_UpdataBle
                  |L9.254|
0000fe  e782              B        |L9.6|
;;;389    				}	
;;;390    		  }	
;;;391        }
;;;392    	}
;;;393    }
;;;394    
                          ENDP

                  |L9.256|
                          DCD      xSemaphore
                  |L9.260|
                          DCD      xQueue1
                  |L9.264|
                          DCD      xPingTimers
                  |L9.268|
                          DCD      xUpdataEventGroup

                          AREA ||i.vTaskStart||, CODE, READONLY, ALIGN=2

                  vTaskStart PROC
;;;182    */
;;;183    static void vTaskStart(void *pvParameters)
000000  b086              SUB      sp,sp,#0x18
;;;184    {
;;;185    	uint8_t rc;   
;;;186    	uint8_t ucQueueValue;
;;;187    	
;;;188    	uint16_t wait_tcp_ack_time = 0;
000002  2700              MOVS     r7,#0
;;;189    	uint16_t wait_tcps_ack_time = 0;
000004  46b8              MOV      r8,r7
;;;190    	
;;;191    	BaseType_t xResult;
;;;192    	EventBits_t uxBits;
;;;193    	const TickType_t xTicksToWait = 100 / portTICK_PERIOD_MS;  /* 最大延迟100ms */
000006  bf00              NOP      
;;;194    	const TickType_t xMaxBlockTime = pdMS_TO_TICKS(100);			 /* 设置最大等待时间为100ms */	
000008  bf00              NOP      
;;;195    	
;;;196    	net_init();           /*网络初始化*/
00000a  f7fffffe          BL       net_init
;;;197    
;;;198      #if APP_DEBUG
;;;199    	printf("Net init ok\r\n");
;;;200    	#endif
;;;201    	vTaskDelay(1000);	
00000e  f44f707a          MOV      r0,#0x3e8
000012  f7fffffe          BL       vTaskDelay
;;;202    	/*更新网络参数*/
;;;203    	get_netparm();
000016  f7fffffe          BL       get_netparm
;;;204    	if(sysCfg.parameter.dhcp == NETINFO_STATIC)
00001a  4844              LDR      r0,|L10.300|
00001c  f8900059          LDRB     r0,[r0,#0x59]  ; sysCfg
000020  2801              CMP      r0,#1
000022  d102              BNE      |L10.42|
;;;205    	{
;;;206    		rc = DHCP_IP_LEASED;
000024  2604              MOVS     r6,#4
;;;207    		set_netparm();
000026  f7fffffe          BL       set_netparm
                  |L10.42|
;;;208    	}
;;;209    	else
;;;210    	{
;;;211    		#if APP_DEBUG
;;;212    		printf("Ready to run DHCP...\r\n");
;;;213    		#endif
;;;214    	}
;;;215    		
;;;216    	while(rc!=DHCP_IP_LEASED)
00002a  e008              B        |L10.62|
                  |L10.44|
;;;217    	{
;;;218    	   rc=DHCP_run();	
00002c  f7fffffe          BL       DHCP_run
000030  4606              MOV      r6,r0
;;;219    		 IWDG_Feed();  /*喂狗*/
000032  f7fffffe          BL       IWDG_Feed
;;;220         vTaskDelay(2000); 
000036  f44f60fa          MOV      r0,#0x7d0
00003a  f7fffffe          BL       vTaskDelay
                  |L10.62|
00003e  2e04              CMP      r6,#4                 ;216
000040  d1f4              BNE      |L10.44|
;;;221      }		
;;;222    	
;;;223    	/*更新网络参数*/
;;;224    	get_netparm();
000042  f7fffffe          BL       get_netparm
;;;225    	#if APP_DEBUG
;;;226    	printf("IP leased\r\n");
;;;227    	printf("Ready to connect mqtt server...\r\n");
;;;228    	#endif
;;;229    	 
;;;230    	app_system_Start();             /*连接与订阅*/
000046  f7fffffe          BL       app_system_Start
;;;231    	xTaskCreate( vTaskCheckNet,"vTaskCheckNet",1024, NULL, 1, &xHandleCheckNet ); 		    
00004a  2000              MOVS     r0,#0
00004c  4a38              LDR      r2,|L10.304|
00004e  2301              MOVS     r3,#1
000050  e9cd2001          STRD     r2,r0,[sp,#4]
000054  9300              STR      r3,[sp,#0]
000056  9003              STR      r0,[sp,#0xc]
000058  4603              MOV      r3,r0
00005a  0232              LSLS     r2,r6,#8
00005c  a135              ADR      r1,|L10.308|
00005e  4839              LDR      r0,|L10.324|
000060  f7fffffe          BL       xTaskGenericCreate
;;;232    		 
;;;233    	app_palt_fifoinit();            /*初始化信息存储FIFO*/
000064  f7fffffe          BL       app_palt_fifoinit
;;;234    	app_nrf_ResetStation();         /*复位蓝牙*/
000068  f7fffffe          BL       app_nrf_ResetStation
;;;235    	vTaskDelay(1000);   
00006c  f44f707a          MOV      r0,#0x3e8
000070  f7fffffe          BL       vTaskDelay
;;;236    		
;;;237    	while(1)                  
000074  e058              B        |L10.296|
                  |L10.118|
;;;238    	{
;;;239    		/* 等待所有任务发来事件标志 */
;;;240    		uxBits = xEventGroupWaitBits(xCreatedEventGroup, 	/* 事件标志组句柄 */
000076  2064              MOVS     r0,#0x64
000078  2301              MOVS     r3,#1
00007a  461a              MOV      r2,r3
00007c  2103              MOVS     r1,#3
00007e  9000              STR      r0,[sp,#0]
000080  4831              LDR      r0,|L10.328|
000082  6800              LDR      r0,[r0,#0]  ; xCreatedEventGroup
000084  f7fffffe          BL       xEventGroupWaitBits
000088  4604              MOV      r4,r0
;;;241    										 TASK_BIT_ALL,       							/* 等待TASK_BIT_ALL被设置 */
;;;242    										 pdTRUE,            							/* 退出前TASK_BIT_ALL被清除，这里是TASK_BIT_ALL都被设置才表示“退出”*/
;;;243    										 pdTRUE,             							/* 设置为pdTRUE表示等待TASK_BIT_ALL都被设置*/
;;;244    										 xTicksToWait); 								 	/* 等待延迟时间 */
;;;245    	
;;;246    		if((uxBits & TASK_BIT_ALL) == TASK_BIT_ALL)
00008a  f0040003          AND      r0,r4,#3
00008e  2803              CMP      r0,#3
000090  d101              BNE      |L10.150|
;;;247    		{
;;;248    			IWDG_Feed();  /*喂狗*/
000092  f7fffffe          BL       IWDG_Feed
                  |L10.150|
;;;249    		}
;;;250    
;;;251    		uxBits = xEventGroupWaitBits(xUpdataEventGroup, 	/* 事件标志组句柄 */
000096  2064              MOVS     r0,#0x64
000098  2301              MOVS     r3,#1
00009a  2200              MOVS     r2,#0
00009c  2107              MOVS     r1,#7
00009e  9000              STR      r0,[sp,#0]
0000a0  482a              LDR      r0,|L10.332|
0000a2  6800              LDR      r0,[r0,#0]  ; xUpdataEventGroup
0000a4  f7fffffe          BL       xEventGroupWaitBits
0000a8  4604              MOV      r4,r0
;;;252    										 UPDATA_ALL_START,            		/* 等待TASK_UPDATDEVSTART_BIT被设置 */
;;;253    										 pdFALSE,            							/* 退出前TASK_UPDATSTART_BIT不清除*/
;;;254    										 pdTRUE,             		          /* 设置为pdTRUE表示等待TASK_BIT_ALL都被设置*/
;;;255    										 xTicksToWait); 								 	/* 等待延迟时间 */
;;;256    		
;;;257    		/*没有进入升级状态*/
;;;258    		if(uxBits != UPDATA_GAT_START && uxBits != UPDATA_BLE_START && uxBits !=UPDATA_BRA_START)
0000aa  2c01              CMP      r4,#1
0000ac  d038              BEQ      |L10.288|
0000ae  2c02              CMP      r4,#2
0000b0  d036              BEQ      |L10.288|
0000b2  2c04              CMP      r4,#4
0000b4  d034              BEQ      |L10.288|
;;;259    		{
;;;260    			xResult = xQueueReceive(xQueue1,                    /* 消息队列句柄 */
0000b6  2300              MOVS     r3,#0
0000b8  2264              MOVS     r2,#0x64
0000ba  a905              ADD      r1,sp,#0x14
0000bc  4824              LDR      r0,|L10.336|
0000be  6800              LDR      r0,[r0,#0]  ; xQueue1
0000c0  f7fffffe          BL       xQueueGenericReceive
0000c4  4605              MOV      r5,r0
;;;261    															(void *)&ucQueueValue,      /* 存储接收到的数据到变量ucQueueMsgValue中 */
;;;262    															(TickType_t)xMaxBlockTime); /* 设置阻塞时间 */
;;;263    			if(xResult == pdPASS)  
0000c6  2d01              CMP      r5,#1
0000c8  d10a              BNE      |L10.224|
;;;264    			{
;;;265    				if(ucQueueValue == 0)         /*收到主服务器的PING响应*/
0000ca  f89d0014          LDRB     r0,[sp,#0x14]
0000ce  b910              CBNZ     r0,|L10.214|
;;;266    				{
;;;267    					wait_tcps_ack_time = 0;     /*清零等待时间*/
0000d0  f04f0800          MOV      r8,#0
0000d4  e004              B        |L10.224|
                  |L10.214|
;;;268    				}
;;;269    				else if(ucQueueValue == 1)    /*收到第三方服务器的PING响应*/
0000d6  f89d0014          LDRB     r0,[sp,#0x14]
0000da  2801              CMP      r0,#1
0000dc  d100              BNE      |L10.224|
;;;270    				{
;;;271    					wait_tcp_ack_time = 0;
0000de  2700              MOVS     r7,#0
                  |L10.224|
;;;272    				}
;;;273    				
;;;274    				#if APP_DEBUG
;;;275    				printf("ucQueueValue:%d\r\n",ucQueueValue);
;;;276    				#endif
;;;277    			}														
;;;278    
;;;279    			/*未PING 通服务器时间累加*/
;;;280    			wait_tcp_ack_time++;
0000e0  1c78              ADDS     r0,r7,#1
0000e2  b287              UXTH     r7,r0
;;;281    			wait_tcps_ack_time++;
0000e4  f1080001          ADD      r0,r8,#1
0000e8  fa1ff880          UXTH     r8,r0
;;;282    			
;;;283    			/*第三方服务器 PING 超出300秒无响应 重连*/
;;;284    			if(wait_tcps_ack_time > 300)  
0000ec  f5b87f96          CMP      r8,#0x12c
0000f0  dd07              BLE      |L10.258|
;;;285    			{
;;;286    				#if APP_DEBUG
;;;287    				printf("ping tcps outtime\r\n");
;;;288    				#endif
;;;289    				wait_tcps_ack_time = 0;
0000f2  f04f0800          MOV      r8,#0
;;;290    				sysCfg.parameter.connect_state = DISCONNECT;
0000f6  2000              MOVS     r0,#0
0000f8  490c              LDR      r1,|L10.300|
0000fa  f88100bf          STRB     r0,[r1,#0xbf]
;;;291    				app_system_MqttConnect(SOCK_TCPS);   
0000fe  f7fffffe          BL       app_system_MqttConnect
                  |L10.258|
;;;292    			}
;;;293    			
;;;294    			/*第三方服务器 PING 超出300秒无响应 重连*/
;;;295    			if(wait_tcp_ack_time > 300)
000102  f5b77f96          CMP      r7,#0x12c
000106  dd0b              BLE      |L10.288|
;;;296    			{
;;;297    				wait_tcp_ack_time = 0;
000108  2700              MOVS     r7,#0
;;;298    				if(sysCfg.parameter.data_socket != SOCK_TCPS)
00010a  4808              LDR      r0,|L10.300|
00010c  f89000c0          LDRB     r0,[r0,#0xc0]  ; sysCfg
000110  b130              CBZ      r0,|L10.288|
;;;299    				{
;;;300    				  #if APP_DEBUG
;;;301    					printf("ping tcp outtime\r\n");
;;;302    					#endif
;;;303    					sysCfg.parameter.connect_state = DISCONNECT;
000112  2000              MOVS     r0,#0
000114  4905              LDR      r1,|L10.300|
000116  f88100bf          STRB     r0,[r1,#0xbf]
;;;304    					app_system_MqttConnect(SOCK_TCP);  
00011a  2001              MOVS     r0,#1
00011c  f7fffffe          BL       app_system_MqttConnect
                  |L10.288|
;;;305    				}
;;;306    			}
;;;307    		}
;;;308    			
;;;309    		vTaskDelay(1000);
000120  f44f707a          MOV      r0,#0x3e8
000124  f7fffffe          BL       vTaskDelay
                  |L10.296|
000128  e7a5              B        |L10.118|
;;;310    	}
;;;311    }
;;;312    
                          ENDP

00012a  0000              DCW      0x0000
                  |L10.300|
                          DCD      sysCfg
                  |L10.304|
                          DCD      xHandleCheckNet
                  |L10.308|
000134  76546173          DCB      "vTaskCheckNet",0
000138  6b436865
00013c  636b4e65
000140  7400    
000142  00                DCB      0
000143  00                DCB      0
                  |L10.324|
                          DCD      vTaskCheckNet
                  |L10.328|
                          DCD      xCreatedEventGroup
                  |L10.332|
                          DCD      xUpdataEventGroup
                  |L10.336|
                          DCD      xQueue1

                          AREA ||i.vTaskTaskBleIF||, CODE, READONLY, ALIGN=2

                  vTaskTaskBleIF PROC
;;;140    */
;;;141    static void vTaskTaskBleIF(void *pvParameters)
000000  b508              PUSH     {r3,lr}
;;;142    {	
;;;143    	EventBits_t uxBits;
;;;144    	const TickType_t xTicksToWait = 10 / portTICK_PERIOD_MS; /* 最大延迟100ms */
000002  bf00              NOP      
;;;145    	
;;;146    	while(1)
000004  e027              B        |L11.86|
                  |L11.6|
;;;147    	{	
;;;148    		uxBits = xEventGroupWaitBits(xUpdataEventGroup, 	/* 事件标志组句柄 */
000006  200a              MOVS     r0,#0xa
000008  2301              MOVS     r3,#1
00000a  2200              MOVS     r2,#0
00000c  2107              MOVS     r1,#7
00000e  9000              STR      r0,[sp,#0]
000010  4811              LDR      r0,|L11.88|
000012  6800              LDR      r0,[r0,#0]  ; xUpdataEventGroup
000014  f7fffffe          BL       xEventGroupWaitBits
000018  4604              MOV      r4,r0
;;;149    										 UPDATA_ALL_START,            		/* 等待TASK_UPDATDEVSTART_BIT被设置 */
;;;150    										 pdFALSE,            							/* 退出前TASK_UPDATSTART_BIT不清除*/
;;;151    										 pdTRUE,             		          /* 设置为pdTRUE表示等待TASK_BIT_ALL都被设置*/
;;;152    										 xTicksToWait); 								 	/* 等待延迟时间 */
;;;153    		
;;;154    		/*没有进入升级状态*/
;;;155    		if((uxBits != UPDATA_GAT_START) && (uxBits != UPDATA_BLE_START) && (uxBits !=UPDATA_BRA_START))
00001a  2c01              CMP      r4,#1
00001c  d01b              BEQ      |L11.86|
00001e  2c02              CMP      r4,#2
000020  d019              BEQ      |L11.86|
000022  2c04              CMP      r4,#4
000024  d017              BEQ      |L11.86|
;;;156    		{
;;;157    			app_plat_SendMessage();     /*发送消息缓存中的消息*/
000026  f7fffffe          BL       app_plat_SendMessage
;;;158    			
;;;159    			if(sysCfg.parameter.register_flag == REGISTER)
00002a  480c              LDR      r0,|L11.92|
00002c  f89000e0          LDRB     r0,[r0,#0xe0]  ; sysCfg
000030  2801              CMP      r0,#1
000032  d106              BNE      |L11.66|
;;;160    			{
;;;161    				app_nrf_GetBleData(sysCfg.parameter.nrfstation);
000034  4809              LDR      r0,|L11.92|
000036  30e4              ADDS     r0,r0,#0xe4
000038  f7fffffe          BL       app_nrf_GetBleData
;;;162    				vTaskDelay(20);  
00003c  2014              MOVS     r0,#0x14
00003e  f7fffffe          BL       vTaskDelay
                  |L11.66|
;;;163    			}
;;;164    			app_nrf_DealBleData(); 
000042  f7fffffe          BL       app_nrf_DealBleData
;;;165    			
;;;166    			vTaskDelay(10);
000046  200a              MOVS     r0,#0xa
000048  f7fffffe          BL       vTaskDelay
;;;167    			
;;;168    			/* 发送事件标志，表示任务正常运行 */
;;;169    			xEventGroupSetBits(xCreatedEventGroup, TASK_BIT_BLE);
00004c  2102              MOVS     r1,#2
00004e  4804              LDR      r0,|L11.96|
000050  6800              LDR      r0,[r0,#0]  ; xCreatedEventGroup
000052  f7fffffe          BL       xEventGroupSetBits
                  |L11.86|
000056  e7d6              B        |L11.6|
;;;170    		}
;;;171    	}
;;;172    }
;;;173    
                          ENDP

                  |L11.88|
                          DCD      xUpdataEventGroup
                  |L11.92|
                          DCD      sysCfg
                  |L11.96|
                          DCD      xCreatedEventGroup

                          AREA ||i.vTaskTaskWEB||, CODE, READONLY, ALIGN=1

                  vTaskTaskWEB PROC
;;;44     */
;;;45     static void vTaskTaskWEB(void *pvParameters)
000000  e005              B        |L12.14|
                  |L12.2|
;;;46     {
;;;47     	while(1)
;;;48     	{
;;;49     		vTaskDelay(1000);
000002  f44f707a          MOV      r0,#0x3e8
000006  f7fffffe          BL       vTaskDelay
;;;50     		do_https();/*Web server测试程序*/;
00000a  f7fffffe          BL       do_https
                  |L12.14|
00000e  e7f8              B        |L12.2|
;;;51     	}
;;;52     }
;;;53     
                          ENDP


                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  aucCRCHi
000000  00c18140          DCB      0x00,0xc1,0x81,0x40
000004  01c08041          DCB      0x01,0xc0,0x80,0x41
000008  01c08041          DCB      0x01,0xc0,0x80,0x41
00000c  00c18140          DCB      0x00,0xc1,0x81,0x40
000010  01c08041          DCB      0x01,0xc0,0x80,0x41
000014  00c18140          DCB      0x00,0xc1,0x81,0x40
000018  00c18140          DCB      0x00,0xc1,0x81,0x40
00001c  01c08041          DCB      0x01,0xc0,0x80,0x41
000020  01c08041          DCB      0x01,0xc0,0x80,0x41
000024  00c18140          DCB      0x00,0xc1,0x81,0x40
000028  00c18140          DCB      0x00,0xc1,0x81,0x40
00002c  01c08041          DCB      0x01,0xc0,0x80,0x41
000030  00c18140          DCB      0x00,0xc1,0x81,0x40
000034  01c08041          DCB      0x01,0xc0,0x80,0x41
000038  01c08041          DCB      0x01,0xc0,0x80,0x41
00003c  00c18140          DCB      0x00,0xc1,0x81,0x40
000040  01c08041          DCB      0x01,0xc0,0x80,0x41
000044  00c18140          DCB      0x00,0xc1,0x81,0x40
000048  00c18140          DCB      0x00,0xc1,0x81,0x40
00004c  01c08041          DCB      0x01,0xc0,0x80,0x41
000050  00c18140          DCB      0x00,0xc1,0x81,0x40
000054  01c08041          DCB      0x01,0xc0,0x80,0x41
000058  01c08041          DCB      0x01,0xc0,0x80,0x41
00005c  00c18140          DCB      0x00,0xc1,0x81,0x40
000060  00c18140          DCB      0x00,0xc1,0x81,0x40
000064  01c08041          DCB      0x01,0xc0,0x80,0x41
000068  01c08041          DCB      0x01,0xc0,0x80,0x41
00006c  00c18140          DCB      0x00,0xc1,0x81,0x40
000070  01c08041          DCB      0x01,0xc0,0x80,0x41
000074  00c18140          DCB      0x00,0xc1,0x81,0x40
000078  00c18140          DCB      0x00,0xc1,0x81,0x40
00007c  01c08041          DCB      0x01,0xc0,0x80,0x41
000080  01c08041          DCB      0x01,0xc0,0x80,0x41
000084  00c18140          DCB      0x00,0xc1,0x81,0x40
000088  00c18140          DCB      0x00,0xc1,0x81,0x40
00008c  01c08041          DCB      0x01,0xc0,0x80,0x41
000090  00c18140          DCB      0x00,0xc1,0x81,0x40
000094  01c08041          DCB      0x01,0xc0,0x80,0x41
000098  01c08041          DCB      0x01,0xc0,0x80,0x41
00009c  00c18140          DCB      0x00,0xc1,0x81,0x40
0000a0  00c18140          DCB      0x00,0xc1,0x81,0x40
0000a4  01c08041          DCB      0x01,0xc0,0x80,0x41
0000a8  01c08041          DCB      0x01,0xc0,0x80,0x41
0000ac  00c18140          DCB      0x00,0xc1,0x81,0x40
0000b0  01c08041          DCB      0x01,0xc0,0x80,0x41
0000b4  00c18140          DCB      0x00,0xc1,0x81,0x40
0000b8  00c18140          DCB      0x00,0xc1,0x81,0x40
0000bc  01c08041          DCB      0x01,0xc0,0x80,0x41
0000c0  00c18140          DCB      0x00,0xc1,0x81,0x40
0000c4  01c08041          DCB      0x01,0xc0,0x80,0x41
0000c8  01c08041          DCB      0x01,0xc0,0x80,0x41
0000cc  00c18140          DCB      0x00,0xc1,0x81,0x40
0000d0  01c08041          DCB      0x01,0xc0,0x80,0x41
0000d4  00c18140          DCB      0x00,0xc1,0x81,0x40
0000d8  00c18140          DCB      0x00,0xc1,0x81,0x40
0000dc  01c08041          DCB      0x01,0xc0,0x80,0x41
0000e0  01c08041          DCB      0x01,0xc0,0x80,0x41
0000e4  00c18140          DCB      0x00,0xc1,0x81,0x40
0000e8  00c18140          DCB      0x00,0xc1,0x81,0x40
0000ec  01c08041          DCB      0x01,0xc0,0x80,0x41
0000f0  00c18140          DCB      0x00,0xc1,0x81,0x40
0000f4  01c08041          DCB      0x01,0xc0,0x80,0x41
0000f8  01c08041          DCB      0x01,0xc0,0x80,0x41
0000fc  00c18140          DCB      0x00,0xc1,0x81,0x40
                  aucCRCLo
000100  00c0c101          DCB      0x00,0xc0,0xc1,0x01
000104  c30302c2          DCB      0xc3,0x03,0x02,0xc2
000108  c60607c7          DCB      0xc6,0x06,0x07,0xc7
00010c  05c5c404          DCB      0x05,0xc5,0xc4,0x04
000110  cc0c0dcd          DCB      0xcc,0x0c,0x0d,0xcd
000114  0fcfce0e          DCB      0x0f,0xcf,0xce,0x0e
000118  0acacb0b          DCB      0x0a,0xca,0xcb,0x0b
00011c  c90908c8          DCB      0xc9,0x09,0x08,0xc8
000120  d81819d9          DCB      0xd8,0x18,0x19,0xd9
000124  1bdbda1a          DCB      0x1b,0xdb,0xda,0x1a
000128  1ededf1f          DCB      0x1e,0xde,0xdf,0x1f
00012c  dd1d1cdc          DCB      0xdd,0x1d,0x1c,0xdc
000130  14d4d515          DCB      0x14,0xd4,0xd5,0x15
000134  d71716d6          DCB      0xd7,0x17,0x16,0xd6
000138  d21213d3          DCB      0xd2,0x12,0x13,0xd3
00013c  11d1d010          DCB      0x11,0xd1,0xd0,0x10
000140  f03031f1          DCB      0xf0,0x30,0x31,0xf1
000144  33f3f232          DCB      0x33,0xf3,0xf2,0x32
000148  36f6f737          DCB      0x36,0xf6,0xf7,0x37
00014c  f53534f4          DCB      0xf5,0x35,0x34,0xf4
000150  3cfcfd3d          DCB      0x3c,0xfc,0xfd,0x3d
000154  ff3f3efe          DCB      0xff,0x3f,0x3e,0xfe
000158  fa3a3bfb          DCB      0xfa,0x3a,0x3b,0xfb
00015c  39f9f838          DCB      0x39,0xf9,0xf8,0x38
000160  28e8e929          DCB      0x28,0xe8,0xe9,0x29
000164  eb2b2aea          DCB      0xeb,0x2b,0x2a,0xea
000168  ee2e2fef          DCB      0xee,0x2e,0x2f,0xef
00016c  2dedec2c          DCB      0x2d,0xed,0xec,0x2c
000170  e42425e5          DCB      0xe4,0x24,0x25,0xe5
000174  27e7e626          DCB      0x27,0xe7,0xe6,0x26
000178  22e2e323          DCB      0x22,0xe2,0xe3,0x23
00017c  e12120e0          DCB      0xe1,0x21,0x20,0xe0
000180  a06061a1          DCB      0xa0,0x60,0x61,0xa1
000184  63a3a262          DCB      0x63,0xa3,0xa2,0x62
000188  66a6a767          DCB      0x66,0xa6,0xa7,0x67
00018c  a56564a4          DCB      0xa5,0x65,0x64,0xa4
000190  6cacad6d          DCB      0x6c,0xac,0xad,0x6d
000194  af6f6eae          DCB      0xaf,0x6f,0x6e,0xae
000198  aa6a6bab          DCB      0xaa,0x6a,0x6b,0xab
00019c  69a9a868          DCB      0x69,0xa9,0xa8,0x68
0001a0  78b8b979          DCB      0x78,0xb8,0xb9,0x79
0001a4  bb7b7aba          DCB      0xbb,0x7b,0x7a,0xba
0001a8  be7e7fbf          DCB      0xbe,0x7e,0x7f,0xbf
0001ac  7dbdbc7c          DCB      0x7d,0xbd,0xbc,0x7c
0001b0  b47475b5          DCB      0xb4,0x74,0x75,0xb5
0001b4  77b7b676          DCB      0x77,0xb7,0xb6,0x76
0001b8  72b2b373          DCB      0x72,0xb2,0xb3,0x73
0001bc  b17170b0          DCB      0xb1,0x71,0x70,0xb0
0001c0  50909151          DCB      0x50,0x90,0x91,0x51
0001c4  93535292          DCB      0x93,0x53,0x52,0x92
0001c8  96565797          DCB      0x96,0x56,0x57,0x97
0001cc  55959454          DCB      0x55,0x95,0x94,0x54
0001d0  9c5c5d9d          DCB      0x9c,0x5c,0x5d,0x9d
0001d4  5f9f9e5e          DCB      0x5f,0x9f,0x9e,0x5e
0001d8  5a9a9b5b          DCB      0x5a,0x9a,0x9b,0x5b
0001dc  99595898          DCB      0x99,0x59,0x58,0x98
0001e0  88484989          DCB      0x88,0x48,0x49,0x89
0001e4  4b8b8a4a          DCB      0x4b,0x8b,0x8a,0x4a
0001e8  4e8e8f4f          DCB      0x4e,0x8e,0x8f,0x4f
0001ec  8d4d4c8c          DCB      0x8d,0x4d,0x4c,0x8c
0001f0  44848545          DCB      0x44,0x84,0x85,0x45
0001f4  87474686          DCB      0x87,0x47,0x46,0x86
0001f8  82424383          DCB      0x82,0x42,0x43,0x83
0001fc  41818040          DCB      0x41,0x81,0x80,0x40

                          AREA ||.data||, DATA, ALIGN=2

                  xHandleTaskUserIF
                          DCD      0x00000000
                  xHandleCheckNet
                          DCD      0x00000000
                  xHandleTaskWEB
                          DCD      0x00000000
                  xHandleTaskMsgPro
                          DCD      0x00000000
                  xHandleTaskStart
                          DCD      0x00000000
                  xSemaphore
                          DCD      0x00000000
                  xMutex
                          DCD      0x00000000
                  xPingTimers
                          DCD      0x00000000
                  xNoNetTimers
                          DCD      0x00000000
                  xCreatedEventGroup
                          DCD      0x00000000
                  xUpdataEventGroup
                          DCD      0x00000000
                  xQueue1
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\..\\User\\main.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_main____REV16|
#line 114 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___6_main_c_main____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_main____REVSH|
#line 128
|__asm___6_main_c_main____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

                  __ARM_use_no_argv EQU 0
