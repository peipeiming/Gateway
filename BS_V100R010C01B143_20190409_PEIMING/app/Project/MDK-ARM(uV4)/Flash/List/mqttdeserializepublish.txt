; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\flash\obj\mqttdeserializepublish.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\mqttdeserializepublish.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931,870 -I..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\User\bsp -I..\..\User\bsp\inc -I..\..\User -I..\..\Libraries\CMSIS\Include -I..\..\FreeRTOS\include -I..\..\FreeRTOS\portable\RVDS\ARM_CM3 -I..\..\MQTT -I..\..\Ethernet -I..\..\Ethernet\W5500 -I..\..\Internet\DHCP -I..\..\Internet\DNS -I..\..\User\app\src -I..\..\User\app\inc -I..\..\Internet\NTP -I..\..\Internet\HTTP -I.\RTE\_Flash -ID:\MDK5\ARM\CMSIS\5.0.1\CMSIS\Include -ID:\MDK5\Keil\STM32F1xx_DFP\2.0.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=523 -D_RTE_ -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=.\flash\obj\mqttdeserializepublish.crf ..\..\MQTT\MQTTDeserializePublish.c]
                          THUMB

                          AREA ||i.MQTTDeserialize_ack||, CODE, READONLY, ALIGN=1

                  MQTTDeserialize_ack PROC
;;;81       */
;;;82     int MQTTDeserialize_ack(unsigned char* packettype, unsigned char* dup, unsigned short* packetid, unsigned char* buf, int buflen)
000000  e92d4ffe          PUSH     {r1-r11,lr}
;;;83     {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
00000a  461f              MOV      r7,r3
00000c  f8dda030          LDR      r10,[sp,#0x30]
;;;84     	MQTTHeader header = {0};
000010  2000              MOVS     r0,#0
000012  9002              STR      r0,[sp,#8]
;;;85     	unsigned char* curdata = buf;
000014  9701              STR      r7,[sp,#4]
;;;86     	unsigned char* enddata = NULL;
000016  4680              MOV      r8,r0
;;;87     	int rc = 0;
000018  4681              MOV      r9,r0
;;;88     	int mylen;
;;;89     
;;;90     	FUNC_ENTRY;
;;;91     	header.byte = readChar(&curdata);
00001a  a801              ADD      r0,sp,#4
00001c  f7fffffe          BL       readChar
000020  f88d0008          STRB     r0,[sp,#8]
;;;92     	*dup = header.bits.dup;
000024  9802              LDR      r0,[sp,#8]
000026  f3c000c0          UBFX     r0,r0,#3,#1
00002a  7028              STRB     r0,[r5,#0]
;;;93     	*packettype = header.bits.type;
00002c  9802              LDR      r0,[sp,#8]
00002e  f3c01003          UBFX     r0,r0,#4,#4
000032  7020              STRB     r0,[r4,#0]
;;;94     
;;;95     	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
000034  4669              MOV      r1,sp
000036  9801              LDR      r0,[sp,#4]
000038  f7fffffe          BL       MQTTPacket_decodeBuf
00003c  4681              MOV      r9,r0
00003e  9901              LDR      r1,[sp,#4]
000040  4408              ADD      r0,r0,r1
000042  9001              STR      r0,[sp,#4]
;;;96     	enddata = curdata + mylen;
000044  e9dd1000          LDRD     r1,r0,[sp,#0]
000048  eb000801          ADD      r8,r0,r1
;;;97     
;;;98     	if (enddata - curdata < 2)
00004c  9801              LDR      r0,[sp,#4]
00004e  eba80000          SUB      r0,r8,r0
000052  2802              CMP      r0,#2
000054  da00              BGE      |L1.88|
;;;99     		goto exit;
000056  e006              B        |L1.102|
                  |L1.88|
;;;100    	*packetid = readInt(&curdata);
000058  a801              ADD      r0,sp,#4
00005a  f7fffffe          BL       readInt
00005e  8030              STRH     r0,[r6,#0]
;;;101    
;;;102    	rc = 1;
000060  f04f0901          MOV      r9,#1
;;;103    exit:
000064  bf00              NOP      
                  |L1.102|
;;;104    	FUNC_EXIT_RC(rc);
;;;105    	return rc;
000066  4648              MOV      r0,r9
;;;106    }
000068  e8bd8ffe          POP      {r1-r11,pc}
;;;107    
                          ENDP


                          AREA ||i.MQTTDeserialize_publish||, CODE, READONLY, ALIGN=1

                  MQTTDeserialize_publish PROC
;;;35       */
;;;36     int MQTTDeserialize_publish(unsigned char* dup, int* qos, unsigned char* retained, unsigned short* packetid, MQTTString* topicName,
000000  e92d5fff          PUSH     {r0-r12,lr}
;;;37     		unsigned char** payload, int* payloadlen, unsigned char* buf, int buflen)
;;;38     {
000004  4606              MOV      r6,r0
000006  460c              MOV      r4,r1
000008  4617              MOV      r7,r2
00000a  4698              MOV      r8,r3
00000c  e9ddab0f          LDRD     r10,r11,[sp,#0x3c]
000010  f8dd9038          LDR      r9,[sp,#0x38]
;;;39     	MQTTHeader header = {0};
000014  2000              MOVS     r0,#0
000016  9003              STR      r0,[sp,#0xc]
;;;40     	unsigned char* curdata = buf;
000018  9811              LDR      r0,[sp,#0x44]
00001a  9002              STR      r0,[sp,#8]
;;;41     	unsigned char* enddata = NULL;
00001c  2500              MOVS     r5,#0
;;;42     	int rc = 0;
00001e  2000              MOVS     r0,#0
000020  9001              STR      r0,[sp,#4]
;;;43     	int mylen = 0;
000022  9000              STR      r0,[sp,#0]
;;;44     
;;;45     	FUNC_ENTRY;
;;;46     	header.byte = readChar(&curdata);
000024  a802              ADD      r0,sp,#8
000026  f7fffffe          BL       readChar
00002a  f88d000c          STRB     r0,[sp,#0xc]
;;;47     	if (header.bits.type != PUBLISH)
00002e  9803              LDR      r0,[sp,#0xc]
000030  f3c01003          UBFX     r0,r0,#4,#4
000034  2803              CMP      r0,#3
000036  d000              BEQ      |L2.58|
;;;48     		goto exit;
000038  e032              B        |L2.160|
                  |L2.58|
;;;49     	*dup = header.bits.dup;
00003a  9803              LDR      r0,[sp,#0xc]
00003c  f3c000c0          UBFX     r0,r0,#3,#1
000040  7030              STRB     r0,[r6,#0]
;;;50     	*qos = header.bits.qos;
000042  9803              LDR      r0,[sp,#0xc]
000044  f3c00041          UBFX     r0,r0,#1,#2
000048  6020              STR      r0,[r4,#0]
;;;51     	*retained = header.bits.retain;
00004a  9803              LDR      r0,[sp,#0xc]
00004c  f0000001          AND      r0,r0,#1
000050  7038              STRB     r0,[r7,#0]
;;;52     
;;;53     	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
000052  4669              MOV      r1,sp
000054  9802              LDR      r0,[sp,#8]
000056  f7fffffe          BL       MQTTPacket_decodeBuf
00005a  9001              STR      r0,[sp,#4]
00005c  9902              LDR      r1,[sp,#8]
00005e  4408              ADD      r0,r0,r1
000060  9002              STR      r0,[sp,#8]
;;;54     	enddata = curdata + mylen;
000062  9900              LDR      r1,[sp,#0]
000064  9802              LDR      r0,[sp,#8]
000066  1845              ADDS     r5,r0,r1
;;;55     
;;;56     	if (!readMQTTLenString(topicName, &curdata, enddata) ||
000068  462a              MOV      r2,r5
00006a  a902              ADD      r1,sp,#8
00006c  4648              MOV      r0,r9
00006e  f7fffffe          BL       readMQTTLenString
000072  b110              CBZ      r0,|L2.122|
;;;57     		enddata - curdata < 0) /* do we have enough data to read the protocol version byte? */
000074  9802              LDR      r0,[sp,#8]
000076  1a28              SUBS     r0,r5,r0
000078  d500              BPL      |L2.124|
                  |L2.122|
;;;58     		goto exit;
00007a  e011              B        |L2.160|
                  |L2.124|
;;;59     
;;;60     	if (*qos > 0)
00007c  6820              LDR      r0,[r4,#0]
00007e  2800              CMP      r0,#0
000080  dd04              BLE      |L2.140|
;;;61     		*packetid = readInt(&curdata);
000082  a802              ADD      r0,sp,#8
000084  f7fffffe          BL       readInt
000088  f8a80000          STRH     r0,[r8,#0]
                  |L2.140|
;;;62     
;;;63     	*payloadlen = enddata - curdata;
00008c  9802              LDR      r0,[sp,#8]
00008e  1a28              SUBS     r0,r5,r0
000090  f8cb0000          STR      r0,[r11,#0]
;;;64     	*payload = curdata;
000094  9802              LDR      r0,[sp,#8]
000096  f8ca0000          STR      r0,[r10,#0]
;;;65     	rc = 1;
00009a  2001              MOVS     r0,#1
00009c  9001              STR      r0,[sp,#4]
;;;66     exit:
00009e  bf00              NOP      
                  |L2.160|
;;;67     	FUNC_EXIT_RC(rc);
;;;68     	return rc;
0000a0  9801              LDR      r0,[sp,#4]
;;;69     }
0000a2  b004              ADD      sp,sp,#0x10
0000a4  e8bd9ff0          POP      {r4-r12,pc}
;;;70     
                          ENDP

