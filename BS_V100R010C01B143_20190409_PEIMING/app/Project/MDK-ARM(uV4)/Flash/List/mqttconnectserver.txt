; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\flash\obj\mqttconnectserver.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\mqttconnectserver.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931,870 -I..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\User\bsp -I..\..\User\bsp\inc -I..\..\User -I..\..\Libraries\CMSIS\Include -I..\..\FreeRTOS\include -I..\..\FreeRTOS\portable\RVDS\ARM_CM3 -I..\..\MQTT -I..\..\Ethernet -I..\..\Ethernet\W5500 -I..\..\Internet\DHCP -I..\..\Internet\DNS -I..\..\User\app\src -I..\..\User\app\inc -I..\..\Internet\NTP -I..\..\Internet\HTTP -I.\RTE\_Flash -ID:\MDK5\ARM\CMSIS\5.0.1\CMSIS\Include -ID:\MDK5\Keil\STM32F1xx_DFP\2.0.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=523 -D_RTE_ -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=.\flash\obj\mqttconnectserver.crf ..\..\MQTT\MQTTConnectServer.c]
                          THUMB

                          AREA ||i.MQTTDeserialize_connect||, CODE, READONLY, ALIGN=1

                  MQTTDeserialize_connect PROC
;;;50       */
;;;51     int MQTTDeserialize_connect(MQTTPacket_connectData* data, unsigned char* buf, int len)
000000  e92d43f0          PUSH     {r4-r9,lr}
;;;52     {
000004  b087              SUB      sp,sp,#0x1c
000006  4604              MOV      r4,r0
000008  460e              MOV      r6,r1
00000a  4617              MOV      r7,r2
;;;53     	MQTTHeader header = {0};
00000c  2000              MOVS     r0,#0
00000e  9006              STR      r0,[sp,#0x18]
;;;54     	MQTTConnectFlags flags = {0};
000010  9005              STR      r0,[sp,#0x14]
;;;55     	unsigned char* curdata = buf;
000012  9604              STR      r6,[sp,#0x10]
;;;56     	unsigned char* enddata = &buf[len];
000014  19f5              ADDS     r5,r6,r7
;;;57     	int rc = 0;
000016  4680              MOV      r8,r0
;;;58     	MQTTString Protocol;
;;;59     	int version;
;;;60     	int mylen = 0;
000018  9000              STR      r0,[sp,#0]
;;;61     
;;;62     	FUNC_ENTRY;
;;;63     	header.byte = readChar(&curdata);
00001a  a804              ADD      r0,sp,#0x10
00001c  f7fffffe          BL       readChar
000020  f88d0018          STRB     r0,[sp,#0x18]
;;;64     	if (header.bits.type != CONNECT)
000024  9806              LDR      r0,[sp,#0x18]
000026  f3c01003          UBFX     r0,r0,#4,#4
00002a  2801              CMP      r0,#1
00002c  d000              BEQ      |L1.48|
;;;65     		goto exit;
00002e  e078              B        |L1.290|
                  |L1.48|
;;;66     
;;;67     	curdata += MQTTPacket_decodeBuf(curdata, &mylen); /* read remaining length */
000030  4669              MOV      r1,sp
000032  9804              LDR      r0,[sp,#0x10]
000034  f7fffffe          BL       MQTTPacket_decodeBuf
000038  9904              LDR      r1,[sp,#0x10]
00003a  4408              ADD      r0,r0,r1
00003c  9004              STR      r0,[sp,#0x10]
;;;68     
;;;69     	if (!readMQTTLenString(&Protocol, &curdata, enddata) ||
00003e  462a              MOV      r2,r5
000040  a904              ADD      r1,sp,#0x10
000042  a801              ADD      r0,sp,#4
000044  f7fffffe          BL       readMQTTLenString
000048  b110              CBZ      r0,|L1.80|
;;;70     		enddata - curdata < 0) /* do we have enough data to read the protocol version byte? */
00004a  9804              LDR      r0,[sp,#0x10]
00004c  1a28              SUBS     r0,r5,r0
00004e  d500              BPL      |L1.82|
                  |L1.80|
;;;71     		goto exit;
000050  e067              B        |L1.290|
                  |L1.82|
;;;72     
;;;73     	version = (int)readChar(&curdata); /* Protocol version */
000052  a804              ADD      r0,sp,#0x10
000054  f7fffffe          BL       readChar
000058  4681              MOV      r9,r0
;;;74     	/* If we don't recognize the protocol version, we don't parse the connect packet on the
;;;75     	 * basis that we don't know what the format will be.
;;;76     	 */
;;;77     	if (MQTTPacket_checkVersion(&Protocol, version))
00005a  4649              MOV      r1,r9
00005c  a801              ADD      r0,sp,#4
00005e  f7fffffe          BL       MQTTPacket_checkVersion
000062  2800              CMP      r0,#0
000064  d05c              BEQ      |L1.288|
;;;78     	{
;;;79     		flags.all = readChar(&curdata);
000066  a804              ADD      r0,sp,#0x10
000068  f7fffffe          BL       readChar
00006c  f88d0014          STRB     r0,[sp,#0x14]
;;;80     		data->cleansession = flags.bits.cleansession;
000070  9805              LDR      r0,[sp,#0x14]
000072  f3c00040          UBFX     r0,r0,#1,#1
000076  76a0              STRB     r0,[r4,#0x1a]
;;;81     		data->keepAliveInterval = readInt(&curdata);
000078  a804              ADD      r0,sp,#0x10
00007a  f7fffffe          BL       readInt
00007e  8320              STRH     r0,[r4,#0x18]
;;;82     		if (!readMQTTLenString(&data->clientID, &curdata, enddata))
000080  462a              MOV      r2,r5
000082  a904              ADD      r1,sp,#0x10
000084  f104000c          ADD      r0,r4,#0xc
000088  f7fffffe          BL       readMQTTLenString
00008c  b900              CBNZ     r0,|L1.144|
;;;83     			goto exit;
00008e  e048              B        |L1.290|
                  |L1.144|
;;;84     		data->willFlag = flags.bits.will;
000090  9805              LDR      r0,[sp,#0x14]
000092  f3c00080          UBFX     r0,r0,#2,#1
000096  76e0              STRB     r0,[r4,#0x1b]
;;;85     		if (flags.bits.will)
000098  9805              LDR      r0,[sp,#0x14]
00009a  f3c00080          UBFX     r0,r0,#2,#1
00009e  b1c0              CBZ      r0,|L1.210|
;;;86     		{
;;;87     			data->will.qos = flags.bits.willQoS;
0000a0  9805              LDR      r0,[sp,#0x14]
0000a2  f3c001c1          UBFX     r1,r0,#3,#2
0000a6  f884103d          STRB     r1,[r4,#0x3d]
;;;88     			data->will.retained = flags.bits.willRetain;
0000aa  9805              LDR      r0,[sp,#0x14]
0000ac  f3c01140          UBFX     r1,r0,#5,#1
0000b0  f884103c          STRB     r1,[r4,#0x3c]
;;;89     			if (!readMQTTLenString(&data->will.topicName, &curdata, enddata) ||
0000b4  462a              MOV      r2,r5
0000b6  a904              ADD      r1,sp,#0x10
0000b8  f1040024          ADD      r0,r4,#0x24
0000bc  f7fffffe          BL       readMQTTLenString
0000c0  b130              CBZ      r0,|L1.208|
;;;90     				  !readMQTTLenString(&data->will.message, &curdata, enddata))
0000c2  462a              MOV      r2,r5
0000c4  a904              ADD      r1,sp,#0x10
0000c6  f1040030          ADD      r0,r4,#0x30
0000ca  f7fffffe          BL       readMQTTLenString
0000ce  b900              CBNZ     r0,|L1.210|
                  |L1.208|
;;;91     				goto exit;
0000d0  e027              B        |L1.290|
                  |L1.210|
;;;92     		}
;;;93     		if (flags.bits.username)
0000d2  9805              LDR      r0,[sp,#0x14]
0000d4  f3c010c0          UBFX     r0,r0,#7,#1
0000d8  b1d8              CBZ      r0,|L1.274|
;;;94     		{
;;;95     			if (enddata - curdata < 3 || !readMQTTLenString(&data->username, &curdata, enddata))
0000da  9804              LDR      r0,[sp,#0x10]
0000dc  1a28              SUBS     r0,r5,r0
0000de  2803              CMP      r0,#3
0000e0  db06              BLT      |L1.240|
0000e2  462a              MOV      r2,r5
0000e4  a904              ADD      r1,sp,#0x10
0000e6  f1040040          ADD      r0,r4,#0x40
0000ea  f7fffffe          BL       readMQTTLenString
0000ee  b900              CBNZ     r0,|L1.242|
                  |L1.240|
;;;96     				goto exit; /* username flag set, but no username supplied - invalid */
0000f0  e017              B        |L1.290|
                  |L1.242|
;;;97     			if (flags.bits.password &&
0000f2  9805              LDR      r0,[sp,#0x14]
0000f4  f3c01080          UBFX     r0,r0,#6,#1
0000f8  b180              CBZ      r0,|L1.284|
;;;98     				(enddata - curdata < 3 || !readMQTTLenString(&data->password, &curdata, enddata)))
0000fa  9804              LDR      r0,[sp,#0x10]
0000fc  1a28              SUBS     r0,r5,r0
0000fe  2803              CMP      r0,#3
000100  db06              BLT      |L1.272|
000102  462a              MOV      r2,r5
000104  a904              ADD      r1,sp,#0x10
000106  f104004c          ADD      r0,r4,#0x4c
00010a  f7fffffe          BL       readMQTTLenString
00010e  b928              CBNZ     r0,|L1.284|
                  |L1.272|
;;;99     				goto exit; /* password flag set, but no password supplied - invalid */
000110  e007              B        |L1.290|
                  |L1.274|
;;;100    		}
;;;101    		else if (flags.bits.password)
000112  9805              LDR      r0,[sp,#0x14]
000114  f3c01080          UBFX     r0,r0,#6,#1
000118  b100              CBZ      r0,|L1.284|
;;;102    			goto exit; /* password flag set without username - invalid */
00011a  e002              B        |L1.290|
                  |L1.284|
;;;103    		rc = 1;
00011c  f04f0801          MOV      r8,#1
                  |L1.288|
;;;104    	}
;;;105    exit:
000120  bf00              NOP      
                  |L1.290|
;;;106    	FUNC_EXIT_RC(rc);
;;;107    	return rc;
000122  4640              MOV      r0,r8
;;;108    }
000124  b007              ADD      sp,sp,#0x1c
000126  e8bd83f0          POP      {r4-r9,pc}
;;;109    
                          ENDP


                          AREA ||i.MQTTPacket_checkVersion||, CODE, READONLY, ALIGN=2

                  MQTTPacket_checkVersion PROC
;;;29       */
;;;30     int MQTTPacket_checkVersion(MQTTString* protocol, int version)
000000  b570              PUSH     {r4-r6,lr}
;;;31     {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;32     	int rc = 0;
000006  2600              MOVS     r6,#0
;;;33     
;;;34     	if (version == 3 && memcmp(protocol->lenstring.data, "MQIsdp",
000008  2d03              CMP      r5,#3
00000a  d10d              BNE      |L2.40|
00000c  6861              LDR      r1,[r4,#4]
00000e  2906              CMP      r1,#6
000010  dd01              BLE      |L2.22|
;;;35     			min(6, protocol->lenstring.len)) == 0)
000012  2106              MOVS     r1,#6
000014  e000              B        |L2.24|
                  |L2.22|
000016  6861              LDR      r1,[r4,#4]
                  |L2.24|
000018  460a              MOV      r2,r1
00001a  a10c              ADR      r1,|L2.76|
00001c  68a0              LDR      r0,[r4,#8]
00001e  f7fffffe          BL       memcmp
000022  b908              CBNZ     r0,|L2.40|
;;;36     		rc = 1;
000024  2601              MOVS     r6,#1
000026  e00e              B        |L2.70|
                  |L2.40|
;;;37     	else if (version == 4 && memcmp(protocol->lenstring.data, "MQTT",
000028  2d04              CMP      r5,#4
00002a  d10c              BNE      |L2.70|
00002c  6861              LDR      r1,[r4,#4]
00002e  2904              CMP      r1,#4
000030  dd01              BLE      |L2.54|
;;;38     			min(4, protocol->lenstring.len)) == 0)
000032  2104              MOVS     r1,#4
000034  e000              B        |L2.56|
                  |L2.54|
000036  6861              LDR      r1,[r4,#4]
                  |L2.56|
000038  460a              MOV      r2,r1
00003a  a106              ADR      r1,|L2.84|
00003c  68a0              LDR      r0,[r4,#8]
00003e  f7fffffe          BL       memcmp
000042  b900              CBNZ     r0,|L2.70|
;;;39     		rc = 1;
000044  2601              MOVS     r6,#1
                  |L2.70|
;;;40     	return rc;
000046  4630              MOV      r0,r6
;;;41     }
000048  bd70              POP      {r4-r6,pc}
;;;42     
                          ENDP

00004a  0000              DCW      0x0000
                  |L2.76|
00004c  4d514973          DCB      "MQIsdp",0
000050  647000  
000053  00                DCB      0
                  |L2.84|
000054  4d515454          DCB      "MQTT",0
000058  00      
000059  00                DCB      0
00005a  00                DCB      0
00005b  00                DCB      0

                          AREA ||i.MQTTSerialize_connack||, CODE, READONLY, ALIGN=1

                  MQTTSerialize_connack PROC
;;;118      */
;;;119    int MQTTSerialize_connack(unsigned char* buf, int buflen, unsigned char connack_rc, unsigned char sessionPresent)
000000  e92d43fe          PUSH     {r1-r9,lr}
;;;120    {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
00000a  461f              MOV      r7,r3
;;;121    	MQTTHeader header = {0};
00000c  2000              MOVS     r0,#0
00000e  9002              STR      r0,[sp,#8]
;;;122    	int rc = 0;
000010  4680              MOV      r8,r0
;;;123    	unsigned char *ptr = buf;
000012  9401              STR      r4,[sp,#4]
;;;124    	MQTTConnackFlags flags = {0};
000014  9000              STR      r0,[sp,#0]
;;;125    
;;;126    	FUNC_ENTRY;
;;;127    	if (buflen < 2)
000016  2d02              CMP      r5,#2
000018  da02              BGE      |L3.32|
;;;128    	{
;;;129    		rc = MQTTPACKET_BUFFER_TOO_SHORT;
00001a  f06f0801          MVN      r8,#1
;;;130    		goto exit;
00001e  e027              B        |L3.112|
                  |L3.32|
;;;131    	}
;;;132    	header.byte = 0;
000020  2000              MOVS     r0,#0
000022  f88d0008          STRB     r0,[sp,#8]
;;;133    	header.bits.type = CONNACK;
000026  9802              LDR      r0,[sp,#8]
000028  f02000f0          BIC      r0,r0,#0xf0
00002c  3020              ADDS     r0,r0,#0x20
00002e  9002              STR      r0,[sp,#8]
;;;134    	writeChar(&ptr, header.byte); /* write header */
000030  f89d1008          LDRB     r1,[sp,#8]
000034  a801              ADD      r0,sp,#4
000036  f7fffffe          BL       writeChar
;;;135    
;;;136    	ptr += MQTTPacket_encode(ptr, 2); /* write remaining length */
00003a  2102              MOVS     r1,#2
00003c  9801              LDR      r0,[sp,#4]
00003e  f7fffffe          BL       MQTTPacket_encode
000042  9901              LDR      r1,[sp,#4]
000044  4408              ADD      r0,r0,r1
000046  9001              STR      r0,[sp,#4]
;;;137    
;;;138    	flags.all = 0;
000048  2000              MOVS     r0,#0
00004a  f88d0000          STRB     r0,[sp,#0]
;;;139    	flags.bits.sessionpresent = sessionPresent;
00004e  9800              LDR      r0,[sp,#0]
000050  f3670000          BFI      r0,r7,#0,#1
000054  9000              STR      r0,[sp,#0]
;;;140    	writeChar(&ptr, flags.all); 
000056  f89d1000          LDRB     r1,[sp,#0]
00005a  a801              ADD      r0,sp,#4
00005c  f7fffffe          BL       writeChar
;;;141    	writeChar(&ptr, connack_rc);
000060  4631              MOV      r1,r6
000062  a801              ADD      r0,sp,#4
000064  f7fffffe          BL       writeChar
;;;142    
;;;143    	rc = ptr - buf;
000068  9801              LDR      r0,[sp,#4]
00006a  eba00804          SUB      r8,r0,r4
;;;144    exit:
00006e  bf00              NOP      
                  |L3.112|
;;;145    	FUNC_EXIT_RC(rc);
;;;146    	return rc;
000070  4640              MOV      r0,r8
;;;147    }
000072  e8bd83fe          POP      {r1-r9,pc}
;;;148    
                          ENDP

