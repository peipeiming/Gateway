; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\flash\obj\transport.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\transport.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931,870 -I..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\User\bsp -I..\..\User\bsp\inc -I..\..\User -I..\..\Libraries\CMSIS\Include -I..\..\FreeRTOS\include -I..\..\FreeRTOS\portable\RVDS\ARM_CM3 -I..\..\MQTT -I..\..\Ethernet -I..\..\Ethernet\W5500 -I..\..\Internet\DHCP -I..\..\Internet\DNS -I..\..\User\app\src -I..\..\User\app\inc -I..\..\Internet\NTP -I..\..\Internet\HTTP -I.\RTE\_Flash -ID:\MDK5\ARM\CMSIS\5.0.1\CMSIS\Include -ID:\MDK5\Keil\STM32F1xx_DFP\2.0.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=523 -D_RTE_ -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=.\flash\obj\transport.crf ..\..\User\transport.c]
                          THUMB

                          AREA ||i.get_netparm||, CODE, READONLY, ALIGN=2

                  get_netparm PROC
;;;20     }
;;;21     void get_netparm(void)//将当前网络参数写入 提交到WEB的结构体中
000000  480a              LDR      r0,|L1.44|
;;;22     {
;;;23     	memcpy(ConfigMsg.mac,gWIZNETINFO.mac,6);
000002  490b              LDR      r1,|L1.48|
000004  680a              LDR      r2,[r1,#0]  ; gWIZNETINFO
000006  6002              STR      r2,[r0,#0]  ; ConfigMsg
000008  8889              LDRH     r1,[r1,#4]  ; gWIZNETINFO
00000a  8081              STRH     r1,[r0,#4]
;;;24     	memcpy(ConfigMsg.gw,gWIZNETINFO.gw,4);
00000c  4908              LDR      r1,|L1.48|
00000e  f8d1100e          LDR      r1,[r1,#0xe]  ; gWIZNETINFO
000012  f8c0100e          STR      r1,[r0,#0xe]  ; ConfigMsg
;;;25     	memcpy(ConfigMsg.lip,gWIZNETINFO.ip,4);
000016  4906              LDR      r1,|L1.48|
000018  f8d11006          LDR      r1,[r1,#6]  ; gWIZNETINFO
00001c  f8c01006          STR      r1,[r0,#6]  ; ConfigMsg
;;;26     	memcpy(ConfigMsg.sub,gWIZNETINFO.sn,4);
000020  4903              LDR      r1,|L1.48|
000022  f8d1100a          LDR      r1,[r1,#0xa]  ; gWIZNETINFO
000026  f8c0100a          STR      r1,[r0,#0xa]  ; ConfigMsg
;;;27     	//ConfigMsg.port=sysCfg.parameter.server_port;
;;;28     }
00002a  4770              BX       lr
;;;29     /*DHCP_Run()函数中会调用此函数*/
                          ENDP

                  |L1.44|
                          DCD      ConfigMsg
                  |L1.48|
                          DCD      gWIZNETINFO

                          AREA ||i.my_ip_assign||, CODE, READONLY, ALIGN=2

                  my_ip_assign PROC
;;;40     /*DHCP_Run()函数中会调用此函数*/
;;;41     void my_ip_assign(void)
000000  b510              PUSH     {r4,lr}
;;;42     {
;;;43        getIPfromDHCP(gWIZNETINFO.ip);
000002  480b              LDR      r0,|L2.48|
000004  f7fffffe          BL       getIPfromDHCP
;;;44        getGWfromDHCP(gWIZNETINFO.gw);
000008  4809              LDR      r0,|L2.48|
00000a  3008              ADDS     r0,r0,#8
00000c  f7fffffe          BL       getGWfromDHCP
;;;45        getSNfromDHCP(gWIZNETINFO.sn);
000010  4807              LDR      r0,|L2.48|
000012  1d00              ADDS     r0,r0,#4
000014  f7fffffe          BL       getSNfromDHCP
;;;46        getDNSfromDHCP(gWIZNETINFO.dns);
000018  4805              LDR      r0,|L2.48|
00001a  300c              ADDS     r0,r0,#0xc
00001c  f7fffffe          BL       getDNSfromDHCP
;;;47        gWIZNETINFO.dhcp = NETINFO_DHCP;
000020  2002              MOVS     r0,#2
000022  4903              LDR      r1,|L2.48|
000024  1f89              SUBS     r1,r1,#6
000026  7588              STRB     r0,[r1,#0x16]
;;;48        /* Network initialization */
;;;49        network_init();      // apply from dhcp
000028  f7fffffe          BL       network_init
;;;50     	 #if APP_DEBUG
;;;51        printf("DHCP LEASED TIME : %d Sec.\r\n", getDHCPLeasetime());
;;;52     	 #endif
;;;53     }
00002c  bd10              POP      {r4,pc}
;;;54     
                          ENDP

00002e  0000              DCW      0x0000
                  |L2.48|
                          DCD      gWIZNETINFO+0x6

                          AREA ||i.my_ip_conflict||, CODE, READONLY, ALIGN=2

                  my_ip_conflict PROC
;;;29     /*DHCP_Run()函数中会调用此函数*/
;;;30     void my_ip_conflict(void)
000000  a002              ADR      r0,|L3.12|
;;;31     {
;;;32     	printf("CONFLICT IP from DHCP\r\n");
000002  f7fffffe          BL       __2printf
;;;33     	//halt or reset or any...
;;;34     	while(1); // this example is halt.
000006  bf00              NOP      
                  |L3.8|
000008  e7fe              B        |L3.8|
;;;35     }
;;;36     
                          ENDP

00000a  0000              DCW      0x0000
                  |L3.12|
00000c  434f4e46          DCB      "CONFLICT IP from DHCP\r\n",0
000010  4c494354
000014  20495020
000018  66726f6d
00001c  20444843
000020  500d0a00

                          AREA ||i.net_init||, CODE, READONLY, ALIGN=2

                  net_init PROC
;;;54     
;;;55     void net_init(void)
000000  b500              PUSH     {lr}
;;;56     {
000002  b085              SUB      sp,sp,#0x14
;;;57     	uint8_t tmp;//
;;;58     	uint8_t memsize[2][8] = { {4,4,1,2,2,1,1,1},{4,4,1,2,2,1,1}};
000004  4b2f              LDR      r3,|L4.196|
000006  cb0f              LDM      r3,{r0-r3}
000008  e88d000f          STM      sp,{r0-r3}
;;;59     		
;;;60     	memcpy(gWIZNETINFO.mac,sysCfg.parameter.client_mac,6);
00000c  492e              LDR      r1,|L4.200|
00000e  482f              LDR      r0,|L4.204|
000010  6802              LDR      r2,[r0,#0]  ; sysCfg
000012  600a              STR      r2,[r1,#0]  ; gWIZNETINFO
000014  8880              LDRH     r0,[r0,#4]  ; sysCfg
000016  8088              STRH     r0,[r1,#4]
;;;61     		
;;;62     		// First of all, Should register SPI callback functions implemented by user for accessing WIZCHIP 
;;;63     	/* Critical section callback */
;;;64     	reg_wizchip_cris_cbfunc(SPI_CrisEnter, SPI_CrisExit);	//注册临界区函数
000018  492d              LDR      r1,|L4.208|
00001a  482e              LDR      r0,|L4.212|
00001c  f7fffffe          BL       reg_wizchip_cris_cbfunc
;;;65     	/* Chip selection call back */
;;;66     #if   _WIZCHIP_IO_MODE_ == _WIZCHIP_IO_MODE_SPI_VDM_
;;;67     	reg_wizchip_cs_cbfunc(SPI_CS_Select, SPI_CS_Deselect);//注册SPI片选信号函数
000020  492d              LDR      r1,|L4.216|
000022  482e              LDR      r0,|L4.220|
000024  f7fffffe          BL       reg_wizchip_cs_cbfunc
;;;68     #elif _WIZCHIP_IO_MODE_ == _WIZCHIP_IO_MODE_SPI_FDM_
;;;69     	reg_wizchip_cs_cbfunc(SPI_CS_Select, SPI_CS_Deselect);  // CS must be tried with LOW.
;;;70     #else
;;;71        #if (_WIZCHIP_IO_MODE_ & _WIZCHIP_IO_MODE_SIP_) != _WIZCHIP_IO_MODE_SIP_
;;;72           #error "Unknown _WIZCHIP_IO_MODE_"
;;;73        #else
;;;74           reg_wizchip_cs_cbfunc(wizchip_select, wizchip_deselect);
;;;75        #endif
;;;76     #endif
;;;77     	/* SPI Read & Write callback function */
;;;78     	reg_wizchip_spi_cbfunc(SPI_ReadByte, SPI_WriteByte);	//注册读写函数
000028  492d              LDR      r1,|L4.224|
00002a  482e              LDR      r0,|L4.228|
00002c  f7fffffe          BL       reg_wizchip_spi_cbfunc
;;;79     
;;;80     	/* WIZCHIP SOCKET Buffer initialize */
;;;81     	if(ctlwizchip(CW_INIT_WIZCHIP,(void*)memsize) == -1){
000030  4669              MOV      r1,sp
000032  2001              MOVS     r0,#1
000034  f7fffffe          BL       ctlwizchip
000038  1c40              ADDS     r0,r0,#1
00003a  b908              CBNZ     r0,|L4.64|
;;;82     		 #if APP_DEBUG
;;;83     		 printf("WIZCHIP Initialized fail.\r\n");
;;;84     		 #endif
;;;85     		 while(1);
00003c  bf00              NOP      
                  |L4.62|
00003e  e7fe              B        |L4.62|
                  |L4.64|
;;;86     	}
;;;87     
;;;88     	/* PHY link status check */
;;;89     	do{
000040  bf00              NOP      
                  |L4.66|
;;;90     		 if(ctlwizchip(CW_GET_PHYLINK, (void*)&tmp) == -1){
000042  a904              ADD      r1,sp,#0x10
000044  200f              MOVS     r0,#0xf
000046  f7fffffe          BL       ctlwizchip
;;;91     			  #if APP_DEBUG
;;;92     				printf("Unknown PHY Link stauts.\r\n");
;;;93     		    #endif
;;;94     		 }
;;;95     		 IWDG_Feed();  /*喂狗*/
00004a  f7fffffe          BL       IWDG_Feed
;;;96     	}while(tmp == PHY_LINK_OFF);
00004e  f89d0010          LDRB     r0,[sp,#0x10]
000052  2800              CMP      r0,#0
000054  d0f5              BEQ      |L4.66|
;;;97     	setSHAR(gWIZNETINFO.mac);//启用DHCP之前必须先设置MAC地址
000056  2206              MOVS     r2,#6
000058  491b              LDR      r1,|L4.200|
00005a  f44f6010          MOV      r0,#0x900
00005e  f7fffffe          BL       WIZCHIP_WRITE_BUF
;;;98     	DHCP_init(SOCK_DHCP, gDATABUF);
000062  4921              LDR      r1,|L4.232|
000064  2003              MOVS     r0,#3
000066  f7fffffe          BL       DHCP_init
;;;99     	/*注册ip_assign,ip_updata,ip_conflict函数，DHCP_Run后，会根据当前状态回调相应的处理函数*/
;;;100    	reg_dhcp_cbfunc(my_ip_assign, my_ip_assign, my_ip_conflict);
00006a  4a20              LDR      r2,|L4.236|
00006c  4920              LDR      r1,|L4.240|
00006e  4608              MOV      r0,r1
000070  f7fffffe          BL       reg_dhcp_cbfunc
;;;101      //设置默认IP 为192.168.0.198,当DHCP 分配不到IP时，在浏览器输入次参数 设置为静态IP
;;;102    	ctlnetwork(CN_SET_NETINFO, (void*)&gWIZNETINFO);
000074  4914              LDR      r1,|L4.200|
000076  2000              MOVS     r0,#0
000078  f7fffffe          BL       ctlnetwork
;;;103    	//设置重试时间，默认为2000(200ms) 
;;;104    	//每一单位数值为100微秒,初始化时值设为2000(0x07D0),等于200毫秒
;;;105    	setRTR(0x07d0);
00007c  2107              MOVS     r1,#7
00007e  f44f50c8          MOV      r0,#0x1900
000082  f7fffffe          BL       WIZCHIP_WRITE
000086  21d0              MOVS     r1,#0xd0
000088  0148              LSLS     r0,r1,#5
00008a  f7fffffe          BL       WIZCHIP_WRITE
;;;106    	//设置重试次数，默认为8次 
;;;107    	//如果重发的次数超过设定值,则产生超时中断(相关的端口中断寄存器中的Sn_IR 超时位(TIMEOUT)置“1”)
;;;108    	setRCR(5);
00008e  2105              MOVS     r1,#5
000090  f44f50d8          MOV      r0,#0x1b00
000094  f7fffffe          BL       WIZCHIP_WRITE
;;;109    	//setIMR(IM_IR7);//开启IP冲突异常中断
;;;110    	
;;;111       setSIMR(0x07);    //开启Socket 0、1、2 中断
000098  2107              MOVS     r1,#7
00009a  f44f50c0          MOV      r0,#0x1800
00009e  f7fffffe          BL       WIZCHIP_WRITE
;;;112       setSn_IMR(SOCK_TCPS,Sn_IR_RECV);  //开主服务器接收中断
0000a2  2104              MOVS     r1,#4
0000a4  f6424008          MOV      r0,#0x2c08
0000a8  f7fffffe          BL       WIZCHIP_WRITE
;;;113    	 setSn_IMR(SOCK_TCP,Sn_IR_RECV);   //开第三方服务器接收中断
0000ac  2104              MOVS     r1,#4
0000ae  f6424028          MOV      r0,#0x2c28
0000b2  f7fffffe          BL       WIZCHIP_WRITE
;;;114    	 setSn_IMR(SOCK_BLE,Sn_IR_RECV);   //开蓝牙升级服务器接收中断
0000b6  2104              MOVS     r1,#4
0000b8  f6424048          MOV      r0,#0x2c48
0000bc  f7fffffe          BL       WIZCHIP_WRITE
;;;115    }
0000c0  b005              ADD      sp,sp,#0x14
0000c2  bd00              POP      {pc}
;;;116    
                          ENDP

                  |L4.196|
                          DCD      ||.constdata||+0x200
                  |L4.200|
                          DCD      gWIZNETINFO
                  |L4.204|
                          DCD      sysCfg+0xda
                  |L4.208|
                          DCD      SPI_CrisExit
                  |L4.212|
                          DCD      SPI_CrisEnter
                  |L4.216|
                          DCD      SPI_CS_Deselect
                  |L4.220|
                          DCD      SPI_CS_Select
                  |L4.224|
                          DCD      SPI_WriteByte
                  |L4.228|
                          DCD      SPI_ReadByte
                  |L4.232|
                          DCD      gDATABUF
                  |L4.236|
                          DCD      my_ip_conflict
                  |L4.240|
                          DCD      my_ip_assign

                          AREA ||i.network_init||, CODE, READONLY, ALIGN=2

                  network_init PROC
;;;116    
;;;117    void network_init(void)
000000  b500              PUSH     {lr}
;;;118    {
000002  b089              SUB      sp,sp,#0x24
;;;119      uint8_t tmpstr[6] = {0};
000004  2000              MOVS     r0,#0
000006  9007              STR      r0,[sp,#0x1c]
000008  9008              STR      r0,[sp,#0x20]
;;;120    	wiz_NetInfo netinfo;
;;;121    
;;;122    	// Set Network information from netinfo structure
;;;123    	ctlnetwork(CN_SET_NETINFO, (void*)&gWIZNETINFO);
00000a  4909              LDR      r1,|L5.48|
00000c  f7fffffe          BL       ctlnetwork
;;;124    
;;;125    	// Get Network information
;;;126    	ctlnetwork(CN_GET_NETINFO, (void*)&netinfo);
000010  a901              ADD      r1,sp,#4
000012  2001              MOVS     r0,#1
000014  f7fffffe          BL       ctlnetwork
;;;127    
;;;128    	// Display Network Information
;;;129    	ctlwizchip(CW_GET_ID,(void*)tmpstr);
000018  a907              ADD      r1,sp,#0x1c
00001a  2008              MOVS     r0,#8
00001c  f7fffffe          BL       ctlwizchip
;;;130    
;;;131    	if(netinfo.dhcp == NETINFO_DHCP) 
;;;132    	{
;;;133    		#if APP_DEBUG
;;;134    		printf("\r\n=== %s NET CONF : DHCP ===\r\n",(char*)tmpstr);
;;;135    		#endif
;;;136    	}
;;;137    	else 
;;;138    	{
;;;139    		#if APP_DEBUG
;;;140    		printf("\r\n=== %s NET CONF : Static ===\r\n",(char*)tmpstr);
;;;141    	  #endif
;;;142    	}
;;;143    
;;;144    	memcpy(sysCfg.parameter.client_ip,netinfo.ip,4);
000020  4804              LDR      r0,|L5.52|
000022  f8dd100a          LDR      r1,[sp,#0xa]
000026  f8c010c4          STR      r1,[r0,#0xc4]  ; sysCfg
;;;145    	
;;;146    	#if APP_DEBUG
;;;147    	printf("MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",netinfo.mac[0],netinfo.mac[1],netinfo.mac[2],
;;;148    			netinfo.mac[3],netinfo.mac[4],netinfo.mac[5]);
;;;149    	printf("SIP: %d.%d.%d.%d\r\n", netinfo.ip[0],netinfo.ip[1],netinfo.ip[2],netinfo.ip[3]);
;;;150    	printf("GAR: %d.%d.%d.%d\r\n", netinfo.gw[0],netinfo.gw[1],netinfo.gw[2],netinfo.gw[3]);
;;;151    	printf("SUB: %d.%d.%d.%d\r\n", netinfo.sn[0],netinfo.sn[1],netinfo.sn[2],netinfo.sn[3]);
;;;152    	printf("DNS: %d.%d.%d.%d\r\n", netinfo.dns[0],netinfo.dns[1],netinfo.dns[2],netinfo.dns[3]);
;;;153    	printf("===========================\r\n");
;;;154    	#endif
;;;155    }
00002a  b009              ADD      sp,sp,#0x24
00002c  bd00              POP      {pc}
;;;156    
                          ENDP

00002e  0000              DCW      0x0000
                  |L5.48|
                          DCD      gWIZNETINFO
                  |L5.52|
                          DCD      sysCfg

                          AREA ||i.set_netparm||, CODE, READONLY, ALIGN=2

                  set_netparm PROC
;;;13     uint8_t domain_name[]="www.baidu.com";//支持域名访问
;;;14     void set_netparm(void)//将WEB 端配置的IP写入W5500
000000  b510              PUSH     {r4,lr}
;;;15     {
;;;16     	memcpy(gWIZNETINFO.gw,sysCfg.parameter.gw,4);
000002  4809              LDR      r0,|L6.40|
000004  4909              LDR      r1,|L6.44|
000006  f8d11055          LDR      r1,[r1,#0x55]  ; sysCfg
00000a  f8c0100e          STR      r1,[r0,#0xe]  ; gWIZNETINFO
;;;17     	memcpy(gWIZNETINFO.ip,sysCfg.parameter.ip,4);
00000e  4907              LDR      r1,|L6.44|
000010  f8d1104d          LDR      r1,[r1,#0x4d]  ; sysCfg
000014  f8c01006          STR      r1,[r0,#6]  ; gWIZNETINFO
;;;18     	memcpy(gWIZNETINFO.sn,sysCfg.parameter.sub,4);
000018  4904              LDR      r1,|L6.44|
00001a  f8d11051          LDR      r1,[r1,#0x51]  ; sysCfg
00001e  f8c0100a          STR      r1,[r0,#0xa]  ; gWIZNETINFO
;;;19     	network_init();
000022  f7fffffe          BL       network_init
;;;20     }
000026  bd10              POP      {r4,pc}
;;;21     void get_netparm(void)//将当前网络参数写入 提交到WEB的结构体中
                          ENDP

                  |L6.40|
                          DCD      gWIZNETINFO
                  |L6.44|
                          DCD      sysCfg

                          AREA ||i.transport_close||, CODE, READONLY, ALIGN=1

                  transport_close PROC
;;;220      */
;;;221    int transport_close(unsigned char socket)
000000  b510              PUSH     {r4,lr}
;;;222    {
000002  4604              MOV      r4,r0
;;;223      close(socket);
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       close
;;;224      return 0;
00000a  2000              MOVS     r0,#0
;;;225    }
00000c  bd10              POP      {r4,pc}
                          ENDP


                          AREA ||i.transport_getdata0||, CODE, READONLY, ALIGN=1

                  transport_getdata0 PROC
;;;172      */
;;;173    int transport_getdata0(unsigned char* buf, int count)
000000  b570              PUSH     {r4-r6,lr}
;;;174    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;175      return recv(SOCK_TCPS,buf,count);
000006  b2aa              UXTH     r2,r5
000008  4621              MOV      r1,r4
00000a  2000              MOVS     r0,#0
00000c  f7fffffe          BL       recv
;;;176    }
000010  bd70              POP      {r4-r6,pc}
;;;177    
                          ENDP


                          AREA ||i.transport_getdata1||, CODE, READONLY, ALIGN=1

                  transport_getdata1 PROC
;;;177    
;;;178    int transport_getdata1(unsigned char* buf, int count)
000000  b570              PUSH     {r4-r6,lr}
;;;179    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;180      return recv(SOCK_TCP,buf,count);
000006  b2aa              UXTH     r2,r5
000008  4621              MOV      r1,r4
00000a  2001              MOVS     r0,#1
00000c  f7fffffe          BL       recv
;;;181    }
000010  bd70              POP      {r4-r6,pc}
;;;182    
                          ENDP


                          AREA ||i.transport_open||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  transport_open PROC
;;;187      */
;;;188    int transport_open(unsigned char sock, unsigned char * addr, unsigned int port)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;189    {
000004  4604              MOV      r4,r0
000006  460f              MOV      r7,r1
000008  4615              MOV      r5,r2
;;;190    	static uint16_t numport=1000;
;;;191      int32_t ret;
;;;192      //新建一个Socket并绑定本地端口
;;;193    	printf("socket:%d  port:%d\r\n",sock,numport);
00000a  4819              LDR      r0,|L10.112|
00000c  8802              LDRH     r2,[r0,#0]  ; numport
00000e  4621              MOV      r1,r4
000010  a018              ADR      r0,|L10.116|
000012  f7fffffe          BL       __2printf
;;;194      ret = socket(sock,Sn_MR_TCP,numport++,0x00);
000016  4816              LDR      r0,|L10.112|
000018  8802              LDRH     r2,[r0,#0]  ; numport
00001a  8800              LDRH     r0,[r0,#0]  ; numport
00001c  1c40              ADDS     r0,r0,#1
00001e  4b14              LDR      r3,|L10.112|
000020  8018              STRH     r0,[r3,#0]
000022  2300              MOVS     r3,#0
000024  2101              MOVS     r1,#1
000026  4620              MOV      r0,r4
000028  f7fffffe          BL       socket
00002c  4606              MOV      r6,r0
;;;195      if(ret != sock){
00002e  42a6              CMP      r6,r4
000030  d002              BEQ      |L10.56|
;;;196    		#if APP_DEBUG
;;;197        printf("%d:Socket Error\r\n",sock);
;;;198    		#endif
;;;199       return 0; 
000032  2000              MOVS     r0,#0
                  |L10.52|
;;;200      }
;;;201    	if(numport>=32000)
;;;202    		numport=4096;
;;;203      //连接TCP服务器
;;;204    	vTaskDelay(2000);
;;;205    	IWDG_Feed();  /*喂狗*/
;;;206      ret = connect(sock,addr,port);
;;;207      if(ret != SOCK_OK){
;;;208    		#if APP_DEBUG
;;;209        printf("%d:Socket Connect Error\r\n",sock);
;;;210    	  #endif
;;;211    		//printf("%d",ret);
;;;212    		return 0;  
;;;213      }	
;;;214    	return 1;
;;;215    }
000034  e8bd81f0          POP      {r4-r8,pc}
                  |L10.56|
000038  480d              LDR      r0,|L10.112|
00003a  8800              LDRH     r0,[r0,#0]            ;201  ; numport
00003c  f5b04ffa          CMP      r0,#0x7d00            ;201
000040  db03              BLT      |L10.74|
000042  f44f5080          MOV      r0,#0x1000            ;202
000046  490a              LDR      r1,|L10.112|
000048  8008              STRH     r0,[r1,#0]            ;202
                  |L10.74|
00004a  f44f60fa          MOV      r0,#0x7d0             ;204
00004e  f7fffffe          BL       vTaskDelay
000052  f7fffffe          BL       IWDG_Feed
000056  b2aa              UXTH     r2,r5                 ;206
000058  4639              MOV      r1,r7                 ;206
00005a  4620              MOV      r0,r4                 ;206
00005c  f7fffffe          BL       connect
000060  4606              MOV      r6,r0                 ;206
000062  2e01              CMP      r6,#1                 ;207
000064  d001              BEQ      |L10.106|
000066  2000              MOVS     r0,#0                 ;212
000068  e7e4              B        |L10.52|
                  |L10.106|
00006a  2001              MOVS     r0,#1                 ;214
00006c  e7e2              B        |L10.52|
;;;216    /**
                          ENDP

00006e  0000              DCW      0x0000
                  |L10.112|
                          DCD      numport
                  |L10.116|
000074  736f636b          DCB      "socket:%d  port:%d\r\n",0
000078  65743a25
00007c  64202070
000080  6f72743a
000084  25640d0a
000088  00      
000089  00                DCB      0
00008a  00                DCB      0
00008b  00                DCB      0

                          AREA ||i.transport_sendPacketBuffer||, CODE, READONLY, ALIGN=1

                  transport_sendPacketBuffer PROC
;;;162      */
;;;163    int transport_sendPacketBuffer(unsigned char socket,unsigned char* buf, int buflen)
000000  b570              PUSH     {r4-r6,lr}
;;;164    {
000002  4605              MOV      r5,r0
000004  460e              MOV      r6,r1
000006  4614              MOV      r4,r2
;;;165      return send(socket,buf,buflen);
000008  b2a2              UXTH     r2,r4
00000a  4631              MOV      r1,r6
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       send
;;;166    }
000012  bd70              POP      {r4-r6,pc}
;;;167    /**
                          ENDP


                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  gDATABUF
                          %        2048

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  aucCRCHi
000000  00c18140          DCB      0x00,0xc1,0x81,0x40
000004  01c08041          DCB      0x01,0xc0,0x80,0x41
000008  01c08041          DCB      0x01,0xc0,0x80,0x41
00000c  00c18140          DCB      0x00,0xc1,0x81,0x40
000010  01c08041          DCB      0x01,0xc0,0x80,0x41
000014  00c18140          DCB      0x00,0xc1,0x81,0x40
000018  00c18140          DCB      0x00,0xc1,0x81,0x40
00001c  01c08041          DCB      0x01,0xc0,0x80,0x41
000020  01c08041          DCB      0x01,0xc0,0x80,0x41
000024  00c18140          DCB      0x00,0xc1,0x81,0x40
000028  00c18140          DCB      0x00,0xc1,0x81,0x40
00002c  01c08041          DCB      0x01,0xc0,0x80,0x41
000030  00c18140          DCB      0x00,0xc1,0x81,0x40
000034  01c08041          DCB      0x01,0xc0,0x80,0x41
000038  01c08041          DCB      0x01,0xc0,0x80,0x41
00003c  00c18140          DCB      0x00,0xc1,0x81,0x40
000040  01c08041          DCB      0x01,0xc0,0x80,0x41
000044  00c18140          DCB      0x00,0xc1,0x81,0x40
000048  00c18140          DCB      0x00,0xc1,0x81,0x40
00004c  01c08041          DCB      0x01,0xc0,0x80,0x41
000050  00c18140          DCB      0x00,0xc1,0x81,0x40
000054  01c08041          DCB      0x01,0xc0,0x80,0x41
000058  01c08041          DCB      0x01,0xc0,0x80,0x41
00005c  00c18140          DCB      0x00,0xc1,0x81,0x40
000060  00c18140          DCB      0x00,0xc1,0x81,0x40
000064  01c08041          DCB      0x01,0xc0,0x80,0x41
000068  01c08041          DCB      0x01,0xc0,0x80,0x41
00006c  00c18140          DCB      0x00,0xc1,0x81,0x40
000070  01c08041          DCB      0x01,0xc0,0x80,0x41
000074  00c18140          DCB      0x00,0xc1,0x81,0x40
000078  00c18140          DCB      0x00,0xc1,0x81,0x40
00007c  01c08041          DCB      0x01,0xc0,0x80,0x41
000080  01c08041          DCB      0x01,0xc0,0x80,0x41
000084  00c18140          DCB      0x00,0xc1,0x81,0x40
000088  00c18140          DCB      0x00,0xc1,0x81,0x40
00008c  01c08041          DCB      0x01,0xc0,0x80,0x41
000090  00c18140          DCB      0x00,0xc1,0x81,0x40
000094  01c08041          DCB      0x01,0xc0,0x80,0x41
000098  01c08041          DCB      0x01,0xc0,0x80,0x41
00009c  00c18140          DCB      0x00,0xc1,0x81,0x40
0000a0  00c18140          DCB      0x00,0xc1,0x81,0x40
0000a4  01c08041          DCB      0x01,0xc0,0x80,0x41
0000a8  01c08041          DCB      0x01,0xc0,0x80,0x41
0000ac  00c18140          DCB      0x00,0xc1,0x81,0x40
0000b0  01c08041          DCB      0x01,0xc0,0x80,0x41
0000b4  00c18140          DCB      0x00,0xc1,0x81,0x40
0000b8  00c18140          DCB      0x00,0xc1,0x81,0x40
0000bc  01c08041          DCB      0x01,0xc0,0x80,0x41
0000c0  00c18140          DCB      0x00,0xc1,0x81,0x40
0000c4  01c08041          DCB      0x01,0xc0,0x80,0x41
0000c8  01c08041          DCB      0x01,0xc0,0x80,0x41
0000cc  00c18140          DCB      0x00,0xc1,0x81,0x40
0000d0  01c08041          DCB      0x01,0xc0,0x80,0x41
0000d4  00c18140          DCB      0x00,0xc1,0x81,0x40
0000d8  00c18140          DCB      0x00,0xc1,0x81,0x40
0000dc  01c08041          DCB      0x01,0xc0,0x80,0x41
0000e0  01c08041          DCB      0x01,0xc0,0x80,0x41
0000e4  00c18140          DCB      0x00,0xc1,0x81,0x40
0000e8  00c18140          DCB      0x00,0xc1,0x81,0x40
0000ec  01c08041          DCB      0x01,0xc0,0x80,0x41
0000f0  00c18140          DCB      0x00,0xc1,0x81,0x40
0000f4  01c08041          DCB      0x01,0xc0,0x80,0x41
0000f8  01c08041          DCB      0x01,0xc0,0x80,0x41
0000fc  00c18140          DCB      0x00,0xc1,0x81,0x40
                  aucCRCLo
000100  00c0c101          DCB      0x00,0xc0,0xc1,0x01
000104  c30302c2          DCB      0xc3,0x03,0x02,0xc2
000108  c60607c7          DCB      0xc6,0x06,0x07,0xc7
00010c  05c5c404          DCB      0x05,0xc5,0xc4,0x04
000110  cc0c0dcd          DCB      0xcc,0x0c,0x0d,0xcd
000114  0fcfce0e          DCB      0x0f,0xcf,0xce,0x0e
000118  0acacb0b          DCB      0x0a,0xca,0xcb,0x0b
00011c  c90908c8          DCB      0xc9,0x09,0x08,0xc8
000120  d81819d9          DCB      0xd8,0x18,0x19,0xd9
000124  1bdbda1a          DCB      0x1b,0xdb,0xda,0x1a
000128  1ededf1f          DCB      0x1e,0xde,0xdf,0x1f
00012c  dd1d1cdc          DCB      0xdd,0x1d,0x1c,0xdc
000130  14d4d515          DCB      0x14,0xd4,0xd5,0x15
000134  d71716d6          DCB      0xd7,0x17,0x16,0xd6
000138  d21213d3          DCB      0xd2,0x12,0x13,0xd3
00013c  11d1d010          DCB      0x11,0xd1,0xd0,0x10
000140  f03031f1          DCB      0xf0,0x30,0x31,0xf1
000144  33f3f232          DCB      0x33,0xf3,0xf2,0x32
000148  36f6f737          DCB      0x36,0xf6,0xf7,0x37
00014c  f53534f4          DCB      0xf5,0x35,0x34,0xf4
000150  3cfcfd3d          DCB      0x3c,0xfc,0xfd,0x3d
000154  ff3f3efe          DCB      0xff,0x3f,0x3e,0xfe
000158  fa3a3bfb          DCB      0xfa,0x3a,0x3b,0xfb
00015c  39f9f838          DCB      0x39,0xf9,0xf8,0x38
000160  28e8e929          DCB      0x28,0xe8,0xe9,0x29
000164  eb2b2aea          DCB      0xeb,0x2b,0x2a,0xea
000168  ee2e2fef          DCB      0xee,0x2e,0x2f,0xef
00016c  2dedec2c          DCB      0x2d,0xed,0xec,0x2c
000170  e42425e5          DCB      0xe4,0x24,0x25,0xe5
000174  27e7e626          DCB      0x27,0xe7,0xe6,0x26
000178  22e2e323          DCB      0x22,0xe2,0xe3,0x23
00017c  e12120e0          DCB      0xe1,0x21,0x20,0xe0
000180  a06061a1          DCB      0xa0,0x60,0x61,0xa1
000184  63a3a262          DCB      0x63,0xa3,0xa2,0x62
000188  66a6a767          DCB      0x66,0xa6,0xa7,0x67
00018c  a56564a4          DCB      0xa5,0x65,0x64,0xa4
000190  6cacad6d          DCB      0x6c,0xac,0xad,0x6d
000194  af6f6eae          DCB      0xaf,0x6f,0x6e,0xae
000198  aa6a6bab          DCB      0xaa,0x6a,0x6b,0xab
00019c  69a9a868          DCB      0x69,0xa9,0xa8,0x68
0001a0  78b8b979          DCB      0x78,0xb8,0xb9,0x79
0001a4  bb7b7aba          DCB      0xbb,0x7b,0x7a,0xba
0001a8  be7e7fbf          DCB      0xbe,0x7e,0x7f,0xbf
0001ac  7dbdbc7c          DCB      0x7d,0xbd,0xbc,0x7c
0001b0  b47475b5          DCB      0xb4,0x74,0x75,0xb5
0001b4  77b7b676          DCB      0x77,0xb7,0xb6,0x76
0001b8  72b2b373          DCB      0x72,0xb2,0xb3,0x73
0001bc  b17170b0          DCB      0xb1,0x71,0x70,0xb0
0001c0  50909151          DCB      0x50,0x90,0x91,0x51
0001c4  93535292          DCB      0x93,0x53,0x52,0x92
0001c8  96565797          DCB      0x96,0x56,0x57,0x97
0001cc  55959454          DCB      0x55,0x95,0x94,0x54
0001d0  9c5c5d9d          DCB      0x9c,0x5c,0x5d,0x9d
0001d4  5f9f9e5e          DCB      0x5f,0x9f,0x9e,0x5e
0001d8  5a9a9b5b          DCB      0x5a,0x9a,0x9b,0x5b
0001dc  99595898          DCB      0x99,0x59,0x58,0x98
0001e0  88484989          DCB      0x88,0x48,0x49,0x89
0001e4  4b8b8a4a          DCB      0x4b,0x8b,0x8a,0x4a
0001e8  4e8e8f4f          DCB      0x4e,0x8e,0x8f,0x4f
0001ec  8d4d4c8c          DCB      0x8d,0x4d,0x4c,0x8c
0001f0  44848545          DCB      0x44,0x84,0x85,0x45
0001f4  87474686          DCB      0x87,0x47,0x46,0x86
0001f8  82424383          DCB      0x82,0x42,0x43,0x83
0001fc  41818040          DCB      0x41,0x81,0x80,0x40
000200  04040102          DCB      0x04,0x04,0x01,0x02
000204  02010101          DCB      0x02,0x01,0x01,0x01
000208  04040102          DCB      0x04,0x04,0x01,0x02
00020c  02010100          DCB      0x02,0x01,0x01,0x00

                          AREA ||.data||, DATA, ALIGN=2

                  xHandleTaskUserIF
                          DCD      0x00000000
                  xHandleCheckNet
                          DCD      0x00000000
                  xHandleTaskWEB
                          DCD      0x00000000
                  xHandleTaskMsgPro
                          DCD      0x00000000
                  xHandleTaskStart
                          DCD      0x00000000
                  xSemaphore
                          DCD      0x00000000
                  xMutex
                          DCD      0x00000000
                  xPingTimers
                          DCD      0x00000000
                  xNoNetTimers
                          DCD      0x00000000
                  xCreatedEventGroup
                          DCD      0x00000000
                  xUpdataEventGroup
                          DCD      0x00000000
                  xQueue1
                          DCD      0x00000000
                  gWIZNETINFO
000030  0008dc06          DCB      0x00,0x08,0xdc,0x06
000034  abcdc0a8          DCB      0xab,0xcd,0xc0,0xa8
000038  00c6ffff          DCB      0x00,0xc6,0xff,0xff
00003c  ff00c0a8          DCB      0xff,0x00,0xc0,0xa8
000040  00017272          DCB      0x00,0x01,0x72,0x72
000044  727201            DCB      0x72,0x72,0x01
                  domain_name
000047  77                DCB      0x77
000048  77772e62          DCB      0x77,0x77,0x2e,0x62
00004c  61696475          DCB      0x61,0x69,0x64,0x75
000050  2e636f6d          DCB      0x2e,0x63,0x6f,0x6d
000054  0000              DCB      0x00,0x00
                  numport
000056  03e8              DCW      0x03e8

;*** Start embedded assembler ***

#line 1 "..\\..\\User\\transport.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___11_transport_c_a51d0a3b____REV16|
#line 114 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___11_transport_c_a51d0a3b____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___11_transport_c_a51d0a3b____REVSH|
#line 128
|__asm___11_transport_c_a51d0a3b____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
