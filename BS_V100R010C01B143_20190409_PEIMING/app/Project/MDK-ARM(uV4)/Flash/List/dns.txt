; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\flash\obj\dns.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\dns.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931,870 -I..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\User\bsp -I..\..\User\bsp\inc -I..\..\User -I..\..\Libraries\CMSIS\Include -I..\..\FreeRTOS\include -I..\..\FreeRTOS\portable\RVDS\ARM_CM3 -I..\..\MQTT -I..\..\Ethernet -I..\..\Ethernet\W5500 -I..\..\Internet\DHCP -I..\..\Internet\DNS -I..\..\User\app\src -I..\..\User\app\inc -I..\..\Internet\NTP -I..\..\Internet\HTTP -I.\RTE\_Flash -ID:\MDK5\ARM\CMSIS\5.0.1\CMSIS\Include -ID:\MDK5\Keil\STM32F1xx_DFP\2.0.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=523 -D_RTE_ -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=.\flash\obj\dns.crf ..\..\Internet\DNS\dns.c]
                          THUMB

                          AREA ||i.DNS_init||, CODE, READONLY, ALIGN=2

                  DNS_init PROC
;;;493    /* DNS CLIENT INIT */
;;;494    void DNS_init(uint8_t s, uint8_t * buf)
000000  4a04              LDR      r2,|L1.20|
;;;495    {
;;;496    	DNS_SOCKET = s; // SOCK_DNS
000002  7010              STRB     r0,[r2,#0]
;;;497    	pDNSMSG = buf; // User's shared buffer
000004  4a04              LDR      r2,|L1.24|
000006  6011              STR      r1,[r2,#0]  ; pDNSMSG
;;;498    	DNS_MSGID = DNS_MSG_ID;
000008  f2411222          MOV      r2,#0x1122
00000c  4b03              LDR      r3,|L1.28|
00000e  801a              STRH     r2,[r3,#0]
;;;499    }
000010  4770              BX       lr
;;;500    
                          ENDP

000012  0000              DCW      0x0000
                  |L1.20|
                          DCD      DNS_SOCKET
                  |L1.24|
                          DCD      pDNSMSG
                  |L1.28|
                          DCD      DNS_MSGID

                          AREA ||i.DNS_run||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  DNS_run PROC
;;;501    /* DNS CLIENT RUN */
;;;502    int8_t DNS_run(uint8_t * dns_ip, uint8_t * name, uint8_t * ip_from_dns)
000000  e92d43f0          PUSH     {r4-r9,lr}
;;;503    {
000004  b08b              SUB      sp,sp,#0x2c
000006  4604              MOV      r4,r0
000008  460f              MOV      r7,r1
00000a  4690              MOV      r8,r2
;;;504    	int8_t ret;
;;;505    	struct dhdr dhp;
;;;506    	uint8_t ip[4];
;;;507    	uint16_t len, port;
;;;508    	int8_t ret_check_timeout;
;;;509       
;;;510       // Socket open
;;;511       socket(DNS_SOCKET, Sn_MR_UDP, 0, 0);
00000c  2300              MOVS     r3,#0
00000e  461a              MOV      r2,r3
000010  2102              MOVS     r1,#2
000012  483a              LDR      r0,|L2.252|
000014  7800              LDRB     r0,[r0,#0]  ; DNS_SOCKET
000016  f7fffffe          BL       socket
;;;512    
;;;513    #ifdef _DNS_DEBUG_
;;;514    	printf("> DNS Query to DNS Server : %d.%d.%d.%d\r\n", dns_ip[0], dns_ip[1], dns_ip[2], dns_ip[3]);
00001a  78e0              LDRB     r0,[r4,#3]
00001c  9000              STR      r0,[sp,#0]
00001e  78a3              LDRB     r3,[r4,#2]
000020  7862              LDRB     r2,[r4,#1]
000022  7821              LDRB     r1,[r4,#0]
000024  a036              ADR      r0,|L2.256|
000026  f7fffffe          BL       __2printf
;;;515    #endif
;;;516       
;;;517    	len = dns_makequery(0, (char *)name, pDNSMSG, MAX_DNS_BUF_SIZE);
00002a  f44f7380          MOV      r3,#0x100
00002e  483f              LDR      r0,|L2.300|
000030  4639              MOV      r1,r7
000032  6802              LDR      r2,[r0,#0]  ; pDNSMSG
000034  2000              MOVS     r0,#0
000036  f7fffffe          BL       dns_makequery
00003a  b286              UXTH     r6,r0
;;;518    	sendto(DNS_SOCKET, pDNSMSG, len, dns_ip, IPPORT_DOMAIN);
00003c  2035              MOVS     r0,#0x35
00003e  4623              MOV      r3,r4
000040  4632              MOV      r2,r6
000042  9000              STR      r0,[sp,#0]
000044  4839              LDR      r0,|L2.300|
000046  6801              LDR      r1,[r0,#0]  ; pDNSMSG
000048  482c              LDR      r0,|L2.252|
00004a  7800              LDRB     r0,[r0,#0]  ; DNS_SOCKET
00004c  f7fffffe          BL       sendto
;;;519    
;;;520    	while (1)
000050  e04b              B        |L2.234|
                  |L2.82|
;;;521    	{
;;;522    		if ((len = getSn_RX_RSR(DNS_SOCKET)) > 0)
000052  482a              LDR      r0,|L2.252|
000054  7800              LDRB     r0,[r0,#0]  ; DNS_SOCKET
000056  f7fffffe          BL       getSn_RX_RSR
00005a  1e06              SUBS     r6,r0,#0
00005c  dd26              BLE      |L2.172|
;;;523    		{
;;;524    			if (len > MAX_DNS_BUF_SIZE) len = MAX_DNS_BUF_SIZE;
00005e  f5b67f80          CMP      r6,#0x100
000062  dd01              BLE      |L2.104|
000064  f44f7680          MOV      r6,#0x100
                  |L2.104|
;;;525    			len = recvfrom(DNS_SOCKET, pDNSMSG, len, ip, &port);
000068  a804              ADD      r0,sp,#0x10
00006a  ab05              ADD      r3,sp,#0x14
00006c  4632              MOV      r2,r6
00006e  9000              STR      r0,[sp,#0]
000070  482e              LDR      r0,|L2.300|
000072  6801              LDR      r1,[r0,#0]  ; pDNSMSG
000074  4821              LDR      r0,|L2.252|
000076  7800              LDRB     r0,[r0,#0]  ; DNS_SOCKET
000078  f7fffffe          BL       recvfrom
00007c  b286              UXTH     r6,r0
;;;526          #ifdef _DNS_DEBUG_
;;;527    	      printf("> Receive DNS message from %d.%d.%d.%d(%d). len = %d\r\n", ip[0], ip[1], ip[2], ip[3],port,len);
00007e  f8bd1010          LDRH     r1,[sp,#0x10]
000082  f89d0017          LDRB     r0,[sp,#0x17]
000086  e88d0043          STM      sp,{r0,r1,r6}
00008a  f89d3016          LDRB     r3,[sp,#0x16]
00008e  f89d2015          LDRB     r2,[sp,#0x15]
000092  f89d1014          LDRB     r1,[sp,#0x14]
000096  a026              ADR      r0,|L2.304|
000098  f7fffffe          BL       __2printf
;;;528          #endif
;;;529             ret = parseDNSMSG(&dhp, pDNSMSG, ip_from_dns);
00009c  4642              MOV      r2,r8
00009e  4823              LDR      r0,|L2.300|
0000a0  6801              LDR      r1,[r0,#0]  ; pDNSMSG
0000a2  a806              ADD      r0,sp,#0x18
0000a4  f7fffffe          BL       parseDNSMSG
0000a8  4681              MOV      r9,r0
;;;530    			break;
0000aa  e01f              B        |L2.236|
                  |L2.172|
;;;531    		}
;;;532    		// Check Timeout
;;;533    		ret_check_timeout = check_DNS_timeout();
0000ac  f7fffffe          BL       check_DNS_timeout
0000b0  4605              MOV      r5,r0
;;;534    		if (ret_check_timeout < 0) {
0000b2  2d00              CMP      r5,#0
0000b4  da0b              BGE      |L2.206|
;;;535    
;;;536    #ifdef _DNS_DEBUG_
;;;537    			printf("> DNS Server is not responding : %d.%d.%d.%d\r\n", dns_ip[0], dns_ip[1], dns_ip[2], dns_ip[3]);
0000b6  78e0              LDRB     r0,[r4,#3]
0000b8  9000              STR      r0,[sp,#0]
0000ba  78a3              LDRB     r3,[r4,#2]
0000bc  7862              LDRB     r2,[r4,#1]
0000be  7821              LDRB     r1,[r4,#0]
0000c0  a029              ADR      r0,|L2.360|
0000c2  f7fffffe          BL       __2printf
;;;538    #endif
;;;539    			return 0; // timeout occurred
0000c6  2000              MOVS     r0,#0
                  |L2.200|
;;;540    		}
;;;541    		else if (ret_check_timeout == 0) {
;;;542    
;;;543    #ifdef _DNS_DEBUG_
;;;544    			printf("> DNS Timeout\r\n");
;;;545    #endif
;;;546    			sendto(DNS_SOCKET, pDNSMSG, len, dns_ip, IPPORT_DOMAIN);
;;;547    		}
;;;548    	}
;;;549    	close(DNS_SOCKET);
;;;550    	// Return value
;;;551    	// 0 > :  failed / 1 - success
;;;552    	return ret;
;;;553    }
0000c8  b00b              ADD      sp,sp,#0x2c
0000ca  e8bd83f0          POP      {r4-r9,pc}
                  |L2.206|
0000ce  b965              CBNZ     r5,|L2.234|
0000d0  a031              ADR      r0,|L2.408|
0000d2  f7fffffe          BL       __2printf
0000d6  2035              MOVS     r0,#0x35              ;546
0000d8  4623              MOV      r3,r4                 ;546
0000da  4632              MOV      r2,r6                 ;546
0000dc  9000              STR      r0,[sp,#0]            ;546
0000de  4813              LDR      r0,|L2.300|
0000e0  6801              LDR      r1,[r0,#0]            ;546  ; pDNSMSG
0000e2  4806              LDR      r0,|L2.252|
0000e4  7800              LDRB     r0,[r0,#0]            ;546  ; DNS_SOCKET
0000e6  f7fffffe          BL       sendto
                  |L2.234|
0000ea  e7b2              B        |L2.82|
                  |L2.236|
0000ec  bf00              NOP                            ;530
0000ee  4803              LDR      r0,|L2.252|
0000f0  7800              LDRB     r0,[r0,#0]            ;549  ; DNS_SOCKET
0000f2  f7fffffe          BL       close
0000f6  4648              MOV      r0,r9                 ;552
0000f8  e7e6              B        |L2.200|
;;;554    
                          ENDP

0000fa  0000              DCW      0x0000
                  |L2.252|
                          DCD      DNS_SOCKET
                  |L2.256|
000100  3e20444e          DCB      "> DNS Query to DNS Server : %d.%d.%d.%d\r\n",0
000104  53205175
000108  65727920
00010c  746f2044
000110  4e532053
000114  65727665
000118  72203a20
00011c  25642e25
000120  642e2564
000124  2e25640d
000128  0a00    
00012a  00                DCB      0
00012b  00                DCB      0
                  |L2.300|
                          DCD      pDNSMSG
                  |L2.304|
000130  3e205265          DCB      "> Receive DNS message from %d.%d.%d.%d(%d). len = %d\r\n"
000134  63656976
000138  6520444e
00013c  53206d65
000140  73736167
000144  65206672
000148  6f6d2025
00014c  642e2564
000150  2e25642e
000154  25642825
000158  64292e20
00015c  6c656e20
000160  3d202564
000164  0d0a    
000166  00                DCB      0
000167  00                DCB      0
                  |L2.360|
000168  3e20444e          DCB      "> DNS Server is not responding : %d.%d.%d.%d\r\n",0
00016c  53205365
000170  72766572
000174  20697320
000178  6e6f7420
00017c  72657370
000180  6f6e6469
000184  6e67203a
000188  2025642e
00018c  25642e25
000190  642e2564
000194  0d0a00  
000197  00                DCB      0
                  |L2.408|
000198  3e20444e          DCB      "> DNS Timeout\r\n",0
00019c  53205469
0001a0  6d656f75
0001a4  740d0a00

                          AREA ||i.DNS_time_handler||, CODE, READONLY, ALIGN=2

                  DNS_time_handler PROC
;;;556    /* DNS TIMER HANDLER */
;;;557    void DNS_time_handler(void)
000000  4802              LDR      r0,|L3.12|
;;;558    {
;;;559    	dns_1s_tick++;
000002  6800              LDR      r0,[r0,#0]  ; dns_1s_tick
000004  1c40              ADDS     r0,r0,#1
000006  4901              LDR      r1,|L3.12|
000008  6008              STR      r0,[r1,#0]  ; dns_1s_tick
;;;560    }
00000a  4770              BX       lr
;;;561    
                          ENDP

                  |L3.12|
                          DCD      dns_1s_tick

                          AREA ||i.check_DNS_timeout||, CODE, READONLY, ALIGN=2

                  check_DNS_timeout PROC
;;;472    
;;;473    int8_t check_DNS_timeout(void)
000000  480c              LDR      r0,|L4.52|
;;;474    {
;;;475    	static uint8_t retry_count;
;;;476    
;;;477    	if(dns_1s_tick >= DNS_WAIT_TIME)
000002  6800              LDR      r0,[r0,#0]  ; dns_1s_tick
000004  2803              CMP      r0,#3
000006  d312              BCC      |L4.46|
;;;478    	{
;;;479    		dns_1s_tick = 0;
000008  2000              MOVS     r0,#0
00000a  490a              LDR      r1,|L4.52|
00000c  6008              STR      r0,[r1,#0]  ; dns_1s_tick
;;;480    		if(retry_count >= MAX_DNS_RETRY) {
00000e  480a              LDR      r0,|L4.56|
000010  7800              LDRB     r0,[r0,#0]  ; retry_count
000012  2802              CMP      r0,#2
000014  db04              BLT      |L4.32|
;;;481    			retry_count = 0;
000016  2000              MOVS     r0,#0
000018  4907              LDR      r1,|L4.56|
00001a  7008              STRB     r0,[r1,#0]
;;;482    			return -1; // timeout occurred
00001c  1e40              SUBS     r0,r0,#1
                  |L4.30|
;;;483    		}
;;;484    		retry_count++;
;;;485    		return 0; // timer over, but no timeout
;;;486    	}
;;;487    
;;;488    	return 1; // no timer over, no timeout occur
;;;489    }
00001e  4770              BX       lr
                  |L4.32|
000020  4805              LDR      r0,|L4.56|
000022  7800              LDRB     r0,[r0,#0]            ;484  ; retry_count
000024  1c40              ADDS     r0,r0,#1              ;484
000026  4904              LDR      r1,|L4.56|
000028  7008              STRB     r0,[r1,#0]            ;484
00002a  2000              MOVS     r0,#0                 ;485
00002c  e7f7              B        |L4.30|
                  |L4.46|
00002e  2001              MOVS     r0,#1                 ;488
000030  e7f5              B        |L4.30|
;;;490    
                          ENDP

000032  0000              DCW      0x0000
                  |L4.52|
                          DCD      dns_1s_tick
                  |L4.56|
                          DCD      retry_count

                          AREA ||i.dns_answer||, CODE, READONLY, ALIGN=1

                  dns_answer PROC
;;;238     */
;;;239    uint8_t * dns_answer(uint8_t * msg, uint8_t * cp, uint8_t * ip_from_dns)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;240    {
000004  b08c              SUB      sp,sp,#0x30
000006  4680              MOV      r8,r0
000008  460c              MOV      r4,r1
00000a  4616              MOV      r6,r2
;;;241    	int len, type;
;;;242    	char name[MAXCNAME];
;;;243    
;;;244    	len = parse_name(msg, cp, name, MAXCNAME);
00000c  2330              MOVS     r3,#0x30
00000e  466a              MOV      r2,sp
000010  4621              MOV      r1,r4
000012  4640              MOV      r0,r8
000014  f7fffffe          BL       parse_name
000018  4605              MOV      r5,r0
;;;245    
;;;246    	if (len == -1) return 0;
00001a  1c68              ADDS     r0,r5,#1
00001c  b918              CBNZ     r0,|L5.38|
00001e  2000              MOVS     r0,#0
                  |L5.32|
;;;247    
;;;248    	cp += len;
;;;249    	type = get16(cp);
;;;250    	cp += 2;		/* type */
;;;251    	cp += 2;		/* class */
;;;252    	cp += 4;		/* ttl */
;;;253    	cp += 2;		/* len */
;;;254    
;;;255    
;;;256    	switch (type)
;;;257    	{
;;;258    	case TYPE_A:
;;;259    		/* Just read the address directly into the structure */
;;;260    		ip_from_dns[0] = *cp++;
;;;261    		ip_from_dns[1] = *cp++;
;;;262    		ip_from_dns[2] = *cp++;
;;;263    		ip_from_dns[3] = *cp++;
;;;264    		break;
;;;265    	case TYPE_CNAME:
;;;266    	case TYPE_MB:
;;;267    	case TYPE_MG:
;;;268    	case TYPE_MR:
;;;269    	case TYPE_NS:
;;;270    	case TYPE_PTR:
;;;271    		/* These types all consist of a single domain name */
;;;272    		/* convert it to ascii format */
;;;273    		len = parse_name(msg, cp, name, MAXCNAME);
;;;274    		if (len == -1) return 0;
;;;275    
;;;276    		cp += len;
;;;277    		break;
;;;278    	case TYPE_HINFO:
;;;279    		len = *cp++;
;;;280    		cp += len;
;;;281    
;;;282    		len = *cp++;
;;;283    		cp += len;
;;;284    		break;
;;;285    	case TYPE_MX:
;;;286    		cp += 2;
;;;287    		/* Get domain name of exchanger */
;;;288    		len = parse_name(msg, cp, name, MAXCNAME);
;;;289    		if (len == -1) return 0;
;;;290    
;;;291    		cp += len;
;;;292    		break;
;;;293    	case TYPE_SOA:
;;;294    		/* Get domain name of name server */
;;;295    		len = parse_name(msg, cp, name, MAXCNAME);
;;;296    		if (len == -1) return 0;
;;;297    
;;;298    		cp += len;
;;;299    
;;;300    		/* Get domain name of responsible person */
;;;301    		len = parse_name(msg, cp, name, MAXCNAME);
;;;302    		if (len == -1) return 0;
;;;303    
;;;304    		cp += len;
;;;305    
;;;306    		cp += 4;
;;;307    		cp += 4;
;;;308    		cp += 4;
;;;309    		cp += 4;
;;;310    		cp += 4;
;;;311    		break;
;;;312    	case TYPE_TXT:
;;;313    		/* Just stash */
;;;314    		break;
;;;315    	default:
;;;316    		/* Ignore */
;;;317    		break;
;;;318    	}
;;;319    
;;;320    	return cp;
;;;321    }
000020  b00c              ADD      sp,sp,#0x30
000022  e8bd81f0          POP      {r4-r8,pc}
                  |L5.38|
000026  442c              ADD      r4,r4,r5              ;248
000028  4620              MOV      r0,r4                 ;249
00002a  f7fffffe          BL       get16
00002e  4607              MOV      r7,r0                 ;249
000030  1ca4              ADDS     r4,r4,#2              ;250
000032  1ca4              ADDS     r4,r4,#2              ;251
000034  1d24              ADDS     r4,r4,#4              ;252
000036  1ca4              ADDS     r4,r4,#2              ;253
000038  2f11              CMP      r7,#0x11              ;256
00003a  d25d              BCS      |L5.248|
00003c  e8dff007          TBB      [pc,r7]               ;256
000040  5c091a5c          DCB      0x5c,0x09,0x1a,0x5c
000044  5c163d17          DCB      0x5c,0x16,0x3d,0x17
000048  18195c5c          DCB      0x18,0x19,0x5c,0x5c
00004c  1b285c2f          DCB      0x1b,0x28,0x5c,0x2f
000050  5b00              DCB      0x5b,0x00
000052  f8140b01          LDRB     r0,[r4],#1            ;260
000056  7030              STRB     r0,[r6,#0]            ;260
000058  f8140b01          LDRB     r0,[r4],#1            ;261
00005c  7070              STRB     r0,[r6,#1]            ;261
00005e  f8140b01          LDRB     r0,[r4],#1            ;262
000062  70b0              STRB     r0,[r6,#2]            ;262
000064  f8140b01          LDRB     r0,[r4],#1            ;263
000068  70f0              STRB     r0,[r6,#3]            ;263
00006a  e046              B        |L5.250|
00006c  bf00              NOP                            ;266
00006e  bf00              NOP                            ;267
000070  bf00              NOP                            ;268
000072  bf00              NOP                            ;269
000074  bf00              NOP                            ;270
000076  2330              MOVS     r3,#0x30              ;273
000078  466a              MOV      r2,sp                 ;273
00007a  4621              MOV      r1,r4                 ;273
00007c  4640              MOV      r0,r8                 ;273
00007e  f7fffffe          BL       parse_name
000082  4605              MOV      r5,r0                 ;273
000084  1c68              ADDS     r0,r5,#1              ;274
000086  b908              CBNZ     r0,|L5.140|
000088  2000              MOVS     r0,#0                 ;274
00008a  e7c9              B        |L5.32|
                  |L5.140|
00008c  442c              ADD      r4,r4,r5              ;276
00008e  e034              B        |L5.250|
000090  f8145b01          LDRB     r5,[r4],#1            ;279
000094  442c              ADD      r4,r4,r5              ;280
000096  f8145b01          LDRB     r5,[r4],#1            ;282
00009a  442c              ADD      r4,r4,r5              ;283
00009c  e02d              B        |L5.250|
00009e  1ca4              ADDS     r4,r4,#2              ;286
0000a0  2330              MOVS     r3,#0x30              ;288
0000a2  466a              MOV      r2,sp                 ;288
0000a4  4621              MOV      r1,r4                 ;288
0000a6  4640              MOV      r0,r8                 ;288
0000a8  f7fffffe          BL       parse_name
0000ac  4605              MOV      r5,r0                 ;288
0000ae  1c68              ADDS     r0,r5,#1              ;289
0000b0  b908              CBNZ     r0,|L5.182|
0000b2  2000              MOVS     r0,#0                 ;289
0000b4  e7b4              B        |L5.32|
                  |L5.182|
0000b6  442c              ADD      r4,r4,r5              ;291
0000b8  e01f              B        |L5.250|
0000ba  2330              MOVS     r3,#0x30              ;295
0000bc  466a              MOV      r2,sp                 ;295
0000be  4621              MOV      r1,r4                 ;295
0000c0  4640              MOV      r0,r8                 ;295
0000c2  f7fffffe          BL       parse_name
0000c6  4605              MOV      r5,r0                 ;295
0000c8  1c68              ADDS     r0,r5,#1              ;296
0000ca  b908              CBNZ     r0,|L5.208|
0000cc  2000              MOVS     r0,#0                 ;296
0000ce  e7a7              B        |L5.32|
                  |L5.208|
0000d0  442c              ADD      r4,r4,r5              ;298
0000d2  2330              MOVS     r3,#0x30              ;301
0000d4  466a              MOV      r2,sp                 ;301
0000d6  4621              MOV      r1,r4                 ;301
0000d8  4640              MOV      r0,r8                 ;301
0000da  f7fffffe          BL       parse_name
0000de  4605              MOV      r5,r0                 ;301
0000e0  1c68              ADDS     r0,r5,#1              ;302
0000e2  b908              CBNZ     r0,|L5.232|
0000e4  2000              MOVS     r0,#0                 ;302
0000e6  e79b              B        |L5.32|
                  |L5.232|
0000e8  442c              ADD      r4,r4,r5              ;304
0000ea  1d24              ADDS     r4,r4,#4              ;306
0000ec  1d24              ADDS     r4,r4,#4              ;307
0000ee  1d24              ADDS     r4,r4,#4              ;308
0000f0  1d24              ADDS     r4,r4,#4              ;309
0000f2  1d24              ADDS     r4,r4,#4              ;310
0000f4  e001              B        |L5.250|
0000f6  e000              B        |L5.250|
                  |L5.248|
0000f8  bf00              NOP                            ;317
                  |L5.250|
0000fa  bf00              NOP                            ;264
0000fc  4620              MOV      r0,r4                 ;320
0000fe  e78f              B        |L5.32|
;;;322    
                          ENDP


                          AREA ||i.dns_makequery||, CODE, READONLY, ALIGN=2

                  dns_makequery PROC
;;;411     */
;;;412    int16_t dns_makequery(uint16_t op, char * name, uint8_t * buf, uint16_t len)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;413    {
000004  b08d              SUB      sp,sp,#0x34
000006  4681              MOV      r9,r0
000008  468b              MOV      r11,r1
00000a  4690              MOV      r8,r2
00000c  461c              MOV      r4,r3
;;;414    	uint8_t *cp;
;;;415    	char *cp1;
;;;416    	char sname[MAXCNAME];
;;;417    	char *dname;
;;;418    	uint16_t p;
;;;419    	uint16_t dlen;
;;;420    
;;;421    	cp = buf;
00000e  4645              MOV      r5,r8
;;;422    
;;;423    	DNS_MSGID++;
000010  4832              LDR      r0,|L6.220|
000012  8800              LDRH     r0,[r0,#0]  ; DNS_MSGID
000014  1c40              ADDS     r0,r0,#1
000016  4931              LDR      r1,|L6.220|
000018  8008              STRH     r0,[r1,#0]
;;;424    	cp = put16(cp, DNS_MSGID);
00001a  4608              MOV      r0,r1
00001c  8801              LDRH     r1,[r0,#0]  ; DNS_MSGID
00001e  4628              MOV      r0,r5
000020  f7fffffe          BL       put16
000024  4605              MOV      r5,r0
;;;425    	p = (op << 11) | 0x0100;			/* Recursion desired */
000026  f44f7080          MOV      r0,#0x100
00002a  ea4020c9          ORR      r0,r0,r9,LSL #11
00002e  b280              UXTH     r0,r0
000030  9000              STR      r0,[sp,#0]
;;;426    	cp = put16(cp, p);
000032  4628              MOV      r0,r5
000034  9900              LDR      r1,[sp,#0]
000036  f7fffffe          BL       put16
00003a  4605              MOV      r5,r0
;;;427    	cp = put16(cp, 1);
00003c  2101              MOVS     r1,#1
00003e  4628              MOV      r0,r5
000040  f7fffffe          BL       put16
000044  4605              MOV      r5,r0
;;;428    	cp = put16(cp, 0);
000046  2100              MOVS     r1,#0
000048  4628              MOV      r0,r5
00004a  f7fffffe          BL       put16
00004e  4605              MOV      r5,r0
;;;429    	cp = put16(cp, 0);
000050  2100              MOVS     r1,#0
000052  4628              MOV      r0,r5
000054  f7fffffe          BL       put16
000058  4605              MOV      r5,r0
;;;430    	cp = put16(cp, 0);
00005a  2100              MOVS     r1,#0
00005c  4628              MOV      r0,r5
00005e  f7fffffe          BL       put16
000062  4605              MOV      r5,r0
;;;431    
;;;432    	strcpy(sname, name);
000064  4659              MOV      r1,r11
000066  a801              ADD      r0,sp,#4
000068  f7fffffe          BL       strcpy
;;;433    	dname = sname;
00006c  af01              ADD      r7,sp,#4
;;;434    	dlen = strlen(dname);
00006e  4638              MOV      r0,r7
000070  f7fffffe          BL       strlen
000074  fa1ffa80          UXTH     r10,r0
;;;435    	for (;;)
000078  bf00              NOP      
                  |L6.122|
;;;436    	{
;;;437    		/* Look for next dot */
;;;438    		cp1 = strchr(dname, '.');
00007a  212e              MOVS     r1,#0x2e
00007c  4638              MOV      r0,r7
00007e  f7fffffe          BL       strchr
000082  4606              MOV      r6,r0
;;;439    
;;;440    		if (cp1 != NULL) len = cp1 - dname;	/* More to come */
000084  b116              CBZ      r6,|L6.140|
000086  1bf0              SUBS     r0,r6,r7
000088  b284              UXTH     r4,r0
00008a  e000              B        |L6.142|
                  |L6.140|
;;;441    		else len = dlen;			/* Last component */
00008c  4654              MOV      r4,r10
                  |L6.142|
;;;442    
;;;443    		*cp++ = len;				/* Write length of component */
00008e  f8054b01          STRB     r4,[r5],#1
;;;444    		if (len == 0) break;
000092  b904              CBNZ     r4,|L6.150|
000094  e011              B        |L6.186|
                  |L6.150|
;;;445    
;;;446    		/* Copy component up to (but not including) dot */
;;;447    		strncpy((char *)cp, dname, len);
000096  4622              MOV      r2,r4
000098  4639              MOV      r1,r7
00009a  4628              MOV      r0,r5
00009c  f7fffffe          BL       strncpy
;;;448    		cp += len;
0000a0  4425              ADD      r5,r5,r4
;;;449    		if (cp1 == NULL)
0000a2  b91e              CBNZ     r6,|L6.172|
;;;450    		{
;;;451    			*cp++ = 0;			/* Last one; write null and finish */
0000a4  2000              MOVS     r0,#0
0000a6  f8050b01          STRB     r0,[r5],#1
;;;452    			break;
0000aa  e006              B        |L6.186|
                  |L6.172|
;;;453    		}
;;;454    		dname += len+1;
0000ac  1c60              ADDS     r0,r4,#1
0000ae  4407              ADD      r7,r7,r0
;;;455    		dlen -= len+1;
0000b0  ebaa0000          SUB      r0,r10,r0
0000b4  fa1ffa80          UXTH     r10,r0
0000b8  e7df              B        |L6.122|
                  |L6.186|
0000ba  bf00              NOP                            ;444
;;;456    	}
;;;457    
;;;458    	cp = put16(cp, 0x0001);				/* type */
0000bc  2101              MOVS     r1,#1
0000be  4628              MOV      r0,r5
0000c0  f7fffffe          BL       put16
0000c4  4605              MOV      r5,r0
;;;459    	cp = put16(cp, 0x0001);				/* class */
0000c6  2101              MOVS     r1,#1
0000c8  4628              MOV      r0,r5
0000ca  f7fffffe          BL       put16
0000ce  4605              MOV      r5,r0
;;;460    
;;;461    	return ((int16_t)((uint32_t)(cp) - (uint32_t)(buf)));
0000d0  eba50008          SUB      r0,r5,r8
0000d4  b200              SXTH     r0,r0
;;;462    }
0000d6  b00d              ADD      sp,sp,#0x34
0000d8  e8bd8ff0          POP      {r4-r11,pc}
;;;463    
                          ENDP

                  |L6.220|
                          DCD      DNS_MSGID

                          AREA ||i.dns_question||, CODE, READONLY, ALIGN=1

                  dns_question PROC
;;;212     */
;;;213    uint8_t * dns_question(uint8_t * msg, uint8_t * cp)
000000  b570              PUSH     {r4-r6,lr}
;;;214    {
000002  b08c              SUB      sp,sp,#0x30
000004  4606              MOV      r6,r0
000006  460c              MOV      r4,r1
;;;215    	int len;
;;;216    	char name[MAXCNAME];
;;;217    
;;;218    	len = parse_name(msg, cp, name, MAXCNAME);
000008  2330              MOVS     r3,#0x30
00000a  466a              MOV      r2,sp
00000c  4621              MOV      r1,r4
00000e  4630              MOV      r0,r6
000010  f7fffffe          BL       parse_name
000014  4605              MOV      r5,r0
;;;219    
;;;220    
;;;221    	if (len == -1) return 0;
000016  1c68              ADDS     r0,r5,#1
000018  b910              CBNZ     r0,|L7.32|
00001a  2000              MOVS     r0,#0
                  |L7.28|
;;;222    
;;;223    	cp += len;
;;;224    	cp += 2;		/* type */
;;;225    	cp += 2;		/* class */
;;;226    
;;;227    	return cp;
;;;228    }
00001c  b00c              ADD      sp,sp,#0x30
00001e  bd70              POP      {r4-r6,pc}
                  |L7.32|
000020  442c              ADD      r4,r4,r5              ;223
000022  1ca4              ADDS     r4,r4,#2              ;224
000024  1ca4              ADDS     r4,r4,#2              ;225
000026  4620              MOV      r0,r4                 ;227
000028  e7f8              B        |L7.28|
;;;229    
                          ENDP


                          AREA ||i.get16||, CODE, READONLY, ALIGN=1

                  get16 PROC
;;;124    /* converts uint16_t from network buffer to a host byte order integer. */
;;;125    uint16_t get16(uint8_t * s)
000000  4601              MOV      r1,r0
;;;126    {
;;;127    	uint16_t i;
;;;128    	i = *s++ << 8;
000002  f8113b01          LDRB     r3,[r1],#1
000006  0218              LSLS     r0,r3,#8
;;;129    	i = i + *s;
000008  780a              LDRB     r2,[r1,#0]
00000a  4402              ADD      r2,r2,r0
00000c  b290              UXTH     r0,r2
;;;130    	return i;
;;;131    }
00000e  4770              BX       lr
;;;132    
                          ENDP


                          AREA ||i.parseDNSMSG||, CODE, READONLY, ALIGN=1

                  parseDNSMSG PROC
;;;333     */
;;;334    int8_t parseDNSMSG(struct dhdr * pdhdr, uint8_t * pbuf, uint8_t * ip_from_dns)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;335    {
000004  4604              MOV      r4,r0
000006  4689              MOV      r9,r1
000008  4692              MOV      r10,r2
;;;336    	uint16_t tmp;
;;;337    	uint16_t i;
;;;338    	uint8_t * msg;
;;;339    	uint8_t * cp;
;;;340    
;;;341    	msg = pbuf;
00000a  464f              MOV      r7,r9
;;;342    	memset(pdhdr, 0, sizeof(pdhdr));
00000c  2000              MOVS     r0,#0
00000e  6020              STR      r0,[r4,#0]
;;;343    
;;;344    	pdhdr->id = get16(&msg[0]);
000010  4638              MOV      r0,r7
000012  f7fffffe          BL       get16
000016  8020              STRH     r0,[r4,#0]
;;;345    	tmp = get16(&msg[2]);
000018  1cb8              ADDS     r0,r7,#2
00001a  f7fffffe          BL       get16
00001e  4606              MOV      r6,r0
;;;346    	if (tmp & 0x8000) pdhdr->qr = 1;
000020  f4064000          AND      r0,r6,#0x8000
000024  b108              CBZ      r0,|L9.42|
000026  2001              MOVS     r0,#1
000028  70a0              STRB     r0,[r4,#2]
                  |L9.42|
;;;347    
;;;348    	pdhdr->opcode = (tmp >> 11) & 0xf;
00002a  f3c620c3          UBFX     r0,r6,#11,#4
00002e  70e0              STRB     r0,[r4,#3]
;;;349    
;;;350    	if (tmp & 0x0400) pdhdr->aa = 1;
000030  f4066080          AND      r0,r6,#0x400
000034  b108              CBZ      r0,|L9.58|
000036  2001              MOVS     r0,#1
000038  7120              STRB     r0,[r4,#4]
                  |L9.58|
;;;351    	if (tmp & 0x0200) pdhdr->tc = 1;
00003a  f4067000          AND      r0,r6,#0x200
00003e  b108              CBZ      r0,|L9.68|
000040  2001              MOVS     r0,#1
000042  7160              STRB     r0,[r4,#5]
                  |L9.68|
;;;352    	if (tmp & 0x0100) pdhdr->rd = 1;
000044  f4067080          AND      r0,r6,#0x100
000048  b108              CBZ      r0,|L9.78|
00004a  2001              MOVS     r0,#1
00004c  71a0              STRB     r0,[r4,#6]
                  |L9.78|
;;;353    	if (tmp & 0x0080) pdhdr->ra = 1;
00004e  f0060080          AND      r0,r6,#0x80
000052  b108              CBZ      r0,|L9.88|
000054  2001              MOVS     r0,#1
000056  71e0              STRB     r0,[r4,#7]
                  |L9.88|
;;;354    
;;;355    	pdhdr->rcode = tmp & 0xf;
000058  f006000f          AND      r0,r6,#0xf
00005c  7220              STRB     r0,[r4,#8]
;;;356    	pdhdr->qdcount = get16(&msg[4]);
00005e  1d38              ADDS     r0,r7,#4
000060  f7fffffe          BL       get16
000064  8160              STRH     r0,[r4,#0xa]
;;;357    	pdhdr->ancount = get16(&msg[6]);
000066  1db8              ADDS     r0,r7,#6
000068  f7fffffe          BL       get16
00006c  81a0              STRH     r0,[r4,#0xc]
;;;358    	pdhdr->nscount = get16(&msg[8]);
00006e  f1070008          ADD      r0,r7,#8
000072  f7fffffe          BL       get16
000076  81e0              STRH     r0,[r4,#0xe]
;;;359    	pdhdr->arcount = get16(&msg[10]);
000078  f107000a          ADD      r0,r7,#0xa
00007c  f7fffffe          BL       get16
000080  8220              STRH     r0,[r4,#0x10]
;;;360    
;;;361    
;;;362    	/* Now parse the variable length sections */
;;;363    	cp = &msg[12];
000082  f107080c          ADD      r8,r7,#0xc
;;;364    
;;;365    	/* Question section */
;;;366    	for (i = 0; i < pdhdr->qdcount; i++)
000086  2500              MOVS     r5,#0
000088  e00d              B        |L9.166|
                  |L9.138|
;;;367    	{
;;;368    		cp = dns_question(msg, cp);
00008a  4641              MOV      r1,r8
00008c  4638              MOV      r0,r7
00008e  f7fffffe          BL       dns_question
000092  4680              MOV      r8,r0
;;;369       #ifdef _DNS_DEUBG_
;;;370          printf("MAX_DOMAIN_NAME is too small, it should be redfine in dns.h"
;;;371       #endif
;;;372    		if(!cp) return -1;
000094  f1b80f00          CMP      r8,#0
000098  d103              BNE      |L9.162|
00009a  f04f30ff          MOV      r0,#0xffffffff
                  |L9.158|
;;;373    	}
;;;374    
;;;375    	/* Answer section */
;;;376    	for (i = 0; i < pdhdr->ancount; i++)
;;;377    	{
;;;378    		cp = dns_answer(msg, cp, ip_from_dns);
;;;379       #ifdef _DNS_DEUBG_
;;;380          printf("MAX_DOMAIN_NAME is too small, it should be redfine in dns.h"
;;;381       #endif
;;;382    		if(!cp) return -1;
;;;383    	}
;;;384    
;;;385    	/* Name server (authority) section */
;;;386    	for (i = 0; i < pdhdr->nscount; i++)
;;;387    	{
;;;388    		;
;;;389    	}
;;;390    
;;;391    	/* Additional section */
;;;392    	for (i = 0; i < pdhdr->arcount; i++)
;;;393    	{
;;;394    		;
;;;395    	}
;;;396    
;;;397    	if(pdhdr->rcode == 0) return 1;		// No error
;;;398    	else return 0;
;;;399    }
00009e  e8bd87f0          POP      {r4-r10,pc}
                  |L9.162|
0000a2  1c68              ADDS     r0,r5,#1              ;366
0000a4  b285              UXTH     r5,r0                 ;366
                  |L9.166|
0000a6  8960              LDRH     r0,[r4,#0xa]          ;366
0000a8  42a8              CMP      r0,r5                 ;366
0000aa  dcee              BGT      |L9.138|
0000ac  2500              MOVS     r5,#0                 ;376
0000ae  e00d              B        |L9.204|
                  |L9.176|
0000b0  4652              MOV      r2,r10                ;378
0000b2  4641              MOV      r1,r8                 ;378
0000b4  4638              MOV      r0,r7                 ;378
0000b6  f7fffffe          BL       dns_answer
0000ba  4680              MOV      r8,r0                 ;378
0000bc  f1b80f00          CMP      r8,#0                 ;382
0000c0  d102              BNE      |L9.200|
0000c2  f04f30ff          MOV      r0,#0xffffffff        ;382
0000c6  e7ea              B        |L9.158|
                  |L9.200|
0000c8  1c68              ADDS     r0,r5,#1              ;376
0000ca  b285              UXTH     r5,r0                 ;376
                  |L9.204|
0000cc  89a0              LDRH     r0,[r4,#0xc]          ;376
0000ce  42a8              CMP      r0,r5                 ;376
0000d0  dcee              BGT      |L9.176|
0000d2  2500              MOVS     r5,#0                 ;386
0000d4  e001              B        |L9.218|
                  |L9.214|
0000d6  1c68              ADDS     r0,r5,#1              ;386
0000d8  b285              UXTH     r5,r0                 ;386
                  |L9.218|
0000da  89e0              LDRH     r0,[r4,#0xe]          ;386
0000dc  42a8              CMP      r0,r5                 ;386
0000de  dcfa              BGT      |L9.214|
0000e0  2500              MOVS     r5,#0                 ;392
0000e2  e001              B        |L9.232|
                  |L9.228|
0000e4  1c68              ADDS     r0,r5,#1              ;392
0000e6  b285              UXTH     r5,r0                 ;392
                  |L9.232|
0000e8  8a20              LDRH     r0,[r4,#0x10]         ;392
0000ea  42a8              CMP      r0,r5                 ;392
0000ec  dcfa              BGT      |L9.228|
0000ee  7a20              LDRB     r0,[r4,#8]            ;397
0000f0  b908              CBNZ     r0,|L9.246|
0000f2  2001              MOVS     r0,#1                 ;397
0000f4  e7d3              B        |L9.158|
                  |L9.246|
0000f6  2000              MOVS     r0,#0                 ;398
0000f8  e7d1              B        |L9.158|
;;;400    
                          ENDP


                          AREA ||i.parse_name||, CODE, READONLY, ALIGN=1

                  parse_name PROC
;;;151     */
;;;152    int parse_name(uint8_t * msg, uint8_t * compressed, char * buf, int16_t len)
000000  e92d43f0          PUSH     {r4-r9,lr}
;;;153    {
000004  4607              MOV      r7,r0
000006  468c              MOV      r12,r1
000008  461c              MOV      r4,r3
;;;154    	uint16_t slen;		/* Length of current segment */
;;;155    	uint8_t * cp;
;;;156    	int clen = 0;		/* Total length of compressed name */
00000a  2500              MOVS     r5,#0
;;;157    	int indirect = 0;	/* Set if indirection encountered */
00000c  2600              MOVS     r6,#0
;;;158    	int nseg = 0;		/* Total number of segments in name */
00000e  46a8              MOV      r8,r5
;;;159    
;;;160    	cp = compressed;
000010  4661              MOV      r1,r12
;;;161    
;;;162    	for (;;)
000012  bf00              NOP      
                  |L10.20|
;;;163    	{
;;;164    		slen = *cp++;	/* Length of this segment */
000014  f8113b01          LDRB     r3,[r1],#1
;;;165    
;;;166    		if (!indirect) clen++;
000018  b906              CBNZ     r6,|L10.28|
00001a  1c6d              ADDS     r5,r5,#1
                  |L10.28|
;;;167    
;;;168    		if ((slen & 0xc0) == 0xc0)
00001c  f00300c0          AND      r0,r3,#0xc0
000020  28c0              CMP      r0,#0xc0
000022  d10a              BNE      |L10.58|
;;;169    		{
;;;170    			if (!indirect)
000024  b906              CBNZ     r6,|L10.40|
;;;171    				clen++;
000026  1c6d              ADDS     r5,r5,#1
                  |L10.40|
;;;172    			indirect = 1;
000028  2601              MOVS     r6,#1
;;;173    			/* Follow indirection */
;;;174    			cp = &msg[((slen & 0x3f)<<8) + *cp];
00002a  7808              LDRB     r0,[r1,#0]
00002c  f003093f          AND      r9,r3,#0x3f
000030  eb002009          ADD      r0,r0,r9,LSL #8
000034  19c1              ADDS     r1,r0,r7
;;;175    			slen = *cp++;
000036  f8113b01          LDRB     r3,[r1],#1
                  |L10.58|
;;;176    		}
;;;177    
;;;178    		if (slen == 0)	/* zero length == all done */
00003a  b903              CBNZ     r3,|L10.62|
;;;179    			break;
00003c  e01b              B        |L10.118|
                  |L10.62|
;;;180    
;;;181    		len -= slen + 1;
00003e  1c58              ADDS     r0,r3,#1
000040  1a20              SUBS     r0,r4,r0
000042  b204              SXTH     r4,r0
;;;182    
;;;183    		if (len < 0) return -1;
000044  2c00              CMP      r4,#0
000046  da03              BGE      |L10.80|
000048  f04f30ff          MOV      r0,#0xffffffff
                  |L10.76|
;;;184    
;;;185    		if (!indirect) clen += slen;
;;;186    
;;;187    		while (slen-- != 0) *buf++ = (char)*cp++;
;;;188    		*buf++ = '.';
;;;189    		nseg++;
;;;190    	}
;;;191    
;;;192    	if (nseg == 0)
;;;193    	{
;;;194    		/* Root name; represent as single dot */
;;;195    		*buf++ = '.';
;;;196    		len--;
;;;197    	}
;;;198    
;;;199    	*buf++ = '\0';
;;;200    	len--;
;;;201    
;;;202    	return clen;	/* Length of compressed message */
;;;203    }
00004c  e8bd83f0          POP      {r4-r9,pc}
                  |L10.80|
000050  b906              CBNZ     r6,|L10.84|
000052  441d              ADD      r5,r5,r3              ;185
                  |L10.84|
000054  e003              B        |L10.94|
                  |L10.86|
000056  f8110b01          LDRB     r0,[r1],#1            ;187
00005a  f8020b01          STRB     r0,[r2],#1            ;187
                  |L10.94|
00005e  1e18              SUBS     r0,r3,#0              ;187
000060  f1a30901          SUB      r9,r3,#1              ;187
000064  fa1ff389          UXTH     r3,r9                 ;187
000068  d1f5              BNE      |L10.86|
00006a  202e              MOVS     r0,#0x2e              ;188
00006c  f8020b01          STRB     r0,[r2],#1            ;188
000070  f1080801          ADD      r8,r8,#1              ;189
000074  e7ce              B        |L10.20|
                  |L10.118|
000076  bf00              NOP                            ;179
000078  f1b80f00          CMP      r8,#0                 ;192
00007c  d104              BNE      |L10.136|
00007e  202e              MOVS     r0,#0x2e              ;195
000080  f8020b01          STRB     r0,[r2],#1            ;195
000084  1e60              SUBS     r0,r4,#1              ;196
000086  b204              SXTH     r4,r0                 ;196
                  |L10.136|
000088  2000              MOVS     r0,#0                 ;199
00008a  f8020b01          STRB     r0,[r2],#1            ;199
00008e  1e60              SUBS     r0,r4,#1              ;200
000090  b204              SXTH     r4,r0                 ;200
000092  4628              MOV      r0,r5                 ;202
000094  e7da              B        |L10.76|
;;;204    
                          ENDP


                          AREA ||i.put16||, CODE, READONLY, ALIGN=1

                  put16 PROC
;;;133    /* copies uint16_t to the network buffer with network byte order. */
;;;134    uint8_t * put16(uint8_t * s, uint16_t i)
000000  120a              ASRS     r2,r1,#8
;;;135    {
;;;136    	*s++ = i >> 8;
000002  f8002b01          STRB     r2,[r0],#1
;;;137    	*s++ = i;
000006  f8001b01          STRB     r1,[r0],#1
;;;138    	return s;
;;;139    }
00000a  4770              BX       lr
;;;140    
                          ENDP


                          AREA ||.data||, DATA, ALIGN=2

                  pDNSMSG
                          DCD      0x00000000
                  DNS_SOCKET
000004  0000              DCB      0x00,0x00
                  DNS_MSGID
000006  0000              DCB      0x00,0x00
                  dns_1s_tick
                          DCD      0x00000000
                  retry_count
00000c  00                DCB      0x00
