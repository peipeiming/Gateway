; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\flash\obj\app_plat.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\app_plat.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931,870 -I..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\User\bsp -I..\..\User\bsp\inc -I..\..\User -I..\..\Libraries\CMSIS\Include -I..\..\FreeRTOS\include -I..\..\FreeRTOS\portable\RVDS\ARM_CM3 -I..\..\MQTT -I..\..\Ethernet -I..\..\Ethernet\W5500 -I..\..\Internet\DHCP -I..\..\Internet\DNS -I..\..\User\app\src -I..\..\User\app\inc -I..\..\Internet\NTP -I..\..\Internet\HTTP -I.\RTE\_Flash -ID:\MDK5\ARM\CMSIS\5.0.1\CMSIS\Include -ID:\MDK5\Keil\STM32F1xx_DFP\2.0.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=523 -D_RTE_ -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=.\flash\obj\app_plat.crf ..\..\User\app\src\app_plat.c]
                          THUMB

                          AREA ||i.app_palt_BandData||, CODE, READONLY, ALIGN=2

                  app_palt_BandData PROC
;;;156     */
;;;157    static void app_palt_BandData(uint8_t *TopicInfo,uint16_t  Len)
000000  b530              PUSH     {r4,r5,lr}
;;;158    {
000002  b08b              SUB      sp,sp,#0x2c
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
;;;159      uint16_t crcdata;
;;;160    	uint8_t backdata[26]={0x16,0x00,0x1A};
000008  2116              MOVS     r1,#0x16
00000a  a804              ADD      r0,sp,#0x10
00000c  f7fffffe          BL       __aeabi_memclr4
000010  4848              LDR      r0,|L1.308|
000012  6800              LDR      r0,[r0,#0]  ; <Data2>
000014  9003              STR      r0,[sp,#0xc]
;;;161    	
;;;162    	backdata[2] = BANDDATABACK;
000016  201a              MOVS     r0,#0x1a
000018  f88d000e          STRB     r0,[sp,#0xe]
;;;163    	memcpy(&backdata[3],&TopicInfo[11],8);         /*手环MAC（小端）*/
00001c  f8540f0b          LDR      r0,[r4,#0xb]!
000020  f8cd000f          STR      r0,[sp,#0xf]
000024  6860              LDR      r0,[r4,#4]
000026  f8cd0013          STR      r0,[sp,#0x13]
;;;164    	memcpy(&backdata[11],&TopicInfo[19],8);        /*消息发送时间戳*/
00002a  68a0              LDR      r0,[r4,#8]
00002c  f8cd0017          STR      r0,[sp,#0x17]
000030  68e0              LDR      r0,[r4,#0xc]
000032  3c0b              SUBS     r4,r4,#0xb
000034  f8cd001b          STR      r0,[sp,#0x1b]
;;;165    	memcpy(&backdata[20],&TopicInfo[Len-6],4);     /*流水号*/
000038  1fa8              SUBS     r0,r5,#6
00003a  4420              ADD      r0,r0,r4
00003c  6800              LDR      r0,[r0,#0]
00003e  9008              STR      r0,[sp,#0x20]
;;;166    		
;;;167      /*发起连接 传入参数包含读头的ID*/
;;;168    	if(SUCCESS != app_nrf_ConnectBle(&TopicInfo[3],&TopicInfo[11]))
000040  f104010b          ADD      r1,r4,#0xb
000044  1ce0              ADDS     r0,r4,#3
000046  f7fffffe          BL       app_nrf_ConnectBle
00004a  2801              CMP      r0,#1
00004c  d023              BEQ      |L1.150|
;;;169    	{
;;;170    		#if APP_DEBUG
;;;171    		printf("app_palt_BandData:Link bracelet fail.\r\n");
;;;172    		#endif
;;;173    		backdata[19]=0x01;    
00004e  2001              MOVS     r0,#1
000050  f88d001f          STRB     r0,[sp,#0x1f]
;;;174    		crcdata=app_plat_usMBCRC16(backdata,24);       /*CRC校验*/
000054  2118              MOVS     r1,#0x18
000056  a803              ADD      r0,sp,#0xc
000058  f7fffffe          BL       app_plat_usMBCRC16
00005c  900a              STR      r0,[sp,#0x28]
;;;175    		memcpy(&backdata[24],(uint8_t *)&crcdata,2);		
00005e  f8bd0028          LDRH     r0,[sp,#0x28]
000062  f8ad0024          STRH     r0,[sp,#0x24]
;;;176        mqtt_publish( sysCfg.parameter.data_socket , SMSBCD_TOPIC , (char *)backdata , 26);
000066  4934              LDR      r1,|L1.312|
000068  f89100c0          LDRB     r0,[r1,#0xc0]  ; sysCfg
00006c  231a              MOVS     r3,#0x1a
00006e  aa03              ADD      r2,sp,#0xc
000070  a132              ADR      r1,|L1.316|
000072  f7fffffe          BL       mqtt_publish
;;;177    
;;;178    		if(ERROR == app_nrf_DisconnectBle(&TopicInfo[3]))
000076  1ce0              ADDS     r0,r4,#3
000078  f7fffffe          BL       app_nrf_DisconnectBle
;;;179    		{
;;;180    			#if APP_DEBUG
;;;181    			printf("app_palt_BandData:disconnet error.\r\n");
;;;182    			#endif			
;;;183    		}
;;;184        	
;;;185        ErrorLog(BRACELET,&TopicInfo[11],WARN,MESEG_WARN,0,NULL); /*设备告警*/
00007c  2000              MOVS     r0,#0
00007e  9000              STR      r0,[sp,#0]
000080  f240235b          MOV      r3,#0x25b
000084  2202              MOVS     r2,#2
000086  f104010b          ADD      r1,r4,#0xb
00008a  9001              STR      r0,[sp,#4]
00008c  4610              MOV      r0,r2
00008e  f7fffffe          BL       ErrorLog
                  |L1.146|
;;;186    		return;    	        /*连接失败*/	
;;;187    	} 
;;;188    	
;;;189    	vTaskDelay(1000);	
;;;190    	if(SUCCESS == app_nrf_LeaveMessage(&TopicInfo[3],&TopicInfo[27],Len-33)) 
;;;191    	{
;;;192    		#if APP_DEBUG
;;;193    		printf("Leave Message OK.\r\n");
;;;194    		#endif
;;;195    		backdata[19]=0x03;  /*手环收到*/
;;;196    		crcdata=app_plat_usMBCRC16(backdata,24);       /*CRC校验*/
;;;197    		memcpy(&backdata[24],(uint8_t *)&crcdata,2);	
;;;198    		mqtt_publish( sysCfg.parameter.data_socket , SMSBCD_TOPIC , (char *)backdata , 26);
;;;199    
;;;200    		vTaskDelay(1000);
;;;201    		return;
;;;202    	}  
;;;203    	
;;;204    	backdata[19]=0x02; 												  /*手环未收到消息*/
;;;205    	crcdata=app_plat_usMBCRC16(backdata,24);    /*CRC校验*/
;;;206      memcpy(&backdata[24],(uint8_t *)&crcdata,2);	
;;;207    	mqtt_publish( sysCfg.parameter.data_socket , SMSBCD_TOPIC , (char *)backdata , 26);
;;;208      
;;;209    	#if APP_DEBUG
;;;210    	printf("app_palt_BandData:Leave a message fail.\r\n");
;;;211    	#endif
;;;212    	if(ERROR == app_nrf_DisconnectBle(&TopicInfo[3]))
;;;213    	{
;;;214    	}	
;;;215    	
;;;216    	ErrorLog(BRACELET,&TopicInfo[11],WARN,MESEG_WARN,0,NULL);  /*设备告警*/
;;;217    	vTaskDelay(1000);
;;;218    }
000092  b00b              ADD      sp,sp,#0x2c
000094  bd30              POP      {r4,r5,pc}
                  |L1.150|
000096  f44f707a          MOV      r0,#0x3e8             ;189
00009a  f7fffffe          BL       vTaskDelay
00009e  f1a50021          SUB      r0,r5,#0x21           ;190
0000a2  b282              UXTH     r2,r0                 ;190
0000a4  f104011b          ADD      r1,r4,#0x1b           ;190
0000a8  1ce0              ADDS     r0,r4,#3              ;190
0000aa  f7fffffe          BL       app_nrf_LeaveMessage
0000ae  2801              CMP      r0,#1                 ;190
0000b0  d118              BNE      |L1.228|
0000b2  2003              MOVS     r0,#3                 ;195
0000b4  f88d001f          STRB     r0,[sp,#0x1f]         ;195
0000b8  2118              MOVS     r1,#0x18              ;196
0000ba  a803              ADD      r0,sp,#0xc            ;196
0000bc  f7fffffe          BL       app_plat_usMBCRC16
0000c0  900a              STR      r0,[sp,#0x28]         ;196
0000c2  f8bd0028          LDRH     r0,[sp,#0x28]         ;197
0000c6  f8ad0024          STRH     r0,[sp,#0x24]         ;197
0000ca  491b              LDR      r1,|L1.312|
0000cc  f89100c0          LDRB     r0,[r1,#0xc0]         ;198  ; sysCfg
0000d0  231a              MOVS     r3,#0x1a              ;198
0000d2  aa03              ADD      r2,sp,#0xc            ;198
0000d4  a119              ADR      r1,|L1.316|
0000d6  f7fffffe          BL       mqtt_publish
0000da  f44f707a          MOV      r0,#0x3e8             ;200
0000de  f7fffffe          BL       vTaskDelay
0000e2  e7d6              B        |L1.146|
                  |L1.228|
0000e4  2002              MOVS     r0,#2                 ;204
0000e6  f88d001f          STRB     r0,[sp,#0x1f]         ;204
0000ea  2118              MOVS     r1,#0x18              ;205
0000ec  a803              ADD      r0,sp,#0xc            ;205
0000ee  f7fffffe          BL       app_plat_usMBCRC16
0000f2  900a              STR      r0,[sp,#0x28]         ;205
0000f4  f8bd0028          LDRH     r0,[sp,#0x28]         ;206
0000f8  f8ad0024          STRH     r0,[sp,#0x24]         ;206
0000fc  490e              LDR      r1,|L1.312|
0000fe  f89100c0          LDRB     r0,[r1,#0xc0]         ;207  ; sysCfg
000102  231a              MOVS     r3,#0x1a              ;207
000104  aa03              ADD      r2,sp,#0xc            ;207
000106  a10d              ADR      r1,|L1.316|
000108  f7fffffe          BL       mqtt_publish
00010c  1ce0              ADDS     r0,r4,#3              ;212
00010e  f7fffffe          BL       app_nrf_DisconnectBle
000112  2000              MOVS     r0,#0                 ;216
000114  9000              STR      r0,[sp,#0]            ;216
000116  f240235b          MOV      r3,#0x25b             ;216
00011a  2202              MOVS     r2,#2                 ;216
00011c  f104010b          ADD      r1,r4,#0xb            ;216
000120  9001              STR      r0,[sp,#4]            ;216
000122  4610              MOV      r0,r2                 ;216
000124  f7fffffe          BL       ErrorLog
000128  f44f707a          MOV      r0,#0x3e8             ;217
00012c  f7fffffe          BL       vTaskDelay
000130  bf00              NOP      
000132  e7ae              B        |L1.146|
;;;219    
                          ENDP

                  |L1.308|
                          DCD      ||.constdata||+0x214
                  |L1.312|
                          DCD      sysCfg
                  |L1.316|
00013c  2f696f74          DCB      "/iot_gateway/notice/sms",0
000140  5f676174
000144  65776179
000148  2f6e6f74
00014c  6963652f
000150  736d7300

                          AREA ||i.app_palt_Connectack||, CODE, READONLY, ALIGN=2

                  app_palt_Connectack PROC
;;;1165   
;;;1166   void app_palt_Connectack(plat_report_t * report_t)
000000  b51c              PUSH     {r2-r4,lr}
;;;1167   {
000002  4604              MOV      r4,r0
;;;1168   	uint8_t sessionPresent, connack_rc;
;;;1169   	
;;;1170   	if (MQTTDeserialize_connack(&sessionPresent, &connack_rc,  report_t->payload_data , PLAT_MAX_DATA_LEN) != 1 || (connack_rc != 0) )
000004  f24053dc          MOV      r3,#0x5dc
000008  1de2              ADDS     r2,r4,#7
00000a  4669              MOV      r1,sp
00000c  a801              ADD      r0,sp,#4
00000e  f7fffffe          BL       MQTTDeserialize_connack
000012  2801              CMP      r0,#1
000014  d102              BNE      |L2.28|
000016  f89d0000          LDRB     r0,[sp,#0]
00001a  b1a8              CBZ      r0,|L2.72|
                  |L2.28|
;;;1171   	{		
;;;1172   		#if APP_DEBUG
;;;1173   		printf("Unable to connect, return code %d\n\r", connack_rc); 
;;;1174   		#endif				
;;;1175       bsp_LedOff(2);	
00001c  2002              MOVS     r0,#2
00001e  f7fffffe          BL       bsp_LedOff
;;;1176   		sysCfg.parameter.connect_state = DISCONNECT;
000022  2000              MOVS     r0,#0
000024  490b              LDR      r1,|L2.84|
000026  f88100bf          STRB     r0,[r1,#0xbf]
;;;1177       if(report_t->socket == SOCK_TCPS)		
00002a  7860              LDRB     r0,[r4,#1]
00002c  b908              CBNZ     r0,|L2.50|
;;;1178   		{
;;;1179   			while(1);	
00002e  bf00              NOP      
                  |L2.48|
000030  e7fe              B        |L2.48|
                  |L2.50|
;;;1180       }			
;;;1181   		else  /*第三方socket连接异常指示*/
;;;1182   		{
;;;1183   			bsp_LedOn(4);
000032  2004              MOVS     r0,#4
000034  f7fffffe          BL       bsp_LedOn
;;;1184   			vTaskDelay(1000);
000038  f44f707a          MOV      r0,#0x3e8
00003c  f7fffffe          BL       vTaskDelay
;;;1185   			bsp_LedOff(4);
000040  2004              MOVS     r0,#4
000042  f7fffffe          BL       bsp_LedOff
000046  e003              B        |L2.80|
                  |L2.72|
;;;1186   		}
;;;1187   	}
;;;1188   	else
;;;1189   	{
;;;1190   		#if APP_DEBUG
;;;1191   		printf("%s:MQTT connect OK\r\n",(report_t->socket?"TCP":"TCPS"));	
;;;1192   		#endif
;;;1193   		sysCfg.parameter.connect_state = CONNECT;
000048  2001              MOVS     r0,#1
00004a  4902              LDR      r1,|L2.84|
00004c  f88100bf          STRB     r0,[r1,#0xbf]
                  |L2.80|
;;;1194   	}
;;;1195   }
000050  bd1c              POP      {r2-r4,pc}
;;;1196   
                          ENDP

000052  0000              DCW      0x0000
                  |L2.84|
                          DCD      sysCfg

                          AREA ||i.app_palt_Datadeal||, CODE, READONLY, ALIGN=2

                  app_palt_Datadeal PROC
;;;1020   
;;;1021   static void app_palt_Datadeal(uint8_t *TopicInfo,uint16_t Len,char * topic)
000000  b5f8              PUSH     {r3-r7,lr}
;;;1022   {
000002  4605              MOV      r5,r0
000004  460e              MOV      r6,r1
000006  4617              MOV      r7,r2
;;;1023   	uint16_t crcdata; 
;;;1024   	app_plat_topic nState;
;;;1025     							
;;;1026     /*数据长度检查*/	
;;;1027   	if((TopicInfo[0]+TopicInfo[1]*256)!=Len-4)
000008  7829              LDRB     r1,[r5,#0]
00000a  7868              LDRB     r0,[r5,#1]
00000c  eb012100          ADD      r1,r1,r0,LSL #8
000010  1f30              SUBS     r0,r6,#4
000012  4281              CMP      r1,r0
000014  d000              BEQ      |L3.24|
                  |L3.22|
;;;1028   	{
;;;1029   		#if APP_DEBUG
;;;1030   		printf("Topic len error");
;;;1031   		printf("TopicInfo[0]+TopicInfo[1]*256=%d,len=%d\r\n",TopicInfo[0]+TopicInfo[1]*256,Len);
;;;1032   		printf("data:");
;;;1033   		for(uint8_t i = 0; i < Len; i++)
;;;1034   		{
;;;1035   			printf("%02x ",TopicInfo[i]);
;;;1036   		}
;;;1037   		printf("\r\n");
;;;1038   	  #endif
;;;1039   		return;
;;;1040   	}
;;;1041   	
;;;1042   	/*CRC校验检查*/
;;;1043   	crcdata=app_plat_usMBCRC16(TopicInfo,Len-2);
;;;1044   	if((TopicInfo[Len-1]!=crcdata/256)||(TopicInfo[Len-2]!=crcdata%256))
;;;1045   	{
;;;1046   		#if APP_DEBUG
;;;1047   		printf("CRC error\r\n");
;;;1048   		#endif
;;;1049   		return;
;;;1050   	}
;;;1051   	
;;;1052   	if(app_plat_GetRespone(TopicInfo , topic , &nState ))
;;;1053   	{
;;;1054   		switch(nState)
;;;1055   		{
;;;1056   			/*发送短消息*/
;;;1057   			case PLAT_RESPONSE_SEND_MESSAGE:
;;;1058   				if((TopicInfo[0]+TopicInfo[1]*256-29)>230)
;;;1059   				{		
;;;1060   					return;
;;;1061   				}
;;;1062   				#if APP_DEBUG
;;;1063   				printf("receive meseage\r\n");
;;;1064   				#endif
;;;1065   				
;;;1066   				/*保存消息数据到缓存中*/
;;;1067   				app_palt_WriteFifoData(TopicInfo,Len);
;;;1068   				break;
;;;1069   			
;;;1070   			/*网关设备升级*/
;;;1071   			case PLAT_RESPONSE_DEVUPDATE:
;;;1072   				IWDG_Feed();
;;;1073   			  bsp_ota_UpdataGateway(Len,TopicInfo);  
;;;1074   				break;
;;;1075   			
;;;1076   			 /*蓝牙手环升级*/
;;;1077   			case PLAT_RESPONSE_BRAUPDATE:
;;;1078   				IWDG_Feed();
;;;1079   			  bsp_ota_UpdataBracelet(Len,TopicInfo);  
;;;1080   				break;
;;;1081   			
;;;1082   			/*蓝牙设备升级开始指令*/
;;;1083   			case PLAT_RESPONSE_BLEUPDATE:
;;;1084   			  app_palt_UpdataBle(TopicInfo);  
;;;1085   				break;
;;;1086   			
;;;1087   			/*考勤信标管理*/
;;;1088   //	    case PLAT_RESPONSE_BEAMANAGEMENT:
;;;1089   //				app_palt_BeaconManagement(TopicInfo);
;;;1090   //				break;
;;;1091   			
;;;1092   			/*设置用户信息*/
;;;1093   			case PLAT_RESPONSE_USERINFOSET:
;;;1094   				app_palt_userinfoset( TopicInfo , Len );
;;;1095   				break;
;;;1096   			
;;;1097   			/*配置设备联网信息*/
;;;1098   			case PLAT_RESPONSE_DEVCFGSET:
;;;1099   				#if APP_DEBUG
;;;1100   				printf("receive user info.");
;;;1101   			  #endif
;;;1102   				app_palt_devcfgset( TopicInfo , Len );
;;;1103   				break;
;;;1104   			
;;;1105   			/*设备硬件重启*/
;;;1106   			case PLAT_RESPONSE_RESET:
;;;1107   				printf("PLAT_RESPONSE_RESET");
;;;1108   				app_palt_reset( TopicInfo , Len );
;;;1109   				break;
;;;1110   			
;;;1111   			default:
;;;1112   				break;
;;;1113   		}
;;;1114   	}
;;;1115   }
000016  bdf8              POP      {r3-r7,pc}
                  |L3.24|
000018  1eb0              SUBS     r0,r6,#2              ;1043
00001a  b281              UXTH     r1,r0                 ;1043
00001c  4628              MOV      r0,r5                 ;1043
00001e  f7fffffe          BL       app_plat_usMBCRC16
000022  4604              MOV      r4,r0                 ;1043
000024  17e2              ASRS     r2,r4,#31             ;1044
000026  eb046212          ADD      r2,r4,r2,LSR #24      ;1044
00002a  1213              ASRS     r3,r2,#8              ;1044
00002c  1e72              SUBS     r2,r6,#1              ;1044
00002e  5caa              LDRB     r2,[r5,r2]            ;1044
000030  4293              CMP      r3,r2                 ;1044
000032  d109              BNE      |L3.72|
000034  17e2              ASRS     r2,r4,#31             ;1044
000036  eb046212          ADD      r2,r4,r2,LSR #24      ;1044
00003a  1212              ASRS     r2,r2,#8              ;1044
00003c  eba42302          SUB      r3,r4,r2,LSL #8       ;1044
000040  1eb2              SUBS     r2,r6,#2              ;1044
000042  5caa              LDRB     r2,[r5,r2]            ;1044
000044  4293              CMP      r3,r2                 ;1044
000046  d000              BEQ      |L3.74|
                  |L3.72|
000048  e7e5              B        |L3.22|
                  |L3.74|
00004a  466a              MOV      r2,sp                 ;1052
00004c  4639              MOV      r1,r7                 ;1052
00004e  4628              MOV      r0,r5                 ;1052
000050  f7fffffe          BL       app_plat_GetRespone
000054  2800              CMP      r0,#0                 ;1052
000056  d03d              BEQ      |L3.212|
000058  f89d0000          LDRB     r0,[sp,#0]            ;1054
00005c  2809              CMP      r0,#9                 ;1054
00005e  d237              BCS      |L3.208|
000060  e8dff000          TBB      [pc,r0]               ;1054
000064  05363619          DCB      0x05,0x36,0x36,0x19
000068  12202429          DCB      0x12,0x20,0x24,0x29
00006c  2e00              DCB      0x2e,0x00
00006e  7829              LDRB     r1,[r5,#0]            ;1058
000070  7868              LDRB     r0,[r5,#1]            ;1058
000072  eb012000          ADD      r0,r1,r0,LSL #8       ;1058
000076  381d              SUBS     r0,r0,#0x1d           ;1058
000078  28e6              CMP      r0,#0xe6              ;1058
00007a  dd00              BLE      |L3.126|
00007c  e7cb              B        |L3.22|
                  |L3.126|
00007e  b2f1              UXTB     r1,r6                 ;1067
000080  4628              MOV      r0,r5                 ;1067
000082  f7fffffe          BL       app_palt_WriteFifoData
000086  e024              B        |L3.210|
000088  f7fffffe          BL       IWDG_Feed
00008c  4629              MOV      r1,r5                 ;1073
00008e  4630              MOV      r0,r6                 ;1073
000090  f7fffffe          BL       bsp_ota_UpdataGateway
000094  e01d              B        |L3.210|
000096  f7fffffe          BL       IWDG_Feed
00009a  4629              MOV      r1,r5                 ;1079
00009c  4630              MOV      r0,r6                 ;1079
00009e  f7fffffe          BL       bsp_ota_UpdataBracelet
0000a2  e016              B        |L3.210|
0000a4  4628              MOV      r0,r5                 ;1084
0000a6  f7fffffe          BL       app_palt_UpdataBle
0000aa  e012              B        |L3.210|
0000ac  4631              MOV      r1,r6                 ;1094
0000ae  4628              MOV      r0,r5                 ;1094
0000b0  f7fffffe          BL       app_palt_userinfoset
0000b4  e00d              B        |L3.210|
0000b6  4631              MOV      r1,r6                 ;1102
0000b8  4628              MOV      r0,r5                 ;1102
0000ba  f7fffffe          BL       app_palt_devcfgset
0000be  e008              B        |L3.210|
0000c0  a005              ADR      r0,|L3.216|
0000c2  f7fffffe          BL       __2printf
0000c6  4631              MOV      r1,r6                 ;1108
0000c8  4628              MOV      r0,r5                 ;1108
0000ca  f7fffffe          BL       app_palt_reset
0000ce  e000              B        |L3.210|
                  |L3.208|
0000d0  bf00              NOP                            ;1112
                  |L3.210|
0000d2  bf00              NOP                            ;1068
                  |L3.212|
0000d4  bf00              NOP      
0000d6  e79e              B        |L3.22|
;;;1116   
                          ENDP

                  |L3.216|
0000d8  504c4154          DCB      "PLAT_RESPONSE_RESET",0
0000dc  5f524553
0000e0  504f4e53
0000e4  455f5245
0000e8  53455400

                          AREA ||i.app_palt_Receicedata||, CODE, READONLY, ALIGN=2

                  app_palt_Receicedata PROC
;;;1124   */
;;;1125   void app_palt_Receicedata(plat_report_t * report_t)
000000  b570              PUSH     {r4-r6,lr}
;;;1126   {
000002  b096              SUB      sp,sp,#0x58
000004  4604              MOV      r4,r0
;;;1127   	uint8_t  len;
;;;1128   	uint8_t  dup;					//重复标志
;;;1129   	uint8_t  ack[30];			//回执
;;;1130     uint8_t  retained;		//保留标志
;;;1131     uint8_t  *payload_in; //负载内容
;;;1132     
;;;1133   	uint16_t msgid;				//消息ID
;;;1134   	
;;;1135   	int qos;							//消息质量
;;;1136   	int payloadlen_in;		//负载长度
;;;1137   	MQTTString receivedTopic;
;;;1138   	
;;;1139   	/*解析消息内容*/
;;;1140   	MQTTDeserialize_publish(&dup, &qos, &retained, &msgid, &receivedTopic,
000006  f24051dc          MOV      r1,#0x5dc
00000a  1de0              ADDS     r0,r4,#7
00000c  aa08              ADD      r2,sp,#0x20
00000e  ab0b              ADD      r3,sp,#0x2c
000010  e9cd3201          STRD     r3,r2,[sp,#4]
000014  e9cd0103          STRD     r0,r1,[sp,#0xc]
000018  a805              ADD      r0,sp,#0x14
00001a  ab0a              ADD      r3,sp,#0x28
00001c  aa0c              ADD      r2,sp,#0x30
00001e  a909              ADD      r1,sp,#0x24
000020  9000              STR      r0,[sp,#0]
000022  a815              ADD      r0,sp,#0x54
000024  f7fffffe          BL       MQTTDeserialize_publish
;;;1141   	&payload_in, &payloadlen_in, report_t->payload_data , PLAT_MAX_DATA_LEN );				
;;;1142   
;;;1143   	/*消息回执 订阅的QOS=1需要回执*/
;;;1144   	len = MQTTSerialize_puback(ack, sizeof(ack),msgid);
000028  f8bd2028          LDRH     r2,[sp,#0x28]
00002c  211e              MOVS     r1,#0x1e
00002e  a80d              ADD      r0,sp,#0x34
000030  f7fffffe          BL       MQTTSerialize_puback
000034  b2c5              UXTB     r5,r0
;;;1145   	transport_sendPacketBuffer(report_t->socket,ack,len);
000036  7860              LDRB     r0,[r4,#1]
000038  462a              MOV      r2,r5
00003a  a90d              ADD      r1,sp,#0x34
00003c  f7fffffe          BL       transport_sendPacketBuffer
;;;1146   
;;;1147   	if(0 == strncmp(receivedTopic.lenstring.data,gateupdata_topic,strlen(gateupdata_topic))
000040  481b              LDR      r0,|L4.176|
000042  f7fffffe          BL       strlen
000046  4606              MOV      r6,r0
000048  4632              MOV      r2,r6
00004a  4919              LDR      r1,|L4.176|
00004c  9807              LDR      r0,[sp,#0x1c]
00004e  f7fffffe          BL       strncmp
000052  b938              CBNZ     r0,|L4.100|
;;;1148   	&&(0x01 == payload_in[3]+payload_in[4]*256))
000054  980b              LDR      r0,[sp,#0x2c]
000056  78c1              LDRB     r1,[r0,#3]
000058  7900              LDRB     r0,[r0,#4]
00005a  eb012000          ADD      r0,r1,r0,LSL #8
00005e  2801              CMP      r0,#1
000060  d100              BNE      |L4.100|
;;;1149   	{
;;;1150   		report_t->gateway_updata_flag = GAT_UPDATA_START;
000062  71a0              STRB     r0,[r4,#6]
                  |L4.100|
;;;1151   	}
;;;1152   
;;;1153   	if(0 == strncmp(receivedTopic.lenstring.data,bleupdata_topic,strlen(bleupdata_topic)))
000064  4813              LDR      r0,|L4.180|
000066  f7fffffe          BL       strlen
00006a  4606              MOV      r6,r0
00006c  4632              MOV      r2,r6
00006e  4911              LDR      r1,|L4.180|
000070  9807              LDR      r0,[sp,#0x1c]
000072  f7fffffe          BL       strncmp
000076  b908              CBNZ     r0,|L4.124|
;;;1154   	{
;;;1155   		report_t->ble_updata_flag = BLE_UPDATA_START;
000078  2001              MOVS     r0,#1
00007a  7120              STRB     r0,[r4,#4]
                  |L4.124|
;;;1156   	}
;;;1157   	
;;;1158   	if(0 == strncmp(receivedTopic.lenstring.data,bracelet_topic,strlen(bracelet_topic))&&(0x01 == payload_in[3]+payload_in[4]*256))
00007c  480e              LDR      r0,|L4.184|
00007e  f7fffffe          BL       strlen
000082  4606              MOV      r6,r0
000084  4632              MOV      r2,r6
000086  490c              LDR      r1,|L4.184|
000088  9807              LDR      r0,[sp,#0x1c]
00008a  f7fffffe          BL       strncmp
00008e  b938              CBNZ     r0,|L4.160|
000090  980b              LDR      r0,[sp,#0x2c]
000092  78c1              LDRB     r1,[r0,#3]
000094  7900              LDRB     r0,[r0,#4]
000096  eb012000          ADD      r0,r1,r0,LSL #8
00009a  2801              CMP      r0,#1
00009c  d100              BNE      |L4.160|
;;;1159   	{
;;;1160   		report_t->bracelet_updata_flag = BRA_UPDATA_START;
00009e  7160              STRB     r0,[r4,#5]
                  |L4.160|
;;;1161   	}
;;;1162   		
;;;1163   	app_palt_Datadeal(payload_in,payloadlen_in,receivedTopic.lenstring.data);	
0000a0  e9dd2007          LDRD     r2,r0,[sp,#0x1c]
0000a4  b281              UXTH     r1,r0
0000a6  980b              LDR      r0,[sp,#0x2c]
0000a8  f7fffffe          BL       app_palt_Datadeal
;;;1164   }
0000ac  b016              ADD      sp,sp,#0x58
0000ae  bd70              POP      {r4-r6,pc}
;;;1165   
                          ENDP

                  |L4.176|
                          DCD      gateupdata_topic
                  |L4.180|
                          DCD      bleupdata_topic
                  |L4.184|
                          DCD      bracelet_topic

                          AREA ||i.app_palt_Reportparse||, CODE, READONLY, ALIGN=2

                  app_palt_Reportparse PROC
;;;1205   */
;;;1206   ErrorStatus app_palt_Reportparse(plat_report_t * report_t)
000000  b570              PUSH     {r4-r6,lr}
;;;1207   {
000002  4605              MOV      r5,r0
;;;1208   	uint16_t len = 0;
000004  2600              MOVS     r6,#0
;;;1209   	uint8_t reg_status = 0;
000006  2400              MOVS     r4,#0
;;;1210   	
;;;1211   	reg_status = getIR();               	/*读取中断标志寄存器*/
000008  f44f50a8          MOV      r0,#0x1500
00000c  f7fffffe          BL       WIZCHIP_READ
000010  f00004f0          AND      r4,r0,#0xf0
;;;1212   	setIR(reg_status);                  	/*回写清除中断标志*/
000014  f00401f0          AND      r1,r4,#0xf0
000018  f44f50a8          MOV      r0,#0x1500
00001c  f7fffffe          BL       WIZCHIP_WRITE
;;;1213   	reg_status = getSIR();              	/*读取端口中断标志寄存器*/	
000020  f44f50b8          MOV      r0,#0x1700
000024  f7fffffe          BL       WIZCHIP_READ
000028  4604              MOV      r4,r0
;;;1214   	setSIR(reg_status);										/*回写清除端口中断标志寄存器*/
00002a  4621              MOV      r1,r4
00002c  f44f50b8          MOV      r0,#0x1700
000030  f7fffffe          BL       WIZCHIP_WRITE
;;;1215   	
;;;1216   	//printf("reg_status：%02x\r\n",reg_status);
;;;1217   	
;;;1218   	/*主服务器端口事件*/
;;;1219   	if((reg_status & (1 << SOCK_TCPS)) == (1 << SOCK_TCPS))     
000034  f0040001          AND      r0,r4,#1
000038  b1f8              CBZ      r0,|L5.122|
;;;1220   	{
;;;1221   		report_t->socket = SOCK_TCPS;
00003a  2000              MOVS     r0,#0
00003c  7068              STRB     r0,[r5,#1]
;;;1222   		reg_status = getSn_IR(SOCK_TCPS); 	/*读取Socket中断标志寄存器*/
00003e  f44f7002          MOV      r0,#0x208
000042  f7fffffe          BL       WIZCHIP_READ
000046  f000041f          AND      r4,r0,#0x1f
;;;1223   		setSn_IR(SOCK_TCPS,reg_status);   	/*回写清除中断*/
00004a  4621              MOV      r1,r4
00004c  f44f7002          MOV      r0,#0x208
000050  f7fffffe          BL       WIZCHIP_WRITE
;;;1224   		if(reg_status & Sn_IR_RECV)         /*Socket接收到数据,可以启动S_rx_process()函数*/
000054  f0040004          AND      r0,r4,#4
000058  b178              CBZ      r0,|L5.122|
;;;1225   		{	
;;;1226   			len = getSn_RX_RSR(SOCK_TCPS);		/*读取W5500接收缓存区数据大小*/
00005a  2000              MOVS     r0,#0
00005c  f7fffffe          BL       getSn_RX_RSR
000060  4606              MOV      r6,r0
;;;1227   			if(0 == len) 
000062  b90e              CBNZ     r6,|L5.104|
;;;1228   			{
;;;1229   				return ERROR;
000064  2000              MOVS     r0,#0
                  |L5.102|
;;;1230   			}
;;;1231   			/*获取W5500接收缓存区数据*/
;;;1232   			report_t->evt_id = MQTTPacket_read(report_t->payload_data, PLAT_MAX_DATA_LEN , transport_getdata0);
;;;1233   			return SUCCESS;
;;;1234   		}
;;;1235   	}
;;;1236   
;;;1237   	/*第三方服务器端口事件*/
;;;1238   	if((reg_status & (1 << SOCK_TCP)) == (1 << SOCK_TCP))     
;;;1239   	{
;;;1240   		report_t->socket = SOCK_TCP;
;;;1241   		reg_status = getSn_IR(SOCK_TCP);  	/*读取Socket中断标志寄存器*/
;;;1242   		setSn_IR(SOCK_TCP,reg_status);    	/*回写清除中断*/
;;;1243   		if(reg_status & Sn_IR_RECV)         /*Socket接收到数据,可以启动S_rx_process()函数*/
;;;1244   		{	
;;;1245   			len = getSn_RX_RSR(SOCK_TCP);			/*读取W5500接收缓存区数据大小*/
;;;1246   			if(0 == len) 
;;;1247   			{
;;;1248   				return ERROR;
;;;1249   			}
;;;1250   			/*获取W5500接收缓存区数据*/
;;;1251   			report_t->evt_id = MQTTPacket_read(report_t->payload_data, PLAT_MAX_DATA_LEN , transport_getdata1);
;;;1252   			return SUCCESS;
;;;1253   		}
;;;1254   	}
;;;1255   	
;;;1256   	/*BLE升级端口事件*/
;;;1257   	else if((reg_status & (1 << SOCK_BLE)) == (1 << SOCK_BLE))
;;;1258   	{
;;;1259   		report_t->socket = SOCK_BLE;
;;;1260   		reg_status = getSn_IR(SOCK_BLE);
;;;1261   		setSn_IR(SOCK_BLE,reg_status);  
;;;1262   		if(reg_status & Sn_IR_RECV)  
;;;1263   		{
;;;1264   			len = getSn_RX_RSR(SOCK_BLE);
;;;1265   			if(0 == len) 
;;;1266   			{
;;;1267   				return ERROR;
;;;1268   			}
;;;1269   		}
;;;1270   		return SUCCESS;
;;;1271   	}
;;;1272   	
;;;1273   	return ERROR;
;;;1274   }
000066  bd70              POP      {r4-r6,pc}
                  |L5.104|
000068  4a25              LDR      r2,|L5.256|
00006a  f24051dc          MOV      r1,#0x5dc             ;1232
00006e  1de8              ADDS     r0,r5,#7              ;1232
000070  f7fffffe          BL       MQTTPacket_read
000074  7028              STRB     r0,[r5,#0]            ;1232
000076  2001              MOVS     r0,#1                 ;1233
000078  e7f5              B        |L5.102|
                  |L5.122|
00007a  f0040002          AND      r0,r4,#2              ;1238
00007e  2802              CMP      r0,#2                 ;1238
000080  d11f              BNE      |L5.194|
000082  2001              MOVS     r0,#1                 ;1240
000084  7068              STRB     r0,[r5,#1]            ;1240
000086  f44f700a          MOV      r0,#0x228             ;1241
00008a  f7fffffe          BL       WIZCHIP_READ
00008e  f000041f          AND      r4,r0,#0x1f           ;1241
000092  4621              MOV      r1,r4                 ;1242
000094  f44f700a          MOV      r0,#0x228             ;1242
000098  f7fffffe          BL       WIZCHIP_WRITE
00009c  f0040004          AND      r0,r4,#4              ;1243
0000a0  b360              CBZ      r0,|L5.252|
0000a2  2001              MOVS     r0,#1                 ;1245
0000a4  f7fffffe          BL       getSn_RX_RSR
0000a8  4606              MOV      r6,r0                 ;1245
0000aa  b90e              CBNZ     r6,|L5.176|
0000ac  2000              MOVS     r0,#0                 ;1248
0000ae  e7da              B        |L5.102|
                  |L5.176|
0000b0  4a14              LDR      r2,|L5.260|
0000b2  f24051dc          MOV      r1,#0x5dc             ;1251
0000b6  1de8              ADDS     r0,r5,#7              ;1251
0000b8  f7fffffe          BL       MQTTPacket_read
0000bc  7028              STRB     r0,[r5,#0]            ;1251
0000be  2001              MOVS     r0,#1                 ;1252
0000c0  e7d1              B        |L5.102|
                  |L5.194|
0000c2  f0040004          AND      r0,r4,#4              ;1257
0000c6  2804              CMP      r0,#4                 ;1257
0000c8  d118              BNE      |L5.252|
0000ca  2002              MOVS     r0,#2                 ;1259
0000cc  7068              STRB     r0,[r5,#1]            ;1259
0000ce  f44f7012          MOV      r0,#0x248             ;1260
0000d2  f7fffffe          BL       WIZCHIP_READ
0000d6  f000041f          AND      r4,r0,#0x1f           ;1260
0000da  4621              MOV      r1,r4                 ;1261
0000dc  f44f7012          MOV      r0,#0x248             ;1261
0000e0  f7fffffe          BL       WIZCHIP_WRITE
0000e4  f0040004          AND      r0,r4,#4              ;1262
0000e8  b130              CBZ      r0,|L5.248|
0000ea  2002              MOVS     r0,#2                 ;1264
0000ec  f7fffffe          BL       getSn_RX_RSR
0000f0  4606              MOV      r6,r0                 ;1264
0000f2  b90e              CBNZ     r6,|L5.248|
0000f4  2000              MOVS     r0,#0                 ;1267
0000f6  e7b6              B        |L5.102|
                  |L5.248|
0000f8  2001              MOVS     r0,#1                 ;1270
0000fa  e7b4              B        |L5.102|
                  |L5.252|
0000fc  2000              MOVS     r0,#0                 ;1273
0000fe  e7b2              B        |L5.102|
;;;1275   
                          ENDP

                  |L5.256|
                          DCD      transport_getdata0
                  |L5.260|
                          DCD      transport_getdata1

                          AREA ||i.app_palt_UpdataBle||, CODE, READONLY, ALIGN=2

                  app_palt_UpdataBle PROC
;;;58      */
;;;59     static void app_palt_UpdataBle(uint8_t *TopicInfo)
000000  b530              PUSH     {r4,r5,lr}
;;;60     {
000002  b08d              SUB      sp,sp,#0x34
000004  4604              MOV      r4,r0
;;;61     	int32_t ret;
;;;62     	uint16_t crcdata;
;;;63     	uint16_t port = 0;
000006  2000              MOVS     r0,#0
000008  900b              STR      r0,[sp,#0x2c]
;;;64     	USART_InitTypeDef USART_InitStructure;
;;;65     	
;;;66     	uint8_t ble_ip[4] = {0};
00000a  9006              STR      r0,[sp,#0x18]
;;;67     	uint8_t topicdata[18]={0x0e,0x00,0x8a};
00000c  2214              MOVS     r2,#0x14
00000e  4941              LDR      r1,|L6.276|
000010  a801              ADD      r0,sp,#4
000012  f7fffffe          BL       __aeabi_memcpy4
;;;68     	static uint32_t UpdataBleSerialNumber=0;
;;;69     	
;;;70     	memcpy((uint8_t *)&port,&TopicInfo[15],2);  /*获取端口号*/
000016  f8b4000f          LDRH     r0,[r4,#0xf]
00001a  900b              STR      r0,[sp,#0x2c]
;;;71     	
;;;72     	app_nrf_UpdataBle(&TopicInfo[3]);           /*发送开始升级主题*/
00001c  1ce0              ADDS     r0,r4,#3
00001e  f7fffffe          BL       app_nrf_UpdataBle
;;;73     			 
;;;74     	topicdata[2] = BLEUPDATACK;      
000022  208a              MOVS     r0,#0x8a
000024  f88d0006          STRB     r0,[sp,#6]
;;;75       memset(&topicdata[3],0x00,2);	
000028  2000              MOVS     r0,#0
00002a  f8ad0007          STRH     r0,[sp,#7]
;;;76     	memcpy(&topicdata[5],sysCfg.parameter.client_mac,6);
00002e  483a              LDR      r0,|L6.280|
000030  6801              LDR      r1,[r0,#0]  ; sysCfg
000032  f8cd1009          STR      r1,[sp,#9]
000036  8880              LDRH     r0,[r0,#4]  ; sysCfg
000038  f8ad000d          STRH     r0,[sp,#0xd]
;;;77     	memcpy(&topicdata[12],(uint8_t *)&UpdataBleSerialNumber,4); /*流水号*/
00003c  4837              LDR      r0,|L6.284|
00003e  6800              LDR      r0,[r0,#0]  ; UpdataBleSerialNumber
000040  9004              STR      r0,[sp,#0x10]
;;;78     	UpdataBleSerialNumber++;
000042  4836              LDR      r0,|L6.284|
000044  6800              LDR      r0,[r0,#0]  ; UpdataBleSerialNumber
000046  1c40              ADDS     r0,r0,#1
000048  4934              LDR      r1,|L6.284|
00004a  6008              STR      r0,[r1,#0]  ; UpdataBleSerialNumber
;;;79     		
;;;80     	memcpy(ble_ip,&TopicInfo[11],4);
00004c  f8d4000b          LDR      r0,[r4,#0xb]
000050  9006              STR      r0,[sp,#0x18]
;;;81     	memcpy((uint8_t *)&port,&TopicInfo[15],2);
000052  f8b4000f          LDRH     r0,[r4,#0xf]
000056  900b              STR      r0,[sp,#0x2c]
;;;82     	
;;;83     	#if APP_DEBUG
;;;84     	printf("Updata ble device:");
;;;85     	for(uint8_t i = 0; i < 8; i++)
;;;86     	{
;;;87     		printf("%02x ",TopicInfo[10-i]);
;;;88     	}
;;;89     	printf("\r\n");
;;;90     	
;;;91     	printf("Updata ble server IP:");
;;;92     	for(uint8_t i = 0; i < 4; i++)
;;;93     	{
;;;94     		printf("%d ",TopicInfo[11+i]);
;;;95     	}
;;;96     	printf("      PORT:%d\r\n",port);
;;;97     	#endif
;;;98     		
;;;99     	topicdata[11] = 0x01;
000058  2001              MOVS     r0,#1
00005a  f88d000f          STRB     r0,[sp,#0xf]
;;;100    	
;;;101    	/*新建一个Socket并绑定本地端口5000*/
;;;102    	ret = socket(SOCK_BLE,Sn_MR_TCP,5000,0x00);
00005e  2300              MOVS     r3,#0
000060  f2413288          MOV      r2,#0x1388
000064  2101              MOVS     r1,#1
000066  2002              MOVS     r0,#2
000068  f7fffffe          BL       socket
00006c  4605              MOV      r5,r0
;;;103    	if(ret != SOCK_BLE)
00006e  2d02              CMP      r5,#2
000070  d002              BEQ      |L6.120|
;;;104    	{
;;;105    		topicdata[11] = 0x00;
000072  2000              MOVS     r0,#0
000074  f88d000f          STRB     r0,[sp,#0xf]
                  |L6.120|
;;;106    		#if APP_DEBUG
;;;107    		printf("%d:Socket Error\r\n",SOCK_BLE);
;;;108    		#endif
;;;109    	}
;;;110    
;;;111    	/*连接TCP服务器*/
;;;112    	ret = connect(SOCK_BLE,ble_ip,port); 
000078  f8bd202c          LDRH     r2,[sp,#0x2c]
00007c  a906              ADD      r1,sp,#0x18
00007e  2002              MOVS     r0,#2
000080  f7fffffe          BL       connect
000084  4605              MOV      r5,r0
;;;113    	if(ret != SOCK_OK)
000086  2d01              CMP      r5,#1
000088  d002              BEQ      |L6.144|
;;;114    	{
;;;115    		topicdata[11] = 0x00;
00008a  2000              MOVS     r0,#0
00008c  f88d000f          STRB     r0,[sp,#0xf]
                  |L6.144|
;;;116    		#if APP_DEBUG
;;;117    		printf("%d:Socket Connect Error\r\n",SOCK_BLE);
;;;118    		#endif
;;;119    	}
;;;120    		
;;;121    	USART_Cmd(USART3, DISABLE);		
000090  2100              MOVS     r1,#0
000092  4823              LDR      r0,|L6.288|
000094  f7fffffe          BL       USART_Cmd
;;;122    	
;;;123    	USART_InitStructure.USART_BaudRate = 9600;	/* 波特率 */
000098  f44f5016          MOV      r0,#0x2580
00009c  9007              STR      r0,[sp,#0x1c]
;;;124    	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
00009e  2000              MOVS     r0,#0
0000a0  f8ad0020          STRH     r0,[sp,#0x20]
;;;125    	USART_InitStructure.USART_StopBits = USART_StopBits_1;
0000a4  f8ad0022          STRH     r0,[sp,#0x22]
;;;126    	USART_InitStructure.USART_Parity = USART_Parity_No ;
0000a8  f8ad0024          STRH     r0,[sp,#0x24]
;;;127    	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
0000ac  f8ad0028          STRH     r0,[sp,#0x28]
;;;128    	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
0000b0  200c              MOVS     r0,#0xc
0000b2  f8ad0026          STRH     r0,[sp,#0x26]
;;;129    	USART_Init(USART3, &USART_InitStructure);
0000b6  a907              ADD      r1,sp,#0x1c
0000b8  4819              LDR      r0,|L6.288|
0000ba  f7fffffe          BL       USART_Init
;;;130    	
;;;131    	USART_Cmd(USART3, ENABLE);		/* 使能串口 */
0000be  2101              MOVS     r1,#1
0000c0  4817              LDR      r0,|L6.288|
0000c2  f7fffffe          BL       USART_Cmd
;;;132    
;;;133    	vTaskDelay(50);
0000c6  2032              MOVS     r0,#0x32
0000c8  f7fffffe          BL       vTaskDelay
;;;134    	
;;;135    	crcdata=app_plat_usMBCRC16(topicdata,topicdata[1]*256+topicdata[0]+2);
0000cc  f89d2004          LDRB     r2,[sp,#4]
0000d0  f89d0005          LDRB     r0,[sp,#5]
0000d4  eb022000          ADD      r0,r2,r0,LSL #8
0000d8  1c80              ADDS     r0,r0,#2
0000da  b281              UXTH     r1,r0
0000dc  a801              ADD      r0,sp,#4
0000de  f7fffffe          BL       app_plat_usMBCRC16
0000e2  900c              STR      r0,[sp,#0x30]
;;;136    	memcpy(&topicdata[16],(uint8_t *)&crcdata,2);  
0000e4  f8bd0030          LDRH     r0,[sp,#0x30]
0000e8  f8ad0014          STRH     r0,[sp,#0x14]
;;;137    	
;;;138      if(mqtt_publish( SOCK_TCPS, BLEUPDATABCD_TOPIC , (char *)topicdata , topicdata[1]*256+topicdata[0]+4))
0000ec  f89d1004          LDRB     r1,[sp,#4]
0000f0  f89d0005          LDRB     r0,[sp,#5]
0000f4  eb012000          ADD      r0,r1,r0,LSL #8
0000f8  1d03              ADDS     r3,r0,#4
0000fa  aa01              ADD      r2,sp,#4
0000fc  a109              ADR      r1,|L6.292|
0000fe  2000              MOVS     r0,#0
000100  f7fffffe          BL       mqtt_publish
;;;139    	{
;;;140    
;;;141    	}
;;;142    	
;;;143    	vTaskDelay(500);
000104  f44f70fa          MOV      r0,#0x1f4
000108  f7fffffe          BL       vTaskDelay
;;;144    	mqtt_disconnect();
00010c  f7fffffe          BL       mqtt_disconnect
;;;145    }
000110  b00d              ADD      sp,sp,#0x34
000112  bd30              POP      {r4,r5,pc}
;;;146    
                          ENDP

                  |L6.276|
                          DCD      ||.constdata||+0x200
                  |L6.280|
                          DCD      sysCfg+0xda
                  |L6.284|
                          DCD      UpdataBleSerialNumber
                  |L6.288|
                          DCD      0x40004800
                  |L6.292|
000124  2f696f74          DCB      "/iot_gateway/bleupdate/ack",0
000128  5f676174
00012c  65776179
000130  2f626c65
000134  75706461
000138  74652f61
00013c  636b00  
00013f  00                DCB      0

                          AREA ||i.app_palt_WriteFifoData||, CODE, READONLY, ALIGN=2

                  app_palt_WriteFifoData PROC
;;;24      */
;;;25     static void app_palt_WriteFifoData(uint8_t *p,uint8_t len)
000000  b530              PUSH     {r4,r5,lr}
;;;26     {
000002  4602              MOV      r2,r0
;;;27     	uint8_t i;
;;;28     		
;;;29     	mes_fifo.pRxBuf[mes_fifo.usRxWrite]=0x5a;
000004  235a              MOVS     r3,#0x5a
000006  4c1d              LDR      r4,|L7.124|
000008  6824              LDR      r4,[r4,#0]  ; mes_fifo
00000a  4d1c              LDR      r5,|L7.124|
00000c  88ed              LDRH     r5,[r5,#6]  ; mes_fifo
00000e  5563              STRB     r3,[r4,r5]
;;;30     	if (++mes_fifo.usRxWrite >= mes_fifo.usRxBufSize)
000010  4b1a              LDR      r3,|L7.124|
000012  88db              LDRH     r3,[r3,#6]  ; mes_fifo
000014  1c5b              ADDS     r3,r3,#1
000016  b29b              UXTH     r3,r3
000018  4c18              LDR      r4,|L7.124|
00001a  80e3              STRH     r3,[r4,#6]
00001c  88a4              LDRH     r4,[r4,#4]  ; mes_fifo
00001e  42a3              CMP      r3,r4
000020  db02              BLT      |L7.40|
;;;31     	{
;;;32     		mes_fifo.usRxWrite = 0;
000022  2300              MOVS     r3,#0
000024  4c15              LDR      r4,|L7.124|
000026  80e3              STRH     r3,[r4,#6]
                  |L7.40|
;;;33     	}
;;;34     	
;;;35     	mes_fifo.usRxCount++;
000028  4b14              LDR      r3,|L7.124|
00002a  895b              LDRH     r3,[r3,#0xa]  ; mes_fifo
00002c  1c5b              ADDS     r3,r3,#1
00002e  4c13              LDR      r4,|L7.124|
000030  8163              STRH     r3,[r4,#0xa]
;;;36     	for(i=0;i<len;i++)
000032  2000              MOVS     r0,#0
000034  e01e              B        |L7.116|
                  |L7.54|
;;;37     	{
;;;38     		/*如果待读取的数据总数小于FIFO的大小,则写入*/
;;;39     		if (mes_fifo.usRxCount<mes_fifo.usRxBufSize)
000036  4b11              LDR      r3,|L7.124|
000038  895b              LDRH     r3,[r3,#0xa]  ; mes_fifo
00003a  4c10              LDR      r4,|L7.124|
00003c  88a4              LDRH     r4,[r4,#4]  ; mes_fifo
00003e  42a3              CMP      r3,r4
000040  da16              BGE      |L7.112|
;;;40     		{
;;;41     			mes_fifo.pRxBuf[mes_fifo.usRxWrite]=p[i];
000042  5c13              LDRB     r3,[r2,r0]
000044  4c0d              LDR      r4,|L7.124|
000046  6824              LDR      r4,[r4,#0]  ; mes_fifo
000048  4d0c              LDR      r5,|L7.124|
00004a  88ed              LDRH     r5,[r5,#6]  ; mes_fifo
00004c  5563              STRB     r3,[r4,r5]
;;;42     			if (++mes_fifo.usRxWrite >= mes_fifo.usRxBufSize)
00004e  4b0b              LDR      r3,|L7.124|
000050  88db              LDRH     r3,[r3,#6]  ; mes_fifo
000052  1c5b              ADDS     r3,r3,#1
000054  b29b              UXTH     r3,r3
000056  4c09              LDR      r4,|L7.124|
000058  80e3              STRH     r3,[r4,#6]
00005a  88a4              LDRH     r4,[r4,#4]  ; mes_fifo
00005c  42a3              CMP      r3,r4
00005e  db02              BLT      |L7.102|
;;;43     			{
;;;44     				mes_fifo.usRxWrite = 0;
000060  2300              MOVS     r3,#0
000062  4c06              LDR      r4,|L7.124|
000064  80e3              STRH     r3,[r4,#6]
                  |L7.102|
;;;45     			}
;;;46     			mes_fifo.usRxCount++;
000066  4b05              LDR      r3,|L7.124|
000068  895b              LDRH     r3,[r3,#0xa]  ; mes_fifo
00006a  1c5b              ADDS     r3,r3,#1
00006c  4c03              LDR      r4,|L7.124|
00006e  8163              STRH     r3,[r4,#0xa]
                  |L7.112|
000070  1c43              ADDS     r3,r0,#1              ;36
000072  b2d8              UXTB     r0,r3                 ;36
                  |L7.116|
000074  4288              CMP      r0,r1                 ;36
000076  dbde              BLT      |L7.54|
;;;47     		}
;;;48     	}
;;;49     }
000078  bd30              POP      {r4,r5,pc}
;;;50     
                          ENDP

00007a  0000              DCW      0x0000
                  |L7.124|
                          DCD      mes_fifo

                          AREA ||i.app_palt_devcfgset||, CODE, READONLY, ALIGN=2

                  app_palt_devcfgset PROC
;;;409    */
;;;410    static void app_palt_devcfgset(uint8_t *TopicInfo , uint16_t len )
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;411    {
000004  4604              MOV      r4,r0
000006  4689              MOV      r9,r1
;;;412    	uint16_t usTemp;
;;;413    	uint32_t _ulFlashAddr;
;;;414    	
;;;415    	uint8_t err_code = 0;
000008  f04f0800          MOV      r8,#0
;;;416    	
;;;417    	if(TopicInfo[9] > sizeof(sysCfg.parameter.server_user) || TopicInfo[10+TopicInfo[9]] > sizeof(sysCfg.parameter.server_pass))
00000c  7a60              LDRB     r0,[r4,#9]
00000e  2814              CMP      r0,#0x14
000010  d804              BHI      |L8.28|
000012  7a60              LDRB     r0,[r4,#9]
000014  300a              ADDS     r0,r0,#0xa
000016  5c20              LDRB     r0,[r4,r0]
000018  2832              CMP      r0,#0x32
00001a  d901              BLS      |L8.32|
                  |L8.28|
;;;418    	{
;;;419    		#if APP_DEBUG   
;;;420    		printf("\r\nset parameter over limit!\r\n");
;;;421    		#endif
;;;422    		return;			
;;;423    	}
;;;424    		
;;;425    	memcpy(sysCfg.parameter.server_ip,&TopicInfo[3],4);
;;;426    	memcpy((uint8_t *)&sysCfg.parameter.server_port,&TopicInfo[7],2);
;;;427    	
;;;428    	memcpy(sysCfg.parameter.server_user,&TopicInfo[10],TopicInfo[9]);
;;;429    	memcpy(sysCfg.parameter.server_pass,&TopicInfo[11+TopicInfo[9]],TopicInfo[10+TopicInfo[9]]);
;;;430    
;;;431    	sysCfg.parameter.server_user[TopicInfo[9]] = '\0';
;;;432    	sysCfg.parameter.server_pass[TopicInfo[10+TopicInfo[9]]] = '\0';
;;;433    	
;;;434    	if(  (0 == memcmp(sysCfg.parameter.server_ip,default_server_ip,sizeof(default_server_ip)))
;;;435    		&& (0 == strncmp((char *)sysCfg.parameter.server_user,default_server_user,strlen(default_server_user))) 
;;;436    		&& (0 == strncmp((char *)sysCfg.parameter.server_user,default_server_user,strlen((char *)sysCfg.parameter.server_user))) 
;;;437    		&& (0 == strncmp((char *)sysCfg.parameter.server_pass,default_server_pass,strlen(default_server_pass)))
;;;438    		&& (0 == strncmp((char *)sysCfg.parameter.server_pass,default_server_pass,strlen((char *)sysCfg.parameter.server_pass))))
;;;439    	{
;;;440    		sysCfg.parameter.config_hold_flag = 0xff;
;;;441    	}
;;;442    	else
;;;443    	{
;;;444    		sysCfg.parameter.config_hold_flag = CFG_HOLDER;
;;;445    	}
;;;446    	
;;;447    	#if APP_DEBUG   
;;;448    	printf("\r\nserver IP:");
;;;449    	for(uint8_t i=0;i<3;i++)
;;;450    	{
;;;451    		printf("%d",sysCfg.parameter.server_ip[i]);
;;;452    		printf(".");
;;;453    	}
;;;454    	printf("%d",sysCfg.parameter.server_ip[3]);
;;;455    	
;;;456    	printf("      PORT:%d",sysCfg.parameter.server_port);
;;;457    	printf("\r\n");
;;;458    	
;;;459    	printf("server username:%s\r\n",sysCfg.parameter.server_user);
;;;460    	printf("server password:%s\r\n",sysCfg.parameter.server_pass);
;;;461    	#endif
;;;462    	
;;;463    	FLASH_Unlock();
;;;464    	FLASH_ClearFlag(FLASH_FLAG_BSY | FLASH_FLAG_EOP | FLASH_FLAG_PGERR | FLASH_FLAG_WRPRTERR);	
;;;465      err_code = FLASH_ErasePage( SYSCFG_ADDR & 0xFFFFFFFF);     
;;;466    	if(err_code != 4)       /*擦除失败*/
;;;467    	{
;;;468    		#if APP_DEBUG
;;;469    		printf("erase flash error\r\n");
;;;470    		#endif	
;;;471    	}
;;;472    	
;;;473    	_ulFlashAddr = SYSCFG_ADDR;
;;;474    	
;;;475    	for (uint8_t i = 0; i < SYSCFG_DATA_LEN / 2; i++)
;;;476    	{	
;;;477    		usTemp = sysCfg.data[2 * i];
;;;478    		usTemp |= (sysCfg.data[2 * i + 1] << 8);
;;;479    		err_code = FLASH_ProgramHalfWord(_ulFlashAddr, usTemp);
;;;480    		if (err_code != FLASH_COMPLETE)
;;;481    		{
;;;482    			break;
;;;483    		}
;;;484    		
;;;485    		_ulFlashAddr += 2;
;;;486    	}
;;;487    	
;;;488    	if (err_code == FLASH_COMPLETE)
;;;489    	{
;;;490    		mqtt_disconnect();
;;;491    		vTaskDelay(1000);
;;;492    		NVIC_SystemReset();
;;;493    	}
;;;494    	
;;;495    	FLASH_Lock();
;;;496    	
;;;497    	#if APP_DEBUG
;;;498    	printf("write flash error\r\n");
;;;499    	#endif
;;;500    }
00001c  e8bd87f0          POP      {r4-r10,pc}
                  |L8.32|
000020  4850              LDR      r0,|L8.356|
000022  f8d41003          LDR      r1,[r4,#3]            ;425
000026  6001              STR      r1,[r0,#0]            ;425  ; sysCfg
000028  f8b41007          LDRH     r1,[r4,#7]            ;426
00002c  f8a0104a          STRH     r1,[r0,#0x4a]         ;426
000030  7a62              LDRB     r2,[r4,#9]            ;428
000032  f104010a          ADD      r1,r4,#0xa            ;428
000036  1d00              ADDS     r0,r0,#4              ;428
000038  f7fffffe          BL       __aeabi_memcpy
00003c  7a60              LDRB     r0,[r4,#9]            ;429
00003e  300a              ADDS     r0,r0,#0xa            ;429
000040  5c22              LDRB     r2,[r4,r0]            ;429
000042  7a60              LDRB     r0,[r4,#9]            ;429
000044  300b              ADDS     r0,r0,#0xb            ;429
000046  1901              ADDS     r1,r0,r4              ;429
000048  4846              LDR      r0,|L8.356|
00004a  3018              ADDS     r0,r0,#0x18           ;429
00004c  f7fffffe          BL       __aeabi_memcpy
000050  2100              MOVS     r1,#0                 ;431
000052  7a62              LDRB     r2,[r4,#9]            ;431
000054  4843              LDR      r0,|L8.356|
000056  1d00              ADDS     r0,r0,#4              ;431
000058  5481              STRB     r1,[r0,r2]            ;431
00005a  7a60              LDRB     r0,[r4,#9]            ;432
00005c  300a              ADDS     r0,r0,#0xa            ;432
00005e  5c22              LDRB     r2,[r4,r0]            ;432
000060  4840              LDR      r0,|L8.356|
000062  3018              ADDS     r0,r0,#0x18           ;432
000064  5481              STRB     r1,[r0,r2]            ;432
000066  2204              MOVS     r2,#4                 ;434
000068  493f              LDR      r1,|L8.360|
00006a  3818              SUBS     r0,r0,#0x18           ;434
00006c  f7fffffe          BL       memcmp
000070  bb90              CBNZ     r0,|L8.216|
000072  483e              LDR      r0,|L8.364|
000074  f7fffffe          BL       strlen
000078  4605              MOV      r5,r0                 ;435
00007a  462a              MOV      r2,r5                 ;435
00007c  493b              LDR      r1,|L8.364|
00007e  4839              LDR      r0,|L8.356|
000080  1d00              ADDS     r0,r0,#4              ;435
000082  f7fffffe          BL       strncmp
000086  bb38              CBNZ     r0,|L8.216|
000088  4836              LDR      r0,|L8.356|
00008a  1d00              ADDS     r0,r0,#4              ;436
00008c  f7fffffe          BL       strlen
000090  4605              MOV      r5,r0                 ;436
000092  462a              MOV      r2,r5                 ;436
000094  4935              LDR      r1,|L8.364|
000096  4833              LDR      r0,|L8.356|
000098  1d00              ADDS     r0,r0,#4              ;436
00009a  f7fffffe          BL       strncmp
00009e  b9d8              CBNZ     r0,|L8.216|
0000a0  4833              LDR      r0,|L8.368|
0000a2  f7fffffe          BL       strlen
0000a6  4605              MOV      r5,r0                 ;437
0000a8  462a              MOV      r2,r5                 ;437
0000aa  4931              LDR      r1,|L8.368|
0000ac  482d              LDR      r0,|L8.356|
0000ae  3018              ADDS     r0,r0,#0x18           ;437
0000b0  f7fffffe          BL       strncmp
0000b4  b980              CBNZ     r0,|L8.216|
0000b6  482b              LDR      r0,|L8.356|
0000b8  3018              ADDS     r0,r0,#0x18           ;438
0000ba  f7fffffe          BL       strlen
0000be  4605              MOV      r5,r0                 ;438
0000c0  462a              MOV      r2,r5                 ;438
0000c2  492b              LDR      r1,|L8.368|
0000c4  4827              LDR      r0,|L8.356|
0000c6  3018              ADDS     r0,r0,#0x18           ;438
0000c8  f7fffffe          BL       strncmp
0000cc  b920              CBNZ     r0,|L8.216|
0000ce  20ff              MOVS     r0,#0xff              ;440
0000d0  4924              LDR      r1,|L8.356|
0000d2  f881004c          STRB     r0,[r1,#0x4c]         ;440
0000d6  e004              B        |L8.226|
                  |L8.216|
0000d8  e7ff              B        |L8.218|
                  |L8.218|
0000da  20cf              MOVS     r0,#0xcf              ;444
0000dc  4921              LDR      r1,|L8.356|
0000de  f881004c          STRB     r0,[r1,#0x4c]         ;444
                  |L8.226|
0000e2  f7fffffe          BL       FLASH_Unlock
0000e6  2035              MOVS     r0,#0x35              ;464
0000e8  f7fffffe          BL       FLASH_ClearFlag
0000ec  4821              LDR      r0,|L8.372|
0000ee  f7fffffe          BL       FLASH_ErasePage
0000f2  4680              MOV      r8,r0                 ;465
0000f4  4e1f              LDR      r6,|L8.372|
0000f6  2500              MOVS     r5,#0                 ;475
0000f8  e013              B        |L8.290|
                  |L8.250|
0000fa  491a              LDR      r1,|L8.356|
0000fc  f8117015          LDRB     r7,[r1,r5,LSL #1]     ;477
000100  0068              LSLS     r0,r5,#1              ;478
000102  1c40              ADDS     r0,r0,#1              ;478
000104  5c08              LDRB     r0,[r1,r0]            ;478
000106  ea472700          ORR      r7,r7,r0,LSL #8       ;478
00010a  4639              MOV      r1,r7                 ;479
00010c  4630              MOV      r0,r6                 ;479
00010e  f7fffffe          BL       FLASH_ProgramHalfWord
000112  4680              MOV      r8,r0                 ;479
000114  f1b80f04          CMP      r8,#4                 ;480
000118  d000              BEQ      |L8.284|
00011a  e004              B        |L8.294|
                  |L8.284|
00011c  1cb6              ADDS     r6,r6,#2              ;485
00011e  1c68              ADDS     r0,r5,#1              ;475
000120  b2c5              UXTB     r5,r0                 ;475
                  |L8.290|
000122  2d2d              CMP      r5,#0x2d              ;475
000124  dbe9              BLT      |L8.250|
                  |L8.294|
000126  bf00              NOP                            ;482
000128  f1b80f04          CMP      r8,#4                 ;488
00012c  d116              BNE      |L8.348|
00012e  f7fffffe          BL       mqtt_disconnect
000132  f44f707a          MOV      r0,#0x3e8             ;491
000136  f7fffffe          BL       vTaskDelay
00013a  bf00              NOP                            ;492
00013c  f3bf8f4f          DSB                            ;492
000140  480d              LDR      r0,|L8.376|
000142  6800              LDR      r0,[r0,#0]            ;492
000144  f40060e0          AND      r0,r0,#0x700          ;492
000148  490c              LDR      r1,|L8.380|
00014a  4308              ORRS     r0,r0,r1              ;492
00014c  1d00              ADDS     r0,r0,#4              ;492
00014e  490a              LDR      r1,|L8.376|
000150  6008              STR      r0,[r1,#0]            ;492
000152  f3bf8f4f          DSB                            ;492
000156  bf00              NOP                            ;492
000158  bf00              NOP                            ;492
                  |L8.346|
00015a  e7fe              B        |L8.346|
                  |L8.348|
00015c  f7fffffe          BL       FLASH_Lock
000160  bf00              NOP      
000162  e75b              B        |L8.28|
;;;501    
                          ENDP

                  |L8.356|
                          DCD      sysCfg
                  |L8.360|
                          DCD      default_server_ip
                  |L8.364|
                          DCD      default_server_user
                  |L8.368|
                          DCD      default_server_pass
                  |L8.372|
                          DCD      0x0807fe00
                  |L8.376|
                          DCD      0xe000ed0c
                  |L8.380|
                          DCD      0x05fa0000

                          AREA ||i.app_palt_fifoinit||, CODE, READONLY, ALIGN=2

                  app_palt_fifoinit PROC
;;;573     */
;;;574    void app_palt_fifoinit(void)
000000  4805              LDR      r0,|L9.24|
;;;575    {
;;;576    	mes_fifo.pRxBuf=mes_rxbuf;
000002  4906              LDR      r1,|L9.28|
000004  6008              STR      r0,[r1,#0]  ; mes_fifo
;;;577    	mes_fifo.usRxBufSize=MES_RX_BUF_SIZE;
000006  f44f5020          MOV      r0,#0x2800
00000a  8088              STRH     r0,[r1,#4]
;;;578    	mes_fifo.usRxCount=0;
00000c  2000              MOVS     r0,#0
00000e  8148              STRH     r0,[r1,#0xa]
;;;579    	mes_fifo.usRxRead=0;
000010  8108              STRH     r0,[r1,#8]
;;;580    	mes_fifo.usRxWrite=0;
000012  80c8              STRH     r0,[r1,#6]
;;;581    }
000014  4770              BX       lr
;;;582    
                          ENDP

000016  0000              DCW      0x0000
                  |L9.24|
                          DCD      mes_rxbuf
                  |L9.28|
                          DCD      mes_fifo

                          AREA ||i.app_palt_reset||, CODE, READONLY, ALIGN=2

                  app_palt_reset PROC
;;;510    */
;;;511    static void app_palt_reset(uint8_t *TopicInfo , uint16_t len )
000000  b530              PUSH     {r4,r5,lr}
;;;512    {
000002  b087              SUB      sp,sp,#0x1c
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
;;;513    	uint16_t crcdata;
;;;514    	uint8_t deal_result;
;;;515    	uint8_t topicdata[18]={0x0e,0x00,0x4B};
000008  2214              MOVS     r2,#0x14
00000a  4923              LDR      r1,|L10.152|
00000c  4668              MOV      r0,sp
00000e  f7fffffe          BL       __aeabi_memcpy4
;;;516    
;;;517    	if(TopicInfo[3] != 0x01 || TopicInfo[2] != 0xB4)
000012  78e0              LDRB     r0,[r4,#3]
000014  2801              CMP      r0,#1
000016  d102              BNE      |L10.30|
000018  78a0              LDRB     r0,[r4,#2]
00001a  28b4              CMP      r0,#0xb4
00001c  d001              BEQ      |L10.34|
                  |L10.30|
;;;518    	{
;;;519    		return;
;;;520    	}
;;;521    	
;;;522    	deal_result = 0x01; 
;;;523      memset(&topicdata[3],0,2);                            /*网关设备ID低字节补齐*/
;;;524    	memcpy(&topicdata[5],sysCfg.parameter.client_mac,6);  /*网关ID*/
;;;525    	memcpy(&topicdata[11],&deal_result,1);  							/*处理成功*/
;;;526      memcpy(&topicdata[12],&TopicInfo[len-6],4);           /**/
;;;527    
;;;528    	/*CRC校验*/
;;;529    	crcdata=app_plat_usMBCRC16(topicdata,topicdata[1]*256+topicdata[0]+2);
;;;530    	memcpy(&topicdata[16],(uint8_t *)&crcdata,2);  
;;;531    	
;;;532    	/*上报数据*/
;;;533      if(mqtt_publish( SOCK_TCPS, RESETACK_TOPIC , (char *)topicdata , topicdata[1]*256+topicdata[0]+4))
;;;534    	{
;;;535    		
;;;536    	}	
;;;537    	
;;;538    	vTaskDelay(1000);
;;;539    	
;;;540    	POW_RESET();
;;;541    }
00001e  b007              ADD      sp,sp,#0x1c
000020  bd30              POP      {r4,r5,pc}
                  |L10.34|
000022  2001              MOVS     r0,#1                 ;522
000024  9005              STR      r0,[sp,#0x14]         ;522
000026  2000              MOVS     r0,#0                 ;523
000028  f8ad0003          STRH     r0,[sp,#3]            ;523
00002c  481b              LDR      r0,|L10.156|
00002e  6801              LDR      r1,[r0,#0]            ;524  ; sysCfg
000030  f8cd1005          STR      r1,[sp,#5]            ;524
000034  8880              LDRH     r0,[r0,#4]            ;524  ; sysCfg
000036  f8ad0009          STRH     r0,[sp,#9]            ;524
00003a  f89d0014          LDRB     r0,[sp,#0x14]         ;525
00003e  f88d000b          STRB     r0,[sp,#0xb]          ;525
000042  1fa8              SUBS     r0,r5,#6              ;526
000044  4420              ADD      r0,r0,r4              ;526
000046  6800              LDR      r0,[r0,#0]            ;526
000048  9003              STR      r0,[sp,#0xc]          ;526
00004a  f89d2000          LDRB     r2,[sp,#0]            ;529
00004e  f89d0001          LDRB     r0,[sp,#1]            ;529
000052  eb022000          ADD      r0,r2,r0,LSL #8       ;529
000056  1c80              ADDS     r0,r0,#2              ;529
000058  b281              UXTH     r1,r0                 ;529
00005a  4668              MOV      r0,sp                 ;529
00005c  f7fffffe          BL       app_plat_usMBCRC16
000060  9006              STR      r0,[sp,#0x18]         ;529
000062  f8bd0018          LDRH     r0,[sp,#0x18]         ;530
000066  f8ad0010          STRH     r0,[sp,#0x10]         ;530
00006a  f89d1000          LDRB     r1,[sp,#0]            ;533
00006e  f89d0001          LDRB     r0,[sp,#1]            ;533
000072  eb012000          ADD      r0,r1,r0,LSL #8       ;533
000076  1d03              ADDS     r3,r0,#4              ;533
000078  466a              MOV      r2,sp                 ;533
00007a  a109              ADR      r1,|L10.160|
00007c  2000              MOVS     r0,#0                 ;533
00007e  f7fffffe          BL       mqtt_publish
000082  f44f707a          MOV      r0,#0x3e8             ;538
000086  f7fffffe          BL       vTaskDelay
00008a  f44f7180          MOV      r1,#0x100             ;540
00008e  480a              LDR      r0,|L10.184|
000090  f7fffffe          BL       GPIO_SetBits
000094  bf00              NOP      
000096  e7c2              B        |L10.30|
;;;542    
                          ENDP

                  |L10.152|
                          DCD      ||.constdata||+0x21c
                  |L10.156|
                          DCD      sysCfg+0xda
                  |L10.160|
0000a0  2f696f74          DCB      "/iot_gateway/reset/ack",0
0000a4  5f676174
0000a8  65776179
0000ac  2f726573
0000b0  65742f61
0000b4  636b00  
0000b7  00                DCB      0
                  |L10.184|
                          DCD      0x40010c00

                          AREA ||i.app_palt_userinfoset||, CODE, READONLY, ALIGN=2

                  app_palt_userinfoset PROC
;;;341    */
;;;342    static void app_palt_userinfoset(uint8_t *TopicInfo , uint16_t len )
000000  b530              PUSH     {r4,r5,lr}
;;;343    {
000002  f5ad7d09          SUB      sp,sp,#0x224
000006  4604              MOV      r4,r0
000008  460d              MOV      r5,r1
;;;344    	uint16_t crcdata;
;;;345    	uint16_t userlen;
;;;346      uint8_t userinfo[512]={0};
00000a  f44f7100          MOV      r1,#0x200
00000e  a807              ADD      r0,sp,#0x1c
000010  f7fffffe          BL       __aeabi_memclr4
;;;347    	uint8_t ask[26]={0x16,0x00,0x6a};
000014  2116              MOVS     r1,#0x16
000016  a801              ADD      r0,sp,#4
000018  f7fffffe          BL       __aeabi_memclr4
00001c  484e              LDR      r0,|L11.344|
00001e  6800              LDR      r0,[r0,#0]  ; <Data3>
000020  9000              STR      r0,[sp,#0]
;;;348    	
;;;349    	if(len > 512)
000022  f5b57f00          CMP      r5,#0x200
000026  dd02              BLE      |L11.46|
                  |L11.40|
;;;350    	{
;;;351    		return;
;;;352    	}
;;;353    	
;;;354    	userlen=len-33+1;                        									/*用户信息长度*/
;;;355    	memcpy( userinfo , TopicInfo , 27 );
;;;356    	memcpy( &userinfo[27] , (uint8_t *)&userlen , 2 );
;;;357    	userinfo[29]=1;                        						  			/*标志位*/
;;;358    	memcpy( &userinfo[30] , &TopicInfo[27] , len-33 );
;;;359    	crcdata=app_plat_usMBCRC16( &userinfo[27] , len-33+3 );
;;;360    	memcpy( &userinfo[30+len-33], (uint8_t *)&crcdata , 2 );  
;;;361    	memcpy( &userinfo[32+userlen], &TopicInfo[len-6] , 4 );   /*原信息中的流水号*/
;;;362      userlen=TopicInfo[0]+TopicInfo[1]*256+5;
;;;363    	memcpy( userinfo , (uint8_t *)&userlen , 2 );
;;;364    	
;;;365    	/*CRC校验*/
;;;366    	crcdata=app_plat_usMBCRC16(userinfo,userinfo[1]*256+userinfo[0]+2);
;;;367    	memcpy(&userinfo[userinfo[1]*256+userinfo[0]+2],(uint8_t *)&crcdata,2);  
;;;368    	
;;;369      #if 0
;;;370    	printf("topic data:");
;;;371    	for(i=0;i<len;i++)
;;;372    	{
;;;373    		printf("%02x ",TopicInfo[i]);
;;;374    	}
;;;375    	printf("\r\n");
;;;376    	printf("after deal:");
;;;377    	for(i=0;i<userinfo[1]*256+userinfo[0]+4;i++)
;;;378    	{
;;;379    		printf("%02x ",userinfo[i]);
;;;380    	}
;;;381    	printf("\r\n");
;;;382    	#endif
;;;383    	
;;;384    	memcpy(&ask[3],&TopicInfo[11],8);               /*手环MAC*/
;;;385    	memcpy(&ask[11],&TopicInfo[19],8);
;;;386    	ask[19]=0x03;        														
;;;387    	/*手环收到*/
;;;388    	memcpy(&ask[20],&TopicInfo[len-6],4);
;;;389    		
;;;390    	/*CRC校验*/
;;;391    	crcdata=app_plat_usMBCRC16(ask,ask[1]*256+ask[0]+2);
;;;392    	memcpy(&ask[24],(uint8_t *)&crcdata,2);  
;;;393    	
;;;394    	/*返回数据*/
;;;395      mqtt_publish( sysCfg.parameter.data_socket , USERINFO_TOPIC , (char *)ask , ask[1]*256+ask[0]+4);
;;;396    	
;;;397    	app_palt_WriteFifoData(userinfo,userinfo[1]*256+userinfo[0]+4);
;;;398    }
000028  f50d7d09          ADD      sp,sp,#0x224
00002c  bd30              POP      {r4,r5,pc}
                  |L11.46|
00002e  f1a50020          SUB      r0,r5,#0x20           ;354
000032  b280              UXTH     r0,r0                 ;354
000034  9087              STR      r0,[sp,#0x21c]        ;354
000036  221b              MOVS     r2,#0x1b              ;355
000038  4621              MOV      r1,r4                 ;355
00003a  a807              ADD      r0,sp,#0x1c           ;355
00003c  f7fffffe          BL       __aeabi_memcpy
000040  f8bd021c          LDRH     r0,[sp,#0x21c]        ;356
000044  f8ad0037          STRH     r0,[sp,#0x37]         ;356
000048  2001              MOVS     r0,#1                 ;357
00004a  f88d0039          STRB     r0,[sp,#0x39]         ;357
00004e  f1a50221          SUB      r2,r5,#0x21           ;358
000052  f104011b          ADD      r1,r4,#0x1b           ;358
000056  f10d003a          ADD      r0,sp,#0x3a           ;358
00005a  f7fffffe          BL       __aeabi_memcpy
00005e  f1a5001e          SUB      r0,r5,#0x1e           ;359
000062  b281              UXTH     r1,r0                 ;359
000064  f10d0037          ADD      r0,sp,#0x37           ;359
000068  f7fffffe          BL       app_plat_usMBCRC16
00006c  9088              STR      r0,[sp,#0x220]        ;359
00006e  1ee8              SUBS     r0,r5,#3              ;360
000070  a907              ADD      r1,sp,#0x1c           ;360
000072  4408              ADD      r0,r0,r1              ;360
000074  f8bd1220          LDRH     r1,[sp,#0x220]        ;360
000078  8001              STRH     r1,[r0,#0]            ;360
00007a  f8bd021c          LDRH     r0,[sp,#0x21c]        ;361
00007e  3020              ADDS     r0,r0,#0x20           ;361
000080  a907              ADD      r1,sp,#0x1c           ;361
000082  4401              ADD      r1,r1,r0              ;361
000084  1fa8              SUBS     r0,r5,#6              ;361
000086  4420              ADD      r0,r0,r4              ;361
000088  6800              LDR      r0,[r0,#0]            ;361
00008a  6008              STR      r0,[r1,#0]            ;361
00008c  7821              LDRB     r1,[r4,#0]            ;362
00008e  7860              LDRB     r0,[r4,#1]            ;362
000090  eb012000          ADD      r0,r1,r0,LSL #8       ;362
000094  1d40              ADDS     r0,r0,#5              ;362
000096  b280              UXTH     r0,r0                 ;362
000098  9087              STR      r0,[sp,#0x21c]        ;362
00009a  f8bd021c          LDRH     r0,[sp,#0x21c]        ;363
00009e  f8ad001c          STRH     r0,[sp,#0x1c]         ;363
0000a2  f89d201c          LDRB     r2,[sp,#0x1c]         ;366
0000a6  f89d001d          LDRB     r0,[sp,#0x1d]         ;366
0000aa  eb022000          ADD      r0,r2,r0,LSL #8       ;366
0000ae  1c80              ADDS     r0,r0,#2              ;366
0000b0  b281              UXTH     r1,r0                 ;366
0000b2  a807              ADD      r0,sp,#0x1c           ;366
0000b4  f7fffffe          BL       app_plat_usMBCRC16
0000b8  9088              STR      r0,[sp,#0x220]        ;366
0000ba  f89d101c          LDRB     r1,[sp,#0x1c]         ;367
0000be  f89d001d          LDRB     r0,[sp,#0x1d]         ;367
0000c2  eb012000          ADD      r0,r1,r0,LSL #8       ;367
0000c6  1c80              ADDS     r0,r0,#2              ;367
0000c8  a907              ADD      r1,sp,#0x1c           ;367
0000ca  4408              ADD      r0,r0,r1              ;367
0000cc  f8bd1220          LDRH     r1,[sp,#0x220]        ;367
0000d0  8001              STRH     r1,[r0,#0]            ;367
0000d2  f8d4000b          LDR      r0,[r4,#0xb]          ;384
0000d6  f8cd0003          STR      r0,[sp,#3]            ;384
0000da  f8d4000f          LDR      r0,[r4,#0xf]          ;384
0000de  f8cd0007          STR      r0,[sp,#7]            ;384
0000e2  f8d40013          LDR      r0,[r4,#0x13]         ;385
0000e6  f8cd000b          STR      r0,[sp,#0xb]          ;385
0000ea  f8d40017          LDR      r0,[r4,#0x17]         ;385
0000ee  f8cd000f          STR      r0,[sp,#0xf]          ;385
0000f2  2003              MOVS     r0,#3                 ;386
0000f4  f88d0013          STRB     r0,[sp,#0x13]         ;386
0000f8  1fa8              SUBS     r0,r5,#6              ;388
0000fa  4420              ADD      r0,r0,r4              ;388
0000fc  6800              LDR      r0,[r0,#0]            ;388
0000fe  9005              STR      r0,[sp,#0x14]         ;388
000100  f89d2000          LDRB     r2,[sp,#0]            ;391
000104  f89d0001          LDRB     r0,[sp,#1]            ;391
000108  eb022000          ADD      r0,r2,r0,LSL #8       ;391
00010c  1c80              ADDS     r0,r0,#2              ;391
00010e  b281              UXTH     r1,r0                 ;391
000110  4668              MOV      r0,sp                 ;391
000112  f7fffffe          BL       app_plat_usMBCRC16
000116  9088              STR      r0,[sp,#0x220]        ;391
000118  f8bd0220          LDRH     r0,[sp,#0x220]        ;392
00011c  f8ad0018          STRH     r0,[sp,#0x18]         ;392
000120  f89d2000          LDRB     r2,[sp,#0]            ;395
000124  f89d1001          LDRB     r1,[sp,#1]            ;395
000128  eb022101          ADD      r1,r2,r1,LSL #8       ;395
00012c  1d0b              ADDS     r3,r1,#4              ;395
00012e  490b              LDR      r1,|L11.348|
000130  f89100c0          LDRB     r0,[r1,#0xc0]         ;395  ; sysCfg
000134  466a              MOV      r2,sp                 ;395
000136  a10a              ADR      r1,|L11.352|
000138  f7fffffe          BL       mqtt_publish
00013c  f89d201c          LDRB     r2,[sp,#0x1c]         ;397
000140  f89d001d          LDRB     r0,[sp,#0x1d]         ;397
000144  eb022000          ADD      r0,r2,r0,LSL #8       ;397
000148  1d00              ADDS     r0,r0,#4              ;397
00014a  b2c1              UXTB     r1,r0                 ;397
00014c  a807              ADD      r0,sp,#0x1c           ;397
00014e  f7fffffe          BL       app_palt_WriteFifoData
000152  bf00              NOP      
000154  e768              B        |L11.40|
;;;399    
                          ENDP

000156  0000              DCW      0x0000
                  |L11.344|
                          DCD      ||.constdata||+0x218
                  |L11.348|
                          DCD      sysCfg
                  |L11.352|
000160  2f696f74          DCB      "/iot_gateway/user_info/ack",0
000164  5f676174
000168  65776179
00016c  2f757365
000170  725f696e
000174  666f2f61
000178  636b00  
00017b  00                DCB      0

                          AREA ||i.app_plat_BraceletInfoPublish||, CODE, READONLY, ALIGN=2

                  app_plat_BraceletInfoPublish PROC
;;;976    */
;;;977    void app_plat_BraceletInfoPublish(uint8_t *bracelet,uint8_t braceletelectricity)
000000  b513              PUSH     {r0,r1,r4,lr}
;;;978    {
000002  b08a              SUB      sp,sp,#0x28
000004  4604              MOV      r4,r0
;;;979    	uint16_t crcdata;
;;;980    	static uint32_t BraceletInfoSerialNumber=0;
;;;981    	uint8_t beacon_warn_para[2] = {0x01};
000006  482a              LDR      r0,|L12.176|
000008  6800              LDR      r0,[r0,#0]  ; <Data14>
00000a  9008              STR      r0,[sp,#0x20]
;;;982    	uint8_t topicdata[18]={0x0e,0x00,0x54};
00000c  2214              MOVS     r2,#0x14
00000e  4928              LDR      r1,|L12.176|
000010  1d09              ADDS     r1,r1,#4
000012  a803              ADD      r0,sp,#0xc
000014  f7fffffe          BL       __aeabi_memcpy4
;;;983    
;;;984    	topicdata[2]=BASEINFOR;                              /*Msg_id*/	
000018  2054              MOVS     r0,#0x54
00001a  f88d000e          STRB     r0,[sp,#0xe]
;;;985    	
;;;986    	memcpy(&topicdata[3],bracelet,6);						         /*手环MAC*/
00001e  6820              LDR      r0,[r4,#0]
000020  f8cd000f          STR      r0,[sp,#0xf]
000024  88a0              LDRH     r0,[r4,#4]
000026  f8ad0013          STRH     r0,[sp,#0x13]
;;;987    	memset(&topicdata[9],0,2);          								 /*手环MAC低字节补齐*/
00002a  2000              MOVS     r0,#0
00002c  f8ad0015          STRH     r0,[sp,#0x15]
;;;988    	memcpy(&topicdata[11],&braceletelectricity,1);       /*手环电量*/
000030  f89d002c          LDRB     r0,[sp,#0x2c]
000034  f88d0017          STRB     r0,[sp,#0x17]
;;;989    	memcpy(&topicdata[12],(uint8_t *)&BraceletInfoSerialNumber,4);  /*流水号*/
000038  481e              LDR      r0,|L12.180|
00003a  6800              LDR      r0,[r0,#0]  ; BraceletInfoSerialNumber
00003c  9006              STR      r0,[sp,#0x18]
;;;990    	BraceletInfoSerialNumber++;
00003e  481d              LDR      r0,|L12.180|
000040  6800              LDR      r0,[r0,#0]  ; BraceletInfoSerialNumber
000042  1c40              ADDS     r0,r0,#1
000044  491b              LDR      r1,|L12.180|
000046  6008              STR      r0,[r1,#0]  ; BraceletInfoSerialNumber
;;;991    	
;;;992    	/*CRC校验*/
;;;993    	crcdata=app_plat_usMBCRC16(topicdata,topicdata[1]*256+topicdata[0]+2);
000048  f89d200c          LDRB     r2,[sp,#0xc]
00004c  f89d000d          LDRB     r0,[sp,#0xd]
000050  eb022000          ADD      r0,r2,r0,LSL #8
000054  1c80              ADDS     r0,r0,#2
000056  b281              UXTH     r1,r0
000058  a803              ADD      r0,sp,#0xc
00005a  f7fffffe          BL       app_plat_usMBCRC16
00005e  9009              STR      r0,[sp,#0x24]
;;;994    	memcpy(&topicdata[16],(uint8_t *)&crcdata,2); 
000060  f8bd0024          LDRH     r0,[sp,#0x24]
000064  f8ad001c          STRH     r0,[sp,#0x1c]
;;;995    	
;;;996    	/*上报数据*/	
;;;997      if(mqtt_publish( sysCfg.parameter.data_socket, BASEINFOR_TOPIC , (char *)topicdata , topicdata[1]*256+topicdata[0]+4))
000068  f89d200c          LDRB     r2,[sp,#0xc]
00006c  f89d100d          LDRB     r1,[sp,#0xd]
000070  eb022101          ADD      r1,r2,r1,LSL #8
000074  1d0b              ADDS     r3,r1,#4
000076  4910              LDR      r1,|L12.184|
000078  f89100c0          LDRB     r0,[r1,#0xc0]  ; sysCfg
00007c  aa03              ADD      r2,sp,#0xc
00007e  a10f              ADR      r1,|L12.188|
000080  f7fffffe          BL       mqtt_publish
;;;998    	{
;;;999    	
;;;1000   	}
;;;1001   	
;;;1002   	if(braceletelectricity < BRACELET_WARN_ELECT)
000084  f89d002c          LDRB     r0,[sp,#0x2c]
000088  2805              CMP      r0,#5
00008a  da0f              BGE      |L12.172|
;;;1003   	{
;;;1004   		beacon_warn_para[1] = braceletelectricity;
00008c  f89d002c          LDRB     r0,[sp,#0x2c]
000090  f88d0021          STRB     r0,[sp,#0x21]
;;;1005   		ErrorLog(BRACELET,&topicdata[3],WARN,ELECT_WARN,1,beacon_warn_para); /*设备告警*/
000094  a808              ADD      r0,sp,#0x20
000096  2101              MOVS     r1,#1
000098  f44f73fb          MOV      r3,#0x1f6
00009c  2202              MOVS     r2,#2
00009e  e9cd1000          STRD     r1,r0,[sp,#0]
0000a2  f10d010f          ADD      r1,sp,#0xf
0000a6  4610              MOV      r0,r2
0000a8  f7fffffe          BL       ErrorLog
                  |L12.172|
;;;1006   	}
;;;1007   }
0000ac  b00c              ADD      sp,sp,#0x30
0000ae  bd10              POP      {r4,pc}
;;;1008   
                          ENDP

                  |L12.176|
                          DCD      ||.constdata||+0x24c
                  |L12.180|
                          DCD      BraceletInfoSerialNumber
                  |L12.184|
                          DCD      sysCfg
                  |L12.188|
0000bc  2f627261          DCB      "/bracelet/report/bracelet_info",0
0000c0  63656c65
0000c4  742f7265
0000c8  706f7274
0000cc  2f627261
0000d0  63656c65
0000d4  745f696e
0000d8  666f00  
0000db  00                DCB      0

                          AREA ||i.app_plat_GetRespone||, CODE, READONLY, ALIGN=2

                  app_plat_GetRespone PROC
;;;230    */
;;;231    static ErrorStatus app_plat_GetRespone(uint8_t *TopicInfo,char *topic,app_plat_topic* pRespone)
000000  b570              PUSH     {r4-r6,lr}
;;;232    { 
000002  4606              MOV      r6,r0
000004  460d              MOV      r5,r1
000006  4614              MOV      r4,r2
;;;233    	#if 0
;;;234    	printf("Receive topic:%s\r\n",topic);
;;;235    	#endif
;;;236    	
;;;237       /*下发消息主题*/
;;;238    	if( NULL!=strstr( topic, "/notice/sms"))
000008  a124              ADR      r1,|L13.156|
00000a  4628              MOV      r0,r5
00000c  f7fffffe          BL       strstr
000010  b118              CBZ      r0,|L13.26|
;;;239    	{			
;;;240        *pRespone = PLAT_RESPONSE_SEND_MESSAGE;
000012  2000              MOVS     r0,#0
000014  7020              STRB     r0,[r4,#0]
;;;241    		return SUCCESS;
000016  2001              MOVS     r0,#1
                  |L13.24|
;;;242    	}
;;;243    
;;;244    	/*考勤信标下发*/
;;;245    	else if( strstr( topic, "/management/beacon"))
;;;246    	{
;;;247    		*pRespone = PLAT_RESPONSE_BEAMANAGEMENT;
;;;248    		return SUCCESS;
;;;249    	}
;;;250    	
;;;251    	/*蓝牙设备升级*/
;;;252    	else if( strstr( topic, "/update/ble"))
;;;253    	{
;;;254    		*pRespone = PLAT_RESPONSE_BLEUPDATE;
;;;255    		return SUCCESS;
;;;256    	}
;;;257    
;;;258    	/*网关设备升级*/
;;;259    	else if( strstr( topic, "/update/gateway"))
;;;260    	{
;;;261    		*pRespone = PLAT_RESPONSE_DEVUPDATE;
;;;262    		return SUCCESS;
;;;263    	}
;;;264    		/*蓝牙手环升级*/
;;;265    	else if( strstr( topic, "/update/bracelet"))
;;;266    	{
;;;267    		*pRespone = PLAT_RESPONSE_BRAUPDATE;
;;;268    		return SUCCESS;
;;;269    	}
;;;270    	
;;;271    	/*用户信息*/
;;;272    	else if( strstr( topic, "/user_info/set"))
;;;273    	{
;;;274    		*pRespone = PLAT_RESPONSE_USERINFOSET;
;;;275    		return SUCCESS;
;;;276    	}
;;;277    
;;;278    	/*配置设备联网参数*/
;;;279    	else if( strstr( topic, "/devcfgpara/set"))
;;;280    	{
;;;281    		*pRespone = PLAT_RESPONSE_DEVCFGSET;
;;;282    		return SUCCESS;
;;;283    	}
;;;284    
;;;285    	/*蓝牙网关硬件复位*/
;;;286    	else if( strstr( topic, "/reset/gateway"))
;;;287    	{
;;;288    		*pRespone = PLAT_RESPONSE_RESET;
;;;289    		return SUCCESS;
;;;290    	}
;;;291    	
;;;292    	else
;;;293    	{
;;;294    		return ERROR;
;;;295    	}
;;;296    }
000018  bd70              POP      {r4-r6,pc}
                  |L13.26|
00001a  a123              ADR      r1,|L13.168|
00001c  4628              MOV      r0,r5                 ;245
00001e  f7fffffe          BL       strstr
000022  b118              CBZ      r0,|L13.44|
000024  2002              MOVS     r0,#2                 ;247
000026  7020              STRB     r0,[r4,#0]            ;247
000028  2001              MOVS     r0,#1                 ;248
00002a  e7f5              B        |L13.24|
                  |L13.44|
00002c  a123              ADR      r1,|L13.188|
00002e  4628              MOV      r0,r5                 ;252
000030  f7fffffe          BL       strstr
000034  b118              CBZ      r0,|L13.62|
000036  2005              MOVS     r0,#5                 ;254
000038  7020              STRB     r0,[r4,#0]            ;254
00003a  2001              MOVS     r0,#1                 ;255
00003c  e7ec              B        |L13.24|
                  |L13.62|
00003e  a122              ADR      r1,|L13.200|
000040  4628              MOV      r0,r5                 ;259
000042  f7fffffe          BL       strstr
000046  b118              CBZ      r0,|L13.80|
000048  2004              MOVS     r0,#4                 ;261
00004a  7020              STRB     r0,[r4,#0]            ;261
00004c  2001              MOVS     r0,#1                 ;262
00004e  e7e3              B        |L13.24|
                  |L13.80|
000050  a121              ADR      r1,|L13.216|
000052  4628              MOV      r0,r5                 ;265
000054  f7fffffe          BL       strstr
000058  b118              CBZ      r0,|L13.98|
00005a  2003              MOVS     r0,#3                 ;267
00005c  7020              STRB     r0,[r4,#0]            ;267
00005e  2001              MOVS     r0,#1                 ;268
000060  e7da              B        |L13.24|
                  |L13.98|
000062  a122              ADR      r1,|L13.236|
000064  4628              MOV      r0,r5                 ;272
000066  f7fffffe          BL       strstr
00006a  b118              CBZ      r0,|L13.116|
00006c  2006              MOVS     r0,#6                 ;274
00006e  7020              STRB     r0,[r4,#0]            ;274
000070  2001              MOVS     r0,#1                 ;275
000072  e7d1              B        |L13.24|
                  |L13.116|
000074  a121              ADR      r1,|L13.252|
000076  4628              MOV      r0,r5                 ;279
000078  f7fffffe          BL       strstr
00007c  b118              CBZ      r0,|L13.134|
00007e  2007              MOVS     r0,#7                 ;281
000080  7020              STRB     r0,[r4,#0]            ;281
000082  2001              MOVS     r0,#1                 ;282
000084  e7c8              B        |L13.24|
                  |L13.134|
000086  a121              ADR      r1,|L13.268|
000088  4628              MOV      r0,r5                 ;286
00008a  f7fffffe          BL       strstr
00008e  b118              CBZ      r0,|L13.152|
000090  2008              MOVS     r0,#8                 ;288
000092  7020              STRB     r0,[r4,#0]            ;288
000094  2001              MOVS     r0,#1                 ;289
000096  e7bf              B        |L13.24|
                  |L13.152|
000098  2000              MOVS     r0,#0                 ;294
00009a  e7bd              B        |L13.24|
;;;297    
                          ENDP

                  |L13.156|
00009c  2f6e6f74          DCB      "/notice/sms",0
0000a0  6963652f
0000a4  736d7300
                  |L13.168|
0000a8  2f6d616e          DCB      "/management/beacon",0
0000ac  6167656d
0000b0  656e742f
0000b4  62656163
0000b8  6f6e00  
0000bb  00                DCB      0
                  |L13.188|
0000bc  2f757064          DCB      "/update/ble",0
0000c0  6174652f
0000c4  626c6500
                  |L13.200|
0000c8  2f757064          DCB      "/update/gateway",0
0000cc  6174652f
0000d0  67617465
0000d4  77617900
                  |L13.216|
0000d8  2f757064          DCB      "/update/bracelet",0
0000dc  6174652f
0000e0  62726163
0000e4  656c6574
0000e8  00      
0000e9  00                DCB      0
0000ea  00                DCB      0
0000eb  00                DCB      0
                  |L13.236|
0000ec  2f757365          DCB      "/user_info/set",0
0000f0  725f696e
0000f4  666f2f73
0000f8  657400  
0000fb  00                DCB      0
                  |L13.252|
0000fc  2f646576          DCB      "/devcfgpara/set",0
000100  63666770
000104  6172612f
000108  73657400
                  |L13.268|
00010c  2f726573          DCB      "/reset/gateway",0
000110  65742f67
000114  61746577
000118  617900  
00011b  00                DCB      0

                          AREA ||i.app_plat_HeartratePublish||, CODE, READONLY, ALIGN=2

                  app_plat_HeartratePublish PROC
;;;836    */
;;;837    void app_plat_HeartratePublish(uint8_t *bracelet,uint8_t heartrate)
000000  b513              PUSH     {r0,r1,r4,lr}
;;;838    {
000002  b08a              SUB      sp,sp,#0x28
000004  4604              MOV      r4,r0
;;;839    	uint16_t crcdata;
;;;840    	static uint32_t HealthSerialNumber=0;
;;;841    	uint8_t topicdata[25]={0x15,0x00,0x52};
000006  2115              MOVS     r1,#0x15
000008  a803              ADD      r0,sp,#0xc
00000a  f7fffffe          BL       __aeabi_memclr4
00000e  4824              LDR      r0,|L14.160|
000010  6800              LDR      r0,[r0,#0]  ; <Data11>
000012  9002              STR      r0,[sp,#8]
;;;842    	
;;;843    	DateTime nowtime;
;;;844      get_ntp_time(&nowtime);
000014  4668              MOV      r0,sp
000016  f7fffffe          BL       get_ntp_time
;;;845    	
;;;846    	topicdata[2]=HEALTH;                          /*Msg_id*/
00001a  2052              MOVS     r0,#0x52
00001c  f88d000a          STRB     r0,[sp,#0xa]
;;;847    	
;;;848    	memcpy(&topicdata[3],bracelet,6);			        /*手环MAC*/
000020  6820              LDR      r0,[r4,#0]
000022  f8cd000b          STR      r0,[sp,#0xb]
000026  88a0              LDRH     r0,[r4,#4]
000028  f8ad000f          STRH     r0,[sp,#0xf]
;;;849    	memset(&topicdata[9],0,2);          				  /*手环MAC低字节补齐*/
00002c  2000              MOVS     r0,#0
00002e  f8ad0011          STRH     r0,[sp,#0x11]
;;;850    	memcpy(&topicdata[11],&heartrate,1);          /*心率数据*/
000032  f89d002c          LDRB     r0,[sp,#0x2c]
000036  f88d0013          STRB     r0,[sp,#0x13]
;;;851    	memcpy(&topicdata[12],nowtime.data,7);        /*时间戳*/
00003a  9800              LDR      r0,[sp,#0]
00003c  9005              STR      r0,[sp,#0x14]
00003e  f8bd0004          LDRH     r0,[sp,#4]
000042  f8ad0018          STRH     r0,[sp,#0x18]
000046  f89d0006          LDRB     r0,[sp,#6]
00004a  f88d001a          STRB     r0,[sp,#0x1a]
;;;852    	memcpy(&topicdata[19],(uint8_t *)&HealthSerialNumber,4); /*流水号*/
00004e  4815              LDR      r0,|L14.164|
000050  6800              LDR      r0,[r0,#0]  ; HealthSerialNumber
000052  f8cd001b          STR      r0,[sp,#0x1b]
;;;853    	HealthSerialNumber++;
000056  4813              LDR      r0,|L14.164|
000058  6800              LDR      r0,[r0,#0]  ; HealthSerialNumber
00005a  1c40              ADDS     r0,r0,#1
00005c  4911              LDR      r1,|L14.164|
00005e  6008              STR      r0,[r1,#0]  ; HealthSerialNumber
;;;854    	
;;;855    	/*CRC校验*/
;;;856    	crcdata=app_plat_usMBCRC16(topicdata,topicdata[1]*256+topicdata[0]+2);
000060  f89d2008          LDRB     r2,[sp,#8]
000064  f89d0009          LDRB     r0,[sp,#9]
000068  eb022000          ADD      r0,r2,r0,LSL #8
00006c  1c80              ADDS     r0,r0,#2
00006e  b281              UXTH     r1,r0
000070  a802              ADD      r0,sp,#8
000072  f7fffffe          BL       app_plat_usMBCRC16
000076  9009              STR      r0,[sp,#0x24]
;;;857    	memcpy(&topicdata[23],(uint8_t *)&crcdata,2);  
000078  f8bd0024          LDRH     r0,[sp,#0x24]
00007c  f8ad001f          STRH     r0,[sp,#0x1f]
;;;858    	
;;;859    	/*上报数据*/
;;;860      if(mqtt_publish( sysCfg.parameter.data_socket, HEALTH_TOPIC , (char *)topicdata , topicdata[1]*256+topicdata[0]+4))
000080  f89d2008          LDRB     r2,[sp,#8]
000084  f89d1009          LDRB     r1,[sp,#9]
000088  eb022101          ADD      r1,r2,r1,LSL #8
00008c  1d0b              ADDS     r3,r1,#4
00008e  4906              LDR      r1,|L14.168|
000090  f89100c0          LDRB     r0,[r1,#0xc0]  ; sysCfg
000094  aa02              ADD      r2,sp,#8
000096  a105              ADR      r1,|L14.172|
000098  f7fffffe          BL       mqtt_publish
;;;861    	{
;;;862    
;;;863    	}
;;;864    }
00009c  b00c              ADD      sp,sp,#0x30
00009e  bd10              POP      {r4,pc}
;;;865    
                          ENDP

                  |L14.160|
                          DCD      ||.constdata||+0x240
                  |L14.164|
                          DCD      HealthSerialNumber
                  |L14.168|
                          DCD      sysCfg
                  |L14.172|
0000ac  2f627261          DCB      "/bracelet/report/heartrate_data",0
0000b0  63656c65
0000b4  742f7265
0000b8  706f7274
0000bc  2f686561
0000c0  72747261
0000c4  74655f64
0000c8  61746100

                          AREA ||i.app_plat_HistorySportDataPublish||, CODE, READONLY, ALIGN=2

                  app_plat_HistorySportDataPublish PROC
;;;719    */
;;;720    void app_plat_HistorySportDataPublish(uint8_t *bracelet,uint8_t *sportdata)
000000  b530              PUSH     {r4,r5,lr}
;;;721    {
000002  b08b              SUB      sp,sp,#0x2c
000004  4605              MOV      r5,r0
000006  460c              MOV      r4,r1
;;;722    	uint16_t crcdata;
;;;723    	DateTime nowtime;
;;;724    	static uint32_t HistorySportSerialNumber=0;
;;;725    	uint8_t topicdata[30]={0x1A,0x00,0x51};
000008  211a              MOVS     r1,#0x1a
00000a  a801              ADD      r0,sp,#4
00000c  f7fffffe          BL       __aeabi_memclr4
000010  4826              LDR      r0,|L15.172|
000012  6800              LDR      r0,[r0,#0]  ; <Data8>
000014  9000              STR      r0,[sp,#0]
;;;726    		
;;;727      get_ntp_time(&nowtime);
000016  a808              ADD      r0,sp,#0x20
000018  f7fffffe          BL       get_ntp_time
;;;728    	
;;;729    	topicdata[2]=SPORT;               				   /*Msg_id*/
00001c  2051              MOVS     r0,#0x51
00001e  f88d0002          STRB     r0,[sp,#2]
;;;730    	
;;;731    	memcpy(&topicdata[3],bracelet,6);			       /*手环MAC*/
000022  6828              LDR      r0,[r5,#0]
000024  f8cd0003          STR      r0,[sp,#3]
000028  88a8              LDRH     r0,[r5,#4]
00002a  f8ad0007          STRH     r0,[sp,#7]
;;;732    	memset(&topicdata[9],0,2);          				 /*手环MAC低字节补齐*/
00002e  2000              MOVS     r0,#0
000030  f8ad0009          STRH     r0,[sp,#9]
;;;733    	memcpy(&topicdata[11],sportdata,2);			     /*运动数据*/
000034  8820              LDRH     r0,[r4,#0]
000036  f8ad000b          STRH     r0,[sp,#0xb]
;;;734    	memcpy(&topicdata[13],&sportdata[4],2);			 /*运动数据*/
00003a  88a0              LDRH     r0,[r4,#4]
00003c  f8ad000d          STRH     r0,[sp,#0xd]
;;;735    	memcpy(&topicdata[15],&sportdata[2],2);			 /*运动数据*/
000040  8860              LDRH     r0,[r4,#2]
000042  f8ad000f          STRH     r0,[sp,#0xf]
;;;736    	memcpy(&topicdata[17],nowtime.data,7);       /*时间戳*/
000046  9808              LDR      r0,[sp,#0x20]
000048  f8cd0011          STR      r0,[sp,#0x11]
00004c  f8bd0024          LDRH     r0,[sp,#0x24]
000050  f8ad0015          STRH     r0,[sp,#0x15]
000054  f89d0026          LDRB     r0,[sp,#0x26]
000058  f88d0017          STRB     r0,[sp,#0x17]
;;;737    	memcpy(&topicdata[24],(uint8_t *)&HistorySportSerialNumber,4); /*流水号*/
00005c  4814              LDR      r0,|L15.176|
00005e  6800              LDR      r0,[r0,#0]  ; HistorySportSerialNumber
000060  9006              STR      r0,[sp,#0x18]
;;;738    	HistorySportSerialNumber++;
000062  4813              LDR      r0,|L15.176|
000064  6800              LDR      r0,[r0,#0]  ; HistorySportSerialNumber
000066  1c40              ADDS     r0,r0,#1
000068  4911              LDR      r1,|L15.176|
00006a  6008              STR      r0,[r1,#0]  ; HistorySportSerialNumber
;;;739    		
;;;740    	/*CRC校验*/
;;;741    	crcdata=app_plat_usMBCRC16(topicdata,topicdata[1]*256+topicdata[0]+2);
00006c  f89d2000          LDRB     r2,[sp,#0]
000070  f89d0001          LDRB     r0,[sp,#1]
000074  eb022000          ADD      r0,r2,r0,LSL #8
000078  1c80              ADDS     r0,r0,#2
00007a  b281              UXTH     r1,r0
00007c  4668              MOV      r0,sp
00007e  f7fffffe          BL       app_plat_usMBCRC16
000082  900a              STR      r0,[sp,#0x28]
;;;742    	memcpy(&topicdata[28],(uint8_t *)&crcdata,2);  
000084  f8bd0028          LDRH     r0,[sp,#0x28]
000088  f8ad001c          STRH     r0,[sp,#0x1c]
;;;743    	
;;;744    	/*上报数据*/
;;;745      if(mqtt_publish( sysCfg.parameter.data_socket, HIS_SPORT_TOPIC , (char *)topicdata , topicdata[1]*256+topicdata[0]+4))
00008c  f89d2000          LDRB     r2,[sp,#0]
000090  f89d1001          LDRB     r1,[sp,#1]
000094  eb022101          ADD      r1,r2,r1,LSL #8
000098  1d0b              ADDS     r3,r1,#4
00009a  4906              LDR      r1,|L15.180|
00009c  f89100c0          LDRB     r0,[r1,#0xc0]  ; sysCfg
0000a0  466a              MOV      r2,sp
0000a2  a105              ADR      r1,|L15.184|
0000a4  f7fffffe          BL       mqtt_publish
;;;746    	{
;;;747    
;;;748    	}
;;;749    }
0000a8  b00b              ADD      sp,sp,#0x2c
0000aa  bd30              POP      {r4,r5,pc}
;;;750    
                          ENDP

                  |L15.172|
                          DCD      ||.constdata||+0x234
                  |L15.176|
                          DCD      HistorySportSerialNumber
                  |L15.180|
                          DCD      sysCfg
                  |L15.184|
0000b8  2f627261          DCB      "/bracelet/report/history_sport_data",0
0000bc  63656c65
0000c0  742f7265
0000c4  706f7274
0000c8  2f686973
0000cc  746f7279
0000d0  5f73706f
0000d4  72745f64
0000d8  61746100

                          AREA ||i.app_plat_LocationPublish||, CODE, READONLY, ALIGN=2

                  app_plat_LocationPublish PROC
;;;876    */
;;;877    void app_plat_LocationPublish(uint8_t *bracelet,uint8_t *location,uint8_t beaconelectricity,uint8_t *beastation)
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;878    {
000004  b095              SUB      sp,sp,#0x54
000006  4681              MOV      r9,r0
000008  460c              MOV      r4,r1
00000a  469a              MOV      r10,r3
;;;879    	uint16_t crcdata;
;;;880    	static uint32_t LocationSerialNumber=0;
;;;881    	
;;;882    	uint8_t beacon_warn_mac[8] = {0x00};
00000c  2000              MOVS     r0,#0
00000e  9011              STR      r0,[sp,#0x44]
000010  9012              STR      r0,[sp,#0x48]
;;;883    	uint8_t beacon_warn_para[2] = {0x01};
000012  484c              LDR      r0,|L16.324|
000014  6800              LDR      r0,[r0,#0]  ; <Data12>
000016  9010              STR      r0,[sp,#0x40]
;;;884    	uint8_t topicdata[46]={0x2a,0x00,0x53};
000018  212a              MOVS     r1,#0x2a
00001a  a805              ADD      r0,sp,#0x14
00001c  f7fffffe          BL       __aeabi_memclr4
000020  4848              LDR      r0,|L16.324|
000022  1d00              ADDS     r0,r0,#4
000024  6800              LDR      r0,[r0,#0]  ; <Data13>
000026  9004              STR      r0,[sp,#0x10]
;;;885    
;;;886    	DateTime nowtime;
;;;887      get_ntp_time(&nowtime);
000028  a802              ADD      r0,sp,#8
00002a  f7fffffe          BL       get_ntp_time
;;;888    		
;;;889    	topicdata[2]=LOCATION;                                /*Msg_id*/
00002e  2053              MOVS     r0,#0x53
000030  f88d0012          STRB     r0,[sp,#0x12]
;;;890    	
;;;891    	memcpy(&topicdata[3],beastation,8);                   /*蓝牙基站设备MAC*/
000034  f8da0000          LDR      r0,[r10,#0]
000038  f8cd0013          STR      r0,[sp,#0x13]
00003c  f8da0004          LDR      r0,[r10,#4]
000040  f8cd0017          STR      r0,[sp,#0x17]
;;;892      memset(&topicdata[11],0,2);                           /*网关设备ID低字节补齐*/
000044  2000              MOVS     r0,#0
000046  f8ad001b          STRH     r0,[sp,#0x1b]
;;;893    	memcpy(&topicdata[13],sysCfg.parameter.client_mac,6); /*网关ID*/
00004a  483f              LDR      r0,|L16.328|
00004c  6801              LDR      r1,[r0,#0]  ; sysCfg
00004e  f8cd101d          STR      r1,[sp,#0x1d]
000052  8880              LDRH     r0,[r0,#4]  ; sysCfg
000054  f8ad0021          STRH     r0,[sp,#0x21]
;;;894    	memcpy(&topicdata[19],bracelet,6);						        /*手环MAC*/
000058  f8d90000          LDR      r0,[r9,#0]
00005c  f8cd0023          STR      r0,[sp,#0x23]
000060  f8b90004          LDRH     r0,[r9,#4]
000064  f8ad0027          STRH     r0,[sp,#0x27]
;;;895    	memset(&topicdata[25],0,2);          								  /*手环MAC低字节补齐*/
000068  2000              MOVS     r0,#0
00006a  f8ad0029          STRH     r0,[sp,#0x29]
;;;896    	
;;;897    	memcpy(&topicdata[27],location,1);                    /*手环RSSI*/
00006e  7820              LDRB     r0,[r4,#0]
000070  f88d002b          STRB     r0,[sp,#0x2b]
;;;898    	memcpy(&topicdata[28],location+7,4);                  /*位置数据*/
000074  f8d40007          LDR      r0,[r4,#7]
000078  900b              STR      r0,[sp,#0x2c]
;;;899    	memcpy(&topicdata[32],&beaconelectricity,1);          /*信标电量*/
00007a  f89d005c          LDRB     r0,[sp,#0x5c]
00007e  f88d0030          STRB     r0,[sp,#0x30]
;;;900    	memcpy(&topicdata[33],nowtime.data,7);                /*时间戳*/
000082  9802              LDR      r0,[sp,#8]
000084  f8cd0031          STR      r0,[sp,#0x31]
000088  f8bd000c          LDRH     r0,[sp,#0xc]
00008c  f8ad0035          STRH     r0,[sp,#0x35]
000090  f89d000e          LDRB     r0,[sp,#0xe]
000094  f88d0037          STRB     r0,[sp,#0x37]
;;;901    	
;;;902    	memcpy(&topicdata[40],(uint8_t *)&LocationSerialNumber,4); /*流水号*/
000098  482c              LDR      r0,|L16.332|
00009a  6800              LDR      r0,[r0,#0]  ; LocationSerialNumber
00009c  900e              STR      r0,[sp,#0x38]
;;;903    	LocationSerialNumber++;
00009e  482b              LDR      r0,|L16.332|
0000a0  6800              LDR      r0,[r0,#0]  ; LocationSerialNumber
0000a2  1c40              ADDS     r0,r0,#1
0000a4  4929              LDR      r1,|L16.332|
0000a6  6008              STR      r0,[r1,#0]  ; LocationSerialNumber
;;;904    	
;;;905    	/*CRC校验*/
;;;906    	crcdata=app_plat_usMBCRC16(topicdata,topicdata[1]*256+topicdata[0]+2);
0000a8  f89d2010          LDRB     r2,[sp,#0x10]
0000ac  f89d0011          LDRB     r0,[sp,#0x11]
0000b0  eb022000          ADD      r0,r2,r0,LSL #8
0000b4  1c80              ADDS     r0,r0,#2
0000b6  b281              UXTH     r1,r0
0000b8  a804              ADD      r0,sp,#0x10
0000ba  f7fffffe          BL       app_plat_usMBCRC16
0000be  9013              STR      r0,[sp,#0x4c]
;;;907    	memcpy(&topicdata[44],(uint8_t *)&crcdata,2);   
0000c0  f8bd004c          LDRH     r0,[sp,#0x4c]
0000c4  f8ad003c          STRH     r0,[sp,#0x3c]
;;;908    	
;;;909    	/*上报数据*/
;;;910      if(mqtt_publish( sysCfg.parameter.data_socket, LOCATION_TOPIC , (char *)topicdata , topicdata[1]*256+topicdata[0]+4))
0000c8  f89d2010          LDRB     r2,[sp,#0x10]
0000cc  f89d1011          LDRB     r1,[sp,#0x11]
0000d0  eb022101          ADD      r1,r2,r1,LSL #8
0000d4  1d0b              ADDS     r3,r1,#4
0000d6  491c              LDR      r1,|L16.328|
0000d8  39da              SUBS     r1,r1,#0xda
0000da  f89100c0          LDRB     r0,[r1,#0xc0]  ; sysCfg
0000de  aa04              ADD      r2,sp,#0x10
0000e0  a11b              ADR      r1,|L16.336|
0000e2  f7fffffe          BL       mqtt_publish
;;;911    	{
;;;912    		
;;;913    	}
;;;914    	
;;;915    	/*信标低压告警*/
;;;916    	if((((float)beaconelectricity)/256.0*3.6) < BEACON_WARN_VOLTAGE)
0000e6  f89d005c          LDRB     r0,[sp,#0x5c]
0000ea  f7fffffe          BL       __aeabi_ui2f
0000ee  4683              MOV      r11,r0
0000f0  f7fffffe          BL       __aeabi_f2d
0000f4  4607              MOV      r7,r0
0000f6  2200              MOVS     r2,#0
0000f8  4b1c              LDR      r3,|L16.364|
0000fa  f7fffffe          BL       __aeabi_ddiv
0000fe  4a1c              LDR      r2,|L16.368|
000100  4b1c              LDR      r3,|L16.372|
000102  e9cd0100          STRD     r0,r1,[sp,#0]
000106  f7fffffe          BL       __aeabi_dmul
00010a  4605              MOV      r5,r0
00010c  f04f3266          MOV      r2,#0x66666666
000110  4b19              LDR      r3,|L16.376|
000112  f7fffffe          BL       __aeabi_cdcmple
000116  d211              BCS      |L16.316|
;;;917    	{
;;;918    		beacon_warn_mac[0] = location[7];
000118  79e0              LDRB     r0,[r4,#7]
00011a  f88d0044          STRB     r0,[sp,#0x44]
;;;919    		beacon_warn_para[1] = beaconelectricity;
00011e  f89d005c          LDRB     r0,[sp,#0x5c]
000122  f88d0041          STRB     r0,[sp,#0x41]
;;;920    		ErrorLog(BEACON,beacon_warn_mac,WARN,ELECT_WARN,1,beacon_warn_para); /*设备告警*/
000126  a810              ADD      r0,sp,#0x40
000128  2101              MOVS     r1,#1
00012a  f44f73fb          MOV      r3,#0x1f6
00012e  2202              MOVS     r2,#2
000130  e9cd1000          STRD     r1,r0,[sp,#0]
000134  a911              ADD      r1,sp,#0x44
000136  2003              MOVS     r0,#3
000138  f7fffffe          BL       ErrorLog
                  |L16.316|
;;;921    	}
;;;922    }
00013c  b019              ADD      sp,sp,#0x64
00013e  e8bd8ff0          POP      {r4-r11,pc}
;;;923    
                          ENDP

000142  0000              DCW      0x0000
                  |L16.324|
                          DCD      ||.constdata||+0x244
                  |L16.328|
                          DCD      sysCfg+0xda
                  |L16.332|
                          DCD      LocationSerialNumber
                  |L16.336|
000150  2f627261          DCB      "/bracelet/report/location",0
000154  63656c65
000158  742f7265
00015c  706f7274
000160  2f6c6f63
000164  6174696f
000168  6e00    
00016a  00                DCB      0
00016b  00                DCB      0
                  |L16.364|
                          DCD      0x40700000
                  |L16.368|
                          DCD      0xcccccccd
                  |L16.372|
                          DCD      0x400ccccc
                  |L16.376|
                          DCD      0x40026666

                          AREA ||i.app_plat_SHTDataPublish||, CODE, READONLY, ALIGN=2

                  app_plat_SHTDataPublish PROC
;;;796    */
;;;797    void app_plat_SHTDataPublish(void)
000000  b500              PUSH     {lr}
;;;798    {
000002  b089              SUB      sp,sp,#0x24
;;;799    	uint16_t crcdata;
;;;800    	static uint32_t SHTDataSerialNumber = 0;
;;;801    	
;;;802    	uint8_t Temp = 0;
000004  2000              MOVS     r0,#0
000006  9007              STR      r0,[sp,#0x1c]
;;;803      uint8_t Hum = 0;	
000008  9006              STR      r0,[sp,#0x18]
;;;804    	uint8_t topicdata[19]={0x0f,0x00,0x55};
00000a  210f              MOVS     r1,#0xf
00000c  a802              ADD      r0,sp,#8
00000e  f7fffffe          BL       __aeabi_memclr4
000012  4823              LDR      r0,|L17.160|
000014  6800              LDR      r0,[r0,#0]  ; <Data10>
000016  9001              STR      r0,[sp,#4]
;;;805    	
;;;806    	SHT_GetValue(&Temp, &Hum);
000018  a906              ADD      r1,sp,#0x18
00001a  a807              ADD      r0,sp,#0x1c
00001c  f7fffffe          BL       SHT_GetValue
;;;807    	
;;;808    	topicdata[2] = SHT_DATA;                              /*Msg_id*/
000020  2056              MOVS     r0,#0x56
000022  f88d0006          STRB     r0,[sp,#6]
;;;809      memset(&topicdata[3],0,2);                            /*网关设备ID低字节补齐*/
000026  2000              MOVS     r0,#0
000028  f8ad0007          STRH     r0,[sp,#7]
;;;810    	memcpy(&topicdata[5],sysCfg.parameter.client_mac,6);  /*网关ID*/
00002c  481d              LDR      r0,|L17.164|
00002e  6801              LDR      r1,[r0,#0]  ; sysCfg
000030  f8cd1009          STR      r1,[sp,#9]
000034  8880              LDRH     r0,[r0,#4]  ; sysCfg
000036  f8ad000d          STRH     r0,[sp,#0xd]
;;;811    	memcpy(&topicdata[11],&Temp,1);						        		/*温度*/
00003a  f89d001c          LDRB     r0,[sp,#0x1c]
00003e  f88d000f          STRB     r0,[sp,#0xf]
;;;812    	memcpy(&topicdata[12],&Hum,1);						   	        /*湿度*/
000042  f89d0018          LDRB     r0,[sp,#0x18]
000046  f88d0010          STRB     r0,[sp,#0x10]
;;;813    	
;;;814    	memcpy(&topicdata[13],(uint8_t *)&SHTDataSerialNumber,4); /*流水号*/
00004a  4817              LDR      r0,|L17.168|
00004c  6800              LDR      r0,[r0,#0]  ; SHTDataSerialNumber
00004e  f8cd0011          STR      r0,[sp,#0x11]
;;;815    	SHTDataSerialNumber++;
000052  4815              LDR      r0,|L17.168|
000054  6800              LDR      r0,[r0,#0]  ; SHTDataSerialNumber
000056  1c40              ADDS     r0,r0,#1
000058  4913              LDR      r1,|L17.168|
00005a  6008              STR      r0,[r1,#0]  ; SHTDataSerialNumber
;;;816    	
;;;817    	/*CRC校验*/
;;;818    	crcdata=app_plat_usMBCRC16(topicdata,topicdata[1]*256+topicdata[0]+2);
00005c  f89d2004          LDRB     r2,[sp,#4]
000060  f89d0005          LDRB     r0,[sp,#5]
000064  eb022000          ADD      r0,r2,r0,LSL #8
000068  1c80              ADDS     r0,r0,#2
00006a  b281              UXTH     r1,r0
00006c  a801              ADD      r0,sp,#4
00006e  f7fffffe          BL       app_plat_usMBCRC16
000072  9008              STR      r0,[sp,#0x20]
;;;819    	memcpy(&topicdata[17],(uint8_t *)&crcdata,2);   
000074  f8bd0020          LDRH     r0,[sp,#0x20]
000078  f8ad0015          STRH     r0,[sp,#0x15]
;;;820    	
;;;821    	/*上报数据*/
;;;822      if(mqtt_publish( sysCfg.parameter.data_socket, SHT_TOPIC , (char *)topicdata , topicdata[1]*256+topicdata[0]+4))
00007c  f89d2004          LDRB     r2,[sp,#4]
000080  f89d1005          LDRB     r1,[sp,#5]
000084  eb022101          ADD      r1,r2,r1,LSL #8
000088  1d0b              ADDS     r3,r1,#4
00008a  4906              LDR      r1,|L17.164|
00008c  39da              SUBS     r1,r1,#0xda
00008e  f89100c0          LDRB     r0,[r1,#0xc0]  ; sysCfg
000092  aa01              ADD      r2,sp,#4
000094  a105              ADR      r1,|L17.172|
000096  f7fffffe          BL       mqtt_publish
;;;823    	{
;;;824    		
;;;825    	}
;;;826    }
00009a  b009              ADD      sp,sp,#0x24
00009c  bd00              POP      {pc}
;;;827    
                          ENDP

00009e  0000              DCW      0x0000
                  |L17.160|
                          DCD      ||.constdata||+0x23c
                  |L17.164|
                          DCD      sysCfg+0xda
                  |L17.168|
                          DCD      SHTDataSerialNumber
                  |L17.172|
0000ac  2f696f74          DCB      "/iot_gateway/temp_hum/report",0
0000b0  5f676174
0000b4  65776179
0000b8  2f74656d
0000bc  705f6875
0000c0  6d2f7265
0000c4  706f7274
0000c8  00      
0000c9  00                DCB      0
0000ca  00                DCB      0
0000cb  00                DCB      0

                          AREA ||i.app_plat_SendMessage||, CODE, READONLY, ALIGN=2

                  app_plat_SendMessage PROC
;;;591    */
;;;592    void app_plat_SendMessage(void)
000000  b5f0              PUSH     {r4-r7,lr}
;;;593    { 
000002  b0cb              SUB      sp,sp,#0x12c
;;;594    	uint16_t crcdata;
;;;595    	uint16_t i=0,len=0;
000004  2400              MOVS     r4,#0
000006  2600              MOVS     r6,#0
;;;596    	uint8_t mes[300]={0};
000008  f44f7196          MOV      r1,#0x12c
00000c  4668              MOV      r0,sp
00000e  f7fffffe          BL       __aeabi_memclr4
;;;597    	
;;;598    	/*读数据包头*/
;;;599    	while(mes_fifo.usRxCount>0)
000012  e020              B        |L18.86|
                  |L18.20|
;;;600    	{
;;;601    		mes[i++]=mes_fifo.pRxBuf[mes_fifo.usRxRead];
000014  4848              LDR      r0,|L18.312|
000016  6800              LDR      r0,[r0,#0]  ; mes_fifo
000018  4947              LDR      r1,|L18.312|
00001a  8909              LDRH     r1,[r1,#8]  ; mes_fifo
00001c  5c42              LDRB     r2,[r0,r1]
00001e  4620              MOV      r0,r4
000020  1c61              ADDS     r1,r4,#1
000022  b28c              UXTH     r4,r1
000024  f80d2000          STRB     r2,[sp,r0]
;;;602    		if (++mes_fifo.usRxRead >= mes_fifo.usRxBufSize)
000028  4843              LDR      r0,|L18.312|
00002a  8900              LDRH     r0,[r0,#8]  ; mes_fifo
00002c  1c40              ADDS     r0,r0,#1
00002e  b280              UXTH     r0,r0
000030  4941              LDR      r1,|L18.312|
000032  8108              STRH     r0,[r1,#8]
000034  8889              LDRH     r1,[r1,#4]  ; mes_fifo
000036  4288              CMP      r0,r1
000038  db02              BLT      |L18.64|
;;;603    		{
;;;604    			mes_fifo.usRxRead=0;
00003a  2000              MOVS     r0,#0
00003c  493e              LDR      r1,|L18.312|
00003e  8108              STRH     r0,[r1,#8]
                  |L18.64|
;;;605    		}
;;;606    		mes_fifo.usRxCount--;
000040  483d              LDR      r0,|L18.312|
000042  8940              LDRH     r0,[r0,#0xa]  ; mes_fifo
000044  1e40              SUBS     r0,r0,#1
000046  493c              LDR      r1,|L18.312|
000048  8148              STRH     r0,[r1,#0xa]
;;;607    		 
;;;608    		if(mes[i-1]==0x5a)   /*数据包头*/
00004a  1e60              SUBS     r0,r4,#1
00004c  f81d0000          LDRB     r0,[sp,r0]
000050  285a              CMP      r0,#0x5a
000052  d100              BNE      |L18.86|
;;;609    		{
;;;610    			break;  
000054  e003              B        |L18.94|
                  |L18.86|
000056  4838              LDR      r0,|L18.312|
000058  8940              LDRH     r0,[r0,#0xa]          ;599  ; mes_fifo
00005a  2800              CMP      r0,#0                 ;599
00005c  dcda              BGT      |L18.20|
                  |L18.94|
00005e  bf00              NOP      
;;;611    		}
;;;612      }
;;;613    	
;;;614    	/*缓存读空*/
;;;615    	if(mes_fifo.usRxCount==0) 
000060  4835              LDR      r0,|L18.312|
000062  8940              LDRH     r0,[r0,#0xa]  ; mes_fifo
000064  b908              CBNZ     r0,|L18.106|
                  |L18.102|
;;;616    	{
;;;617    		return;
;;;618    	}
;;;619    	
;;;620    	memset(mes,0,300);
;;;621      for(i=0;i<2;i++)  /*读取长度*/
;;;622    	{
;;;623    		mes[i]=mes_fifo.pRxBuf[mes_fifo.usRxRead];
;;;624    		if (++mes_fifo.usRxRead >= mes_fifo.usRxBufSize)
;;;625    		{
;;;626    			mes_fifo.usRxRead=0;
;;;627    		}
;;;628    		mes_fifo.usRxCount--;
;;;629    	}
;;;630    	
;;;631    	/*长度检查*/
;;;632    	len=mes[0]+mes[1]*256;
;;;633    	if(len>300)
;;;634    	{
;;;635    		#if APP_DEBUG
;;;636    		printf("send mes len error.\r\n");
;;;637    	  #endif
;;;638    		return;
;;;639    	}
;;;640    	
;;;641    	/*读取有效数据*/
;;;642      for(i=0;i<len+2;i++)
;;;643    	{
;;;644    		mes[2+i]=mes_fifo.pRxBuf[mes_fifo.usRxRead];
;;;645    		if (++mes_fifo.usRxRead >= mes_fifo.usRxBufSize)
;;;646    		{
;;;647    			mes_fifo.usRxRead=0;
;;;648    		}
;;;649    		mes_fifo.usRxCount--;
;;;650    	}
;;;651    	
;;;652    	#if 0
;;;653    	printf("have parsing data.\r\n");
;;;654    	for(i=0;i<len+4;i++)
;;;655    	{
;;;656    		printf("%2x ",mes[i]);
;;;657    	}
;;;658    	printf("\r\n");
;;;659    	#endif
;;;660    	
;;;661    	/*校验数据*/
;;;662    	crcdata=app_plat_usMBCRC16(mes,len+2);
;;;663    	
;;;664    	/*CRC检测*/
;;;665    	if(((crcdata%256)!=mes[len+2])||((crcdata/256)!=mes[len+3]))
;;;666    	{
;;;667    		#if APP_DEBUG
;;;668    		printf("send mes:CRC error\r\n");
;;;669    		#endif
;;;670    	}
;;;671    	
;;;672    	app_palt_BandData(mes,len+4);   /*下发消息*/
;;;673    }
000066  b04b              ADD      sp,sp,#0x12c
000068  bdf0              POP      {r4-r7,pc}
                  |L18.106|
00006a  f44f7196          MOV      r1,#0x12c             ;620
00006e  4668              MOV      r0,sp                 ;620
000070  f7fffffe          BL       __aeabi_memclr4
000074  2400              MOVS     r4,#0                 ;621
000076  e019              B        |L18.172|
                  |L18.120|
000078  482f              LDR      r0,|L18.312|
00007a  6800              LDR      r0,[r0,#0]            ;623  ; mes_fifo
00007c  492e              LDR      r1,|L18.312|
00007e  8909              LDRH     r1,[r1,#8]            ;623  ; mes_fifo
000080  5c40              LDRB     r0,[r0,r1]            ;623
000082  f80d0004          STRB     r0,[sp,r4]            ;623
000086  482c              LDR      r0,|L18.312|
000088  8900              LDRH     r0,[r0,#8]            ;624  ; mes_fifo
00008a  1c40              ADDS     r0,r0,#1              ;624
00008c  b280              UXTH     r0,r0                 ;624
00008e  492a              LDR      r1,|L18.312|
000090  8108              STRH     r0,[r1,#8]            ;624
000092  8889              LDRH     r1,[r1,#4]            ;624  ; mes_fifo
000094  4288              CMP      r0,r1                 ;624
000096  db02              BLT      |L18.158|
000098  2000              MOVS     r0,#0                 ;626
00009a  4927              LDR      r1,|L18.312|
00009c  8108              STRH     r0,[r1,#8]            ;626
                  |L18.158|
00009e  4826              LDR      r0,|L18.312|
0000a0  8940              LDRH     r0,[r0,#0xa]          ;628  ; mes_fifo
0000a2  1e40              SUBS     r0,r0,#1              ;628
0000a4  4924              LDR      r1,|L18.312|
0000a6  8148              STRH     r0,[r1,#0xa]          ;628
0000a8  1c60              ADDS     r0,r4,#1              ;621
0000aa  b284              UXTH     r4,r0                 ;621
                  |L18.172|
0000ac  2c02              CMP      r4,#2                 ;621
0000ae  dbe3              BLT      |L18.120|
0000b0  f89d1000          LDRB     r1,[sp,#0]            ;632
0000b4  f89d0001          LDRB     r0,[sp,#1]            ;632
0000b8  eb012000          ADD      r0,r1,r0,LSL #8       ;632
0000bc  b286              UXTH     r6,r0                 ;632
0000be  f5b67f96          CMP      r6,#0x12c             ;633
0000c2  dd00              BLE      |L18.198|
0000c4  e7cf              B        |L18.102|
                  |L18.198|
0000c6  2400              MOVS     r4,#0                 ;642
0000c8  e01a              B        |L18.256|
                  |L18.202|
0000ca  481b              LDR      r0,|L18.312|
0000cc  6800              LDR      r0,[r0,#0]            ;644  ; mes_fifo
0000ce  491a              LDR      r1,|L18.312|
0000d0  8909              LDRH     r1,[r1,#8]            ;644  ; mes_fifo
0000d2  5c41              LDRB     r1,[r0,r1]            ;644
0000d4  1ca0              ADDS     r0,r4,#2              ;644
0000d6  f80d1000          STRB     r1,[sp,r0]            ;644
0000da  4817              LDR      r0,|L18.312|
0000dc  8900              LDRH     r0,[r0,#8]            ;645  ; mes_fifo
0000de  1c40              ADDS     r0,r0,#1              ;645
0000e0  b280              UXTH     r0,r0                 ;645
0000e2  4915              LDR      r1,|L18.312|
0000e4  8108              STRH     r0,[r1,#8]            ;645
0000e6  8889              LDRH     r1,[r1,#4]            ;645  ; mes_fifo
0000e8  4288              CMP      r0,r1                 ;645
0000ea  db02              BLT      |L18.242|
0000ec  2000              MOVS     r0,#0                 ;647
0000ee  4912              LDR      r1,|L18.312|
0000f0  8108              STRH     r0,[r1,#8]            ;647
                  |L18.242|
0000f2  4811              LDR      r0,|L18.312|
0000f4  8940              LDRH     r0,[r0,#0xa]          ;649  ; mes_fifo
0000f6  1e40              SUBS     r0,r0,#1              ;649
0000f8  490f              LDR      r1,|L18.312|
0000fa  8148              STRH     r0,[r1,#0xa]          ;649
0000fc  1c60              ADDS     r0,r4,#1              ;642
0000fe  b284              UXTH     r4,r0                 ;642
                  |L18.256|
000100  1cb0              ADDS     r0,r6,#2              ;642
000102  4284              CMP      r4,r0                 ;642
000104  dbe1              BLT      |L18.202|
000106  b281              UXTH     r1,r0                 ;662
000108  4668              MOV      r0,sp                 ;662
00010a  f7fffffe          BL       app_plat_usMBCRC16
00010e  4605              MOV      r5,r0                 ;662
000110  4628              MOV      r0,r5                 ;665
000112  17ea              ASRS     r2,r5,#31             ;665
000114  eb056212          ADD      r2,r5,r2,LSR #24      ;665
000118  1212              ASRS     r2,r2,#8              ;665
00011a  eba52302          SUB      r3,r5,r2,LSL #8       ;665
00011e  1cb2              ADDS     r2,r6,#2              ;665
000120  f81d2002          LDRB     r2,[sp,r2]            ;665
000124  4293              CMP      r3,r2                 ;665
000126  d100              BNE      |L18.298|
000128  4629              MOV      r1,r5                 ;665
                  |L18.298|
00012a  1d30              ADDS     r0,r6,#4              ;672
00012c  b281              UXTH     r1,r0                 ;672
00012e  4668              MOV      r0,sp                 ;672
000130  f7fffffe          BL       app_palt_BandData
000134  bf00              NOP      
000136  e796              B        |L18.102|
;;;674    
                          ENDP

                  |L18.312|
                          DCD      mes_fifo

                          AREA ||i.app_plat_SleepDataPublish||, CODE, READONLY, ALIGN=2

                  app_plat_SleepDataPublish PROC
;;;759    */
;;;760    void app_plat_SleepDataPublish(uint8_t *bracelet,uint8_t *sleepdata)
000000  b530              PUSH     {r4,r5,lr}
;;;761    {
000002  b08b              SUB      sp,sp,#0x2c
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
;;;762    	uint16_t crcdata;
;;;763    	static uint32_t SleeSerialNumber=0;
;;;764    	uint8_t topicdata[30]={0x1A,0x00,0x51};
000008  211a              MOVS     r1,#0x1a
00000a  a803              ADD      r0,sp,#0xc
00000c  f7fffffe          BL       __aeabi_memclr4
000010  4825              LDR      r0,|L19.168|
000012  6800              LDR      r0,[r0,#0]  ; <Data9>
000014  9002              STR      r0,[sp,#8]
;;;765    
;;;766    	DateTime nowtime;
;;;767      get_ntp_time(&nowtime);
000016  4668              MOV      r0,sp
000018  f7fffffe          BL       get_ntp_time
;;;768    	
;;;769    	topicdata[2] = SLEEP_DATA;           				 /*Msg_id*/
00001c  2055              MOVS     r0,#0x55
00001e  f88d000a          STRB     r0,[sp,#0xa]
;;;770    	
;;;771    	memcpy(&topicdata[3],bracelet,6);			       /*手环MAC*/
000022  6820              LDR      r0,[r4,#0]
000024  f8cd000b          STR      r0,[sp,#0xb]
000028  88a0              LDRH     r0,[r4,#4]
00002a  f8ad000f          STRH     r0,[sp,#0xf]
;;;772    	memset(&topicdata[9],0,2);          				 /*手环MAC低字节补齐*/
00002e  2000              MOVS     r0,#0
000030  f8ad0011          STRH     r0,[sp,#0x11]
;;;773    	memcpy(&topicdata[11],sleepdata,6);			     /*睡眠数据*/
000034  6828              LDR      r0,[r5,#0]
000036  f8cd0013          STR      r0,[sp,#0x13]
00003a  88a8              LDRH     r0,[r5,#4]
00003c  f8ad0017          STRH     r0,[sp,#0x17]
;;;774    	memcpy(&topicdata[17],nowtime.data,7);       /*时间戳*/
000040  9800              LDR      r0,[sp,#0]
000042  f8cd0019          STR      r0,[sp,#0x19]
000046  f8bd0004          LDRH     r0,[sp,#4]
00004a  f8ad001d          STRH     r0,[sp,#0x1d]
00004e  f89d0006          LDRB     r0,[sp,#6]
000052  f88d001f          STRB     r0,[sp,#0x1f]
;;;775    	memcpy(&topicdata[24],(uint8_t *)&SleeSerialNumber,4); /*流水号*/
000056  4815              LDR      r0,|L19.172|
000058  6800              LDR      r0,[r0,#0]  ; SleeSerialNumber
00005a  9008              STR      r0,[sp,#0x20]
;;;776    	SleeSerialNumber++;
00005c  4813              LDR      r0,|L19.172|
00005e  6800              LDR      r0,[r0,#0]  ; SleeSerialNumber
000060  1c40              ADDS     r0,r0,#1
000062  4912              LDR      r1,|L19.172|
000064  6008              STR      r0,[r1,#0]  ; SleeSerialNumber
;;;777    		
;;;778    	/*CRC校验*/
;;;779    	crcdata=app_plat_usMBCRC16(topicdata,topicdata[1]*256+topicdata[0]+2);
000066  f89d2008          LDRB     r2,[sp,#8]
00006a  f89d0009          LDRB     r0,[sp,#9]
00006e  eb022000          ADD      r0,r2,r0,LSL #8
000072  1c80              ADDS     r0,r0,#2
000074  b281              UXTH     r1,r0
000076  a802              ADD      r0,sp,#8
000078  f7fffffe          BL       app_plat_usMBCRC16
00007c  900a              STR      r0,[sp,#0x28]
;;;780    	memcpy(&topicdata[28],(uint8_t *)&crcdata,2);  
00007e  f8bd0028          LDRH     r0,[sp,#0x28]
000082  f8ad0024          STRH     r0,[sp,#0x24]
;;;781    	
;;;782    	/*上报数据*/
;;;783      if(mqtt_publish( sysCfg.parameter.data_socket, SLEEP_TOPIC , (char *)topicdata , topicdata[1]*256+topicdata[0]+4))
000086  f89d2008          LDRB     r2,[sp,#8]
00008a  f89d1009          LDRB     r1,[sp,#9]
00008e  eb022101          ADD      r1,r2,r1,LSL #8
000092  1d0b              ADDS     r3,r1,#4
000094  4906              LDR      r1,|L19.176|
000096  f89100c0          LDRB     r0,[r1,#0xc0]  ; sysCfg
00009a  aa02              ADD      r2,sp,#8
00009c  a105              ADR      r1,|L19.180|
00009e  f7fffffe          BL       mqtt_publish
;;;784    	{
;;;785    
;;;786    	}
;;;787    }
0000a2  b00b              ADD      sp,sp,#0x2c
0000a4  bd30              POP      {r4,r5,pc}
;;;788    
                          ENDP

0000a6  0000              DCW      0x0000
                  |L19.168|
                          DCD      ||.constdata||+0x238
                  |L19.172|
                          DCD      SleeSerialNumber
                  |L19.176|
                          DCD      sysCfg
                  |L19.180|
0000b4  2f627261          DCB      "/bracelet/report/sleep_data",0
0000b8  63656c65
0000bc  742f7265
0000c0  706f7274
0000c4  2f736c65
0000c8  65705f64
0000cc  61746100

                          AREA ||i.app_plat_SportDataPublish||, CODE, READONLY, ALIGN=2

                  app_plat_SportDataPublish PROC
;;;683    */
;;;684    void app_plat_SportDataPublish(uint8_t *bracelet,uint8_t *sportdata)
000000  b530              PUSH     {r4,r5,lr}
;;;685    {
000002  b08b              SUB      sp,sp,#0x2c
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
;;;686    	uint16_t crcdata;
;;;687    	static uint32_t SportSerialNumber=0;
;;;688    	uint8_t topicdata[30]={0x1A,0x00,0x51};
000008  211a              MOVS     r1,#0x1a
00000a  a803              ADD      r0,sp,#0xc
00000c  f7fffffe          BL       __aeabi_memclr4
000010  4825              LDR      r0,|L20.168|
000012  6800              LDR      r0,[r0,#0]  ; <Data7>
000014  9002              STR      r0,[sp,#8]
;;;689    		
;;;690    	DateTime nowtime;
;;;691      get_ntp_time(&nowtime); 
000016  4668              MOV      r0,sp
000018  f7fffffe          BL       get_ntp_time
;;;692    	topicdata[2]=SPORT;               				   /*Msg_id*/
00001c  2051              MOVS     r0,#0x51
00001e  f88d000a          STRB     r0,[sp,#0xa]
;;;693    	
;;;694    	memcpy(&topicdata[3],bracelet,6);			       /*手环MAC*/
000022  6820              LDR      r0,[r4,#0]
000024  f8cd000b          STR      r0,[sp,#0xb]
000028  88a0              LDRH     r0,[r4,#4]
00002a  f8ad000f          STRH     r0,[sp,#0xf]
;;;695    	memset(&topicdata[9],0,2);          				 /*手环MAC低字节补齐*/
00002e  2000              MOVS     r0,#0
000030  f8ad0011          STRH     r0,[sp,#0x11]
;;;696    	memcpy(&topicdata[11],sportdata,6);			     /*运动数据*/
000034  6828              LDR      r0,[r5,#0]
000036  f8cd0013          STR      r0,[sp,#0x13]
00003a  88a8              LDRH     r0,[r5,#4]
00003c  f8ad0017          STRH     r0,[sp,#0x17]
;;;697    	memcpy(&topicdata[17],nowtime.data,7);       /*时间戳*/
000040  9800              LDR      r0,[sp,#0]
000042  f8cd0019          STR      r0,[sp,#0x19]
000046  f8bd0004          LDRH     r0,[sp,#4]
00004a  f8ad001d          STRH     r0,[sp,#0x1d]
00004e  f89d0006          LDRB     r0,[sp,#6]
000052  f88d001f          STRB     r0,[sp,#0x1f]
;;;698    	memcpy(&topicdata[24],(uint8_t *)&SportSerialNumber,4); /*流水号*/
000056  4815              LDR      r0,|L20.172|
000058  6800              LDR      r0,[r0,#0]  ; SportSerialNumber
00005a  9008              STR      r0,[sp,#0x20]
;;;699    	SportSerialNumber++;
00005c  4813              LDR      r0,|L20.172|
00005e  6800              LDR      r0,[r0,#0]  ; SportSerialNumber
000060  1c40              ADDS     r0,r0,#1
000062  4912              LDR      r1,|L20.172|
000064  6008              STR      r0,[r1,#0]  ; SportSerialNumber
;;;700    		
;;;701    	/*CRC校验*/
;;;702    	crcdata=app_plat_usMBCRC16(topicdata,topicdata[1]*256+topicdata[0]+2);
000066  f89d2008          LDRB     r2,[sp,#8]
00006a  f89d0009          LDRB     r0,[sp,#9]
00006e  eb022000          ADD      r0,r2,r0,LSL #8
000072  1c80              ADDS     r0,r0,#2
000074  b281              UXTH     r1,r0
000076  a802              ADD      r0,sp,#8
000078  f7fffffe          BL       app_plat_usMBCRC16
00007c  900a              STR      r0,[sp,#0x28]
;;;703    	memcpy(&topicdata[28],(uint8_t *)&crcdata,2);  
00007e  f8bd0028          LDRH     r0,[sp,#0x28]
000082  f8ad0024          STRH     r0,[sp,#0x24]
;;;704    	
;;;705    	/*上报数据*/
;;;706      if(mqtt_publish( sysCfg.parameter.data_socket, SPORT_TOPIC , (char *)topicdata , topicdata[1]*256+topicdata[0]+4))
000086  f89d2008          LDRB     r2,[sp,#8]
00008a  f89d1009          LDRB     r1,[sp,#9]
00008e  eb022101          ADD      r1,r2,r1,LSL #8
000092  1d0b              ADDS     r3,r1,#4
000094  4906              LDR      r1,|L20.176|
000096  f89100c0          LDRB     r0,[r1,#0xc0]  ; sysCfg
00009a  aa02              ADD      r2,sp,#8
00009c  a105              ADR      r1,|L20.180|
00009e  f7fffffe          BL       mqtt_publish
;;;707    	{
;;;708    	}
;;;709    }
0000a2  b00b              ADD      sp,sp,#0x2c
0000a4  bd30              POP      {r4,r5,pc}
;;;710    
                          ENDP

0000a6  0000              DCW      0x0000
                  |L20.168|
                          DCD      ||.constdata||+0x230
                  |L20.172|
                          DCD      SportSerialNumber
                  |L20.176|
                          DCD      sysCfg
                  |L20.180|
0000b4  2f627261          DCB      "/bracelet/report/sport_data",0
0000b8  63656c65
0000bc  742f7265
0000c0  706f7274
0000c4  2f73706f
0000c8  72745f64
0000cc  61746100

                          AREA ||i.app_plat_usMBCRC16||, CODE, READONLY, ALIGN=2

                  app_plat_usMBCRC16 PROC
;;;551    */
;;;552    uint16_t app_plat_usMBCRC16( uint8_t * pucFrame, uint16_t usLen )
000000  b570              PUSH     {r4-r6,lr}
;;;553    {
000002  4602              MOV      r2,r0
000004  460c              MOV      r4,r1
;;;554    	uint8_t ucCRCHi = 0xFF;
000006  25ff              MOVS     r5,#0xff
;;;555    	uint8_t ucCRCLo = 0xFF;
000008  23ff              MOVS     r3,#0xff
;;;556    	uint16_t iIndex;
;;;557    	while( usLen-- )
00000a  e009              B        |L21.32|
                  |L21.12|
;;;558    	{
;;;559    		iIndex = ucCRCLo ^ *( pucFrame++ );
00000c  f8120b01          LDRB     r0,[r2],#1
000010  ea800103          EOR      r1,r0,r3
;;;560    		ucCRCLo = ( uint8_t )( ucCRCHi ^ aucCRCHi[iIndex] );
000014  4806              LDR      r0,|L21.48|
000016  5c40              LDRB     r0,[r0,r1]
000018  ea800305          EOR      r3,r0,r5
;;;561    		ucCRCHi = aucCRCLo[iIndex];
00001c  4805              LDR      r0,|L21.52|
00001e  5c45              LDRB     r5,[r0,r1]
                  |L21.32|
000020  1e20              SUBS     r0,r4,#0              ;557
000022  f1a40601          SUB      r6,r4,#1              ;557
000026  b2b4              UXTH     r4,r6                 ;557
000028  d1f0              BNE      |L21.12|
;;;562    	}
;;;563    	return ( uint16_t )( ucCRCHi << 8 | ucCRCLo );
00002a  ea432005          ORR      r0,r3,r5,LSL #8
;;;564    }
00002e  bd70              POP      {r4-r6,pc}
;;;565    
                          ENDP

                  |L21.48|
                          DCD      aucCRCHi
                  |L21.52|
                          DCD      aucCRCLo

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  mes_fifo
                          %        12
                  mes_rxbuf
                          %        10240

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  aucCRCHi
000000  00c18140          DCB      0x00,0xc1,0x81,0x40
000004  01c08041          DCB      0x01,0xc0,0x80,0x41
000008  01c08041          DCB      0x01,0xc0,0x80,0x41
00000c  00c18140          DCB      0x00,0xc1,0x81,0x40
000010  01c08041          DCB      0x01,0xc0,0x80,0x41
000014  00c18140          DCB      0x00,0xc1,0x81,0x40
000018  00c18140          DCB      0x00,0xc1,0x81,0x40
00001c  01c08041          DCB      0x01,0xc0,0x80,0x41
000020  01c08041          DCB      0x01,0xc0,0x80,0x41
000024  00c18140          DCB      0x00,0xc1,0x81,0x40
000028  00c18140          DCB      0x00,0xc1,0x81,0x40
00002c  01c08041          DCB      0x01,0xc0,0x80,0x41
000030  00c18140          DCB      0x00,0xc1,0x81,0x40
000034  01c08041          DCB      0x01,0xc0,0x80,0x41
000038  01c08041          DCB      0x01,0xc0,0x80,0x41
00003c  00c18140          DCB      0x00,0xc1,0x81,0x40
000040  01c08041          DCB      0x01,0xc0,0x80,0x41
000044  00c18140          DCB      0x00,0xc1,0x81,0x40
000048  00c18140          DCB      0x00,0xc1,0x81,0x40
00004c  01c08041          DCB      0x01,0xc0,0x80,0x41
000050  00c18140          DCB      0x00,0xc1,0x81,0x40
000054  01c08041          DCB      0x01,0xc0,0x80,0x41
000058  01c08041          DCB      0x01,0xc0,0x80,0x41
00005c  00c18140          DCB      0x00,0xc1,0x81,0x40
000060  00c18140          DCB      0x00,0xc1,0x81,0x40
000064  01c08041          DCB      0x01,0xc0,0x80,0x41
000068  01c08041          DCB      0x01,0xc0,0x80,0x41
00006c  00c18140          DCB      0x00,0xc1,0x81,0x40
000070  01c08041          DCB      0x01,0xc0,0x80,0x41
000074  00c18140          DCB      0x00,0xc1,0x81,0x40
000078  00c18140          DCB      0x00,0xc1,0x81,0x40
00007c  01c08041          DCB      0x01,0xc0,0x80,0x41
000080  01c08041          DCB      0x01,0xc0,0x80,0x41
000084  00c18140          DCB      0x00,0xc1,0x81,0x40
000088  00c18140          DCB      0x00,0xc1,0x81,0x40
00008c  01c08041          DCB      0x01,0xc0,0x80,0x41
000090  00c18140          DCB      0x00,0xc1,0x81,0x40
000094  01c08041          DCB      0x01,0xc0,0x80,0x41
000098  01c08041          DCB      0x01,0xc0,0x80,0x41
00009c  00c18140          DCB      0x00,0xc1,0x81,0x40
0000a0  00c18140          DCB      0x00,0xc1,0x81,0x40
0000a4  01c08041          DCB      0x01,0xc0,0x80,0x41
0000a8  01c08041          DCB      0x01,0xc0,0x80,0x41
0000ac  00c18140          DCB      0x00,0xc1,0x81,0x40
0000b0  01c08041          DCB      0x01,0xc0,0x80,0x41
0000b4  00c18140          DCB      0x00,0xc1,0x81,0x40
0000b8  00c18140          DCB      0x00,0xc1,0x81,0x40
0000bc  01c08041          DCB      0x01,0xc0,0x80,0x41
0000c0  00c18140          DCB      0x00,0xc1,0x81,0x40
0000c4  01c08041          DCB      0x01,0xc0,0x80,0x41
0000c8  01c08041          DCB      0x01,0xc0,0x80,0x41
0000cc  00c18140          DCB      0x00,0xc1,0x81,0x40
0000d0  01c08041          DCB      0x01,0xc0,0x80,0x41
0000d4  00c18140          DCB      0x00,0xc1,0x81,0x40
0000d8  00c18140          DCB      0x00,0xc1,0x81,0x40
0000dc  01c08041          DCB      0x01,0xc0,0x80,0x41
0000e0  01c08041          DCB      0x01,0xc0,0x80,0x41
0000e4  00c18140          DCB      0x00,0xc1,0x81,0x40
0000e8  00c18140          DCB      0x00,0xc1,0x81,0x40
0000ec  01c08041          DCB      0x01,0xc0,0x80,0x41
0000f0  00c18140          DCB      0x00,0xc1,0x81,0x40
0000f4  01c08041          DCB      0x01,0xc0,0x80,0x41
0000f8  01c08041          DCB      0x01,0xc0,0x80,0x41
0000fc  00c18140          DCB      0x00,0xc1,0x81,0x40
                  aucCRCLo
000100  00c0c101          DCB      0x00,0xc0,0xc1,0x01
000104  c30302c2          DCB      0xc3,0x03,0x02,0xc2
000108  c60607c7          DCB      0xc6,0x06,0x07,0xc7
00010c  05c5c404          DCB      0x05,0xc5,0xc4,0x04
000110  cc0c0dcd          DCB      0xcc,0x0c,0x0d,0xcd
000114  0fcfce0e          DCB      0x0f,0xcf,0xce,0x0e
000118  0acacb0b          DCB      0x0a,0xca,0xcb,0x0b
00011c  c90908c8          DCB      0xc9,0x09,0x08,0xc8
000120  d81819d9          DCB      0xd8,0x18,0x19,0xd9
000124  1bdbda1a          DCB      0x1b,0xdb,0xda,0x1a
000128  1ededf1f          DCB      0x1e,0xde,0xdf,0x1f
00012c  dd1d1cdc          DCB      0xdd,0x1d,0x1c,0xdc
000130  14d4d515          DCB      0x14,0xd4,0xd5,0x15
000134  d71716d6          DCB      0xd7,0x17,0x16,0xd6
000138  d21213d3          DCB      0xd2,0x12,0x13,0xd3
00013c  11d1d010          DCB      0x11,0xd1,0xd0,0x10
000140  f03031f1          DCB      0xf0,0x30,0x31,0xf1
000144  33f3f232          DCB      0x33,0xf3,0xf2,0x32
000148  36f6f737          DCB      0x36,0xf6,0xf7,0x37
00014c  f53534f4          DCB      0xf5,0x35,0x34,0xf4
000150  3cfcfd3d          DCB      0x3c,0xfc,0xfd,0x3d
000154  ff3f3efe          DCB      0xff,0x3f,0x3e,0xfe
000158  fa3a3bfb          DCB      0xfa,0x3a,0x3b,0xfb
00015c  39f9f838          DCB      0x39,0xf9,0xf8,0x38
000160  28e8e929          DCB      0x28,0xe8,0xe9,0x29
000164  eb2b2aea          DCB      0xeb,0x2b,0x2a,0xea
000168  ee2e2fef          DCB      0xee,0x2e,0x2f,0xef
00016c  2dedec2c          DCB      0x2d,0xed,0xec,0x2c
000170  e42425e5          DCB      0xe4,0x24,0x25,0xe5
000174  27e7e626          DCB      0x27,0xe7,0xe6,0x26
000178  22e2e323          DCB      0x22,0xe2,0xe3,0x23
00017c  e12120e0          DCB      0xe1,0x21,0x20,0xe0
000180  a06061a1          DCB      0xa0,0x60,0x61,0xa1
000184  63a3a262          DCB      0x63,0xa3,0xa2,0x62
000188  66a6a767          DCB      0x66,0xa6,0xa7,0x67
00018c  a56564a4          DCB      0xa5,0x65,0x64,0xa4
000190  6cacad6d          DCB      0x6c,0xac,0xad,0x6d
000194  af6f6eae          DCB      0xaf,0x6f,0x6e,0xae
000198  aa6a6bab          DCB      0xaa,0x6a,0x6b,0xab
00019c  69a9a868          DCB      0x69,0xa9,0xa8,0x68
0001a0  78b8b979          DCB      0x78,0xb8,0xb9,0x79
0001a4  bb7b7aba          DCB      0xbb,0x7b,0x7a,0xba
0001a8  be7e7fbf          DCB      0xbe,0x7e,0x7f,0xbf
0001ac  7dbdbc7c          DCB      0x7d,0xbd,0xbc,0x7c
0001b0  b47475b5          DCB      0xb4,0x74,0x75,0xb5
0001b4  77b7b676          DCB      0x77,0xb7,0xb6,0x76
0001b8  72b2b373          DCB      0x72,0xb2,0xb3,0x73
0001bc  b17170b0          DCB      0xb1,0x71,0x70,0xb0
0001c0  50909151          DCB      0x50,0x90,0x91,0x51
0001c4  93535292          DCB      0x93,0x53,0x52,0x92
0001c8  96565797          DCB      0x96,0x56,0x57,0x97
0001cc  55959454          DCB      0x55,0x95,0x94,0x54
0001d0  9c5c5d9d          DCB      0x9c,0x5c,0x5d,0x9d
0001d4  5f9f9e5e          DCB      0x5f,0x9f,0x9e,0x5e
0001d8  5a9a9b5b          DCB      0x5a,0x9a,0x9b,0x5b
0001dc  99595898          DCB      0x99,0x59,0x58,0x98
0001e0  88484989          DCB      0x88,0x48,0x49,0x89
0001e4  4b8b8a4a          DCB      0x4b,0x8b,0x8a,0x4a
0001e8  4e8e8f4f          DCB      0x4e,0x8e,0x8f,0x4f
0001ec  8d4d4c8c          DCB      0x8d,0x4d,0x4c,0x8c
0001f0  44848545          DCB      0x44,0x84,0x85,0x45
0001f4  87474686          DCB      0x87,0x47,0x46,0x86
0001f8  82424383          DCB      0x82,0x42,0x43,0x83
0001fc  41818040          DCB      0x41,0x81,0x80,0x40
000200  0e008a00          DCB      0x0e,0x00,0x8a,0x00
                          %        12
000210  00000000          DCB      0x00,0x00,0x00,0x00
000214  16001a00          DCB      0x16,0x00,0x1a,0x00
000218  16006a00          DCB      0x16,0x00,0x6a,0x00
00021c  0e004b00          DCB      0x0e,0x00,0x4b,0x00
                          %        12
00022c  00000000          DCB      0x00,0x00,0x00,0x00
000230  1a005100          DCB      0x1a,0x00,0x51,0x00
000234  1a005100          DCB      0x1a,0x00,0x51,0x00
000238  1a005100          DCB      0x1a,0x00,0x51,0x00
00023c  0f005500          DCB      0x0f,0x00,0x55,0x00
000240  15005200          DCB      0x15,0x00,0x52,0x00
000244  01000000          DCB      0x01,0x00,0x00,0x00
000248  2a005300          DCB      0x2a,0x00,0x53,0x00
00024c  01000000          DCB      0x01,0x00,0x00,0x00
000250  0e005400          DCB      0x0e,0x00,0x54,0x00
                          %        12
000260  0000              DCB      0x00,0x00

                          AREA ||.data||, DATA, ALIGN=2

                  xHandleTaskUserIF
                          DCD      0x00000000
                  xHandleCheckNet
                          DCD      0x00000000
                  xHandleTaskWEB
                          DCD      0x00000000
                  xHandleTaskMsgPro
                          DCD      0x00000000
                  xHandleTaskStart
                          DCD      0x00000000
                  xSemaphore
                          DCD      0x00000000
                  xMutex
                          DCD      0x00000000
                  xPingTimers
                          DCD      0x00000000
                  xNoNetTimers
                          DCD      0x00000000
                  xCreatedEventGroup
                          DCD      0x00000000
                  xUpdataEventGroup
                          DCD      0x00000000
                  xQueue1
                          DCD      0x00000000
                  sms_topic
000030  2f646576          DCB      0x2f,0x64,0x65,0x76
000034  69645f30          DCB      0x69,0x64,0x5f,0x30
000038  30303030          DCB      0x30,0x30,0x30,0x30
00003c  30303030          DCB      0x30,0x30,0x30,0x30
000040  30303030          DCB      0x30,0x30,0x30,0x30
000044  3030302f          DCB      0x30,0x30,0x30,0x2f
000048  6e6f7469          DCB      0x6e,0x6f,0x74,0x69
00004c  63652f73          DCB      0x63,0x65,0x2f,0x73
000050  6d7300            DCB      0x6d,0x73,0x00
                  bleupdata_topic
000053  2f                DCB      0x2f
000054  64657669          DCB      0x64,0x65,0x76,0x69
000058  645f3030          DCB      0x64,0x5f,0x30,0x30
00005c  30303030          DCB      0x30,0x30,0x30,0x30
000060  30303030          DCB      0x30,0x30,0x30,0x30
000064  30303030          DCB      0x30,0x30,0x30,0x30
000068  30302f75          DCB      0x30,0x30,0x2f,0x75
00006c  70646174          DCB      0x70,0x64,0x61,0x74
000070  652f626c          DCB      0x65,0x2f,0x62,0x6c
000074  6500              DCB      0x65,0x00
                  userinfo_topic
000076  2f64              DCB      0x2f,0x64
000078  65766964          DCB      0x65,0x76,0x69,0x64
00007c  5f303030          DCB      0x5f,0x30,0x30,0x30
000080  30303030          DCB      0x30,0x30,0x30,0x30
000084  30303030          DCB      0x30,0x30,0x30,0x30
000088  30303030          DCB      0x30,0x30,0x30,0x30
00008c  302f7573          DCB      0x30,0x2f,0x75,0x73
000090  65725f69          DCB      0x65,0x72,0x5f,0x69
000094  6e666f2f          DCB      0x6e,0x66,0x6f,0x2f
000098  73657400          DCB      0x73,0x65,0x74,0x00
                  devcfgpara_topic
00009c  2f646576          DCB      0x2f,0x64,0x65,0x76
0000a0  69645f30          DCB      0x69,0x64,0x5f,0x30
0000a4  30303030          DCB      0x30,0x30,0x30,0x30
0000a8  30303030          DCB      0x30,0x30,0x30,0x30
0000ac  30303030          DCB      0x30,0x30,0x30,0x30
0000b0  3030302f          DCB      0x30,0x30,0x30,0x2f
0000b4  64657663          DCB      0x64,0x65,0x76,0x63
0000b8  66677061          DCB      0x66,0x67,0x70,0x61
0000bc  72612f73          DCB      0x72,0x61,0x2f,0x73
0000c0  657400            DCB      0x65,0x74,0x00
                  gatereset_topic
0000c3  2f                DCB      0x2f
0000c4  64657669          DCB      0x64,0x65,0x76,0x69
0000c8  645f3030          DCB      0x64,0x5f,0x30,0x30
0000cc  30303030          DCB      0x30,0x30,0x30,0x30
0000d0  30303030          DCB      0x30,0x30,0x30,0x30
0000d4  30303030          DCB      0x30,0x30,0x30,0x30
0000d8  30302f72          DCB      0x30,0x30,0x2f,0x72
0000dc  65736574          DCB      0x65,0x73,0x65,0x74
0000e0  2f676174          DCB      0x2f,0x67,0x61,0x74
0000e4  65776179          DCB      0x65,0x77,0x61,0x79
0000e8  00                DCB      0x00
                  gateupdata_topic
0000e9  2f6465            DCB      0x2f,0x64,0x65
0000ec  7669645f          DCB      0x76,0x69,0x64,0x5f
0000f0  30303030          DCB      0x30,0x30,0x30,0x30
0000f4  30303030          DCB      0x30,0x30,0x30,0x30
0000f8  30303030          DCB      0x30,0x30,0x30,0x30
0000fc  30303030          DCB      0x30,0x30,0x30,0x30
000100  2f757064          DCB      0x2f,0x75,0x70,0x64
000104  6174652f          DCB      0x61,0x74,0x65,0x2f
000108  67617465          DCB      0x67,0x61,0x74,0x65
00010c  77617900          DCB      0x77,0x61,0x79,0x00
                  bracelet_topic
000110  2f646576          DCB      0x2f,0x64,0x65,0x76
000114  69645f30          DCB      0x69,0x64,0x5f,0x30
000118  30303030          DCB      0x30,0x30,0x30,0x30
00011c  30303030          DCB      0x30,0x30,0x30,0x30
000120  30303030          DCB      0x30,0x30,0x30,0x30
000124  3030302f          DCB      0x30,0x30,0x30,0x2f
000128  75706461          DCB      0x75,0x70,0x64,0x61
00012c  74652f62          DCB      0x74,0x65,0x2f,0x62
000130  72616365          DCB      0x72,0x61,0x63,0x65
000134  6c657400          DCB      0x6c,0x65,0x74,0x00
                  UpdataBleSerialNumber
                          DCD      0x00000000
                  SportSerialNumber
                          DCD      0x00000000
                  HistorySportSerialNumber
                          DCD      0x00000000
                  SleeSerialNumber
                          DCD      0x00000000
                  SHTDataSerialNumber
                          DCD      0x00000000
                  HealthSerialNumber
                          DCD      0x00000000
                  LocationSerialNumber
                          DCD      0x00000000
                  BraceletInfoSerialNumber
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\..\\User\\app\\src\\app_plat.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___10_app_plat_c_1ff30746____REV16|
#line 114 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___10_app_plat_c_1ff30746____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___10_app_plat_c_1ff30746____REVSH|
#line 128
|__asm___10_app_plat_c_1ff30746____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
