; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\flash\obj\w5500.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\w5500.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931,870 -I..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\User\bsp -I..\..\User\bsp\inc -I..\..\User -I..\..\Libraries\CMSIS\Include -I..\..\FreeRTOS\include -I..\..\FreeRTOS\portable\RVDS\ARM_CM3 -I..\..\MQTT -I..\..\Ethernet -I..\..\Ethernet\W5500 -I..\..\Internet\DHCP -I..\..\Internet\DNS -I..\..\User\app\src -I..\..\User\app\inc -I..\..\Internet\NTP -I..\..\Internet\HTTP -I.\RTE\_Flash -ID:\MDK5\ARM\CMSIS\5.0.1\CMSIS\Include -ID:\MDK5\Keil\STM32F1xx_DFP\2.0.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=523 -D_RTE_ -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=.\flash\obj\w5500.crf ..\..\Ethernet\W5500\w5500.c]
                          THUMB

                          AREA ||i.WIZCHIP_READ||, CODE, READONLY, ALIGN=2

                  WIZCHIP_READ PROC
;;;60     
;;;61     uint8_t  WIZCHIP_READ(uint32_t AddrSel)
000000  b570              PUSH     {r4-r6,lr}
;;;62     {
000002  4604              MOV      r4,r0
;;;63        uint8_t ret;
;;;64     
;;;65        WIZCHIP_CRITICAL_ENTER();
000004  4910              LDR      r1,|L1.72|
000006  6888              LDR      r0,[r1,#8]  ; WIZCHIP
000008  4780              BLX      r0
;;;66        WIZCHIP.CS._select();
00000a  490f              LDR      r1,|L1.72|
00000c  6908              LDR      r0,[r1,#0x10]  ; WIZCHIP
00000e  4780              BLX      r0
;;;67     
;;;68     #if( (_WIZCHIP_IO_MODE_ & _WIZCHIP_IO_MODE_SPI_))
;;;69     
;;;70        #if  ( _WIZCHIP_IO_MODE_ == _WIZCHIP_IO_MODE_SPI_VDM_ )
;;;71        	   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);
000010  bf00              NOP      
;;;72        #elif( _WIZCHIP_IO_MODE_ == _WIZCHIP_IO_MODE_SPI_FDM_ )
;;;73        	   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_FDM_OP_LEN1_);
;;;74        #else
;;;75           #error "Unsupported _WIZCHIP_IO_SPI_ in W5500 !!!"
;;;76        #endif
;;;77     
;;;78        WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
000012  480d              LDR      r0,|L1.72|
000014  69c1              LDR      r1,[r0,#0x1c]
000016  f3c44007          UBFX     r0,r4,#16,#8
00001a  4788              BLX      r1
;;;79        WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
00001c  480a              LDR      r0,|L1.72|
00001e  69c1              LDR      r1,[r0,#0x1c]
000020  f3c42007          UBFX     r0,r4,#8,#8
000024  4788              BLX      r1
;;;80        WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
000026  b2e0              UXTB     r0,r4
000028  4a07              LDR      r2,|L1.72|
00002a  69d1              LDR      r1,[r2,#0x1c]
00002c  4788              BLX      r1
;;;81        ret = WIZCHIP.IF.SPI._read_byte();
00002e  4906              LDR      r1,|L1.72|
000030  6988              LDR      r0,[r1,#0x18]  ; WIZCHIP
000032  4780              BLX      r0
000034  4605              MOV      r5,r0
;;;82     
;;;83     #elif ( (_WIZCHIP_IO_MODE_ & _WIZCHIP_IO_MODE_BUS_) )
;;;84     
;;;85        #if  (_WIZCHIP_IO_MODE_ == _WIZCHIP_IO_MODE_BUS_DIR_)
;;;86     
;;;87        #elif(_WIZCHIP_IO_MODE_ == _WIZCHIP_IO_MODE_BUS_INDIR_)
;;;88     
;;;89        #else
;;;90           #error "Unsupported _WIZCHIP_IO_MODE_BUS_ in W5500 !!!"
;;;91        #endif
;;;92     #else
;;;93        #error "Unknown _WIZCHIP_IO_MODE_ in W5000. !!!"   
;;;94     #endif
;;;95     
;;;96        WIZCHIP.CS._deselect();
000036  4904              LDR      r1,|L1.72|
000038  6948              LDR      r0,[r1,#0x14]
00003a  4780              BLX      r0
;;;97        WIZCHIP_CRITICAL_EXIT();
00003c  4902              LDR      r1,|L1.72|
00003e  68c8              LDR      r0,[r1,#0xc]
000040  4780              BLX      r0
;;;98        return ret;
000042  4628              MOV      r0,r5
;;;99     }
000044  bd70              POP      {r4-r6,pc}
;;;100    
                          ENDP

000046  0000              DCW      0x0000
                  |L1.72|
                          DCD      WIZCHIP

                          AREA ||i.WIZCHIP_READ_BUF||, CODE, READONLY, ALIGN=2

                  WIZCHIP_READ_BUF PROC
;;;137             
;;;138    void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;139    {
000004  4604              MOV      r4,r0
000006  460e              MOV      r6,r1
000008  4617              MOV      r7,r2
;;;140       uint16_t i = 0;
00000a  2500              MOVS     r5,#0
;;;141       uint16_t j = 0;
00000c  46a8              MOV      r8,r5
;;;142       WIZCHIP_CRITICAL_ENTER();
00000e  4914              LDR      r1,|L2.96|
000010  6888              LDR      r0,[r1,#8]  ; WIZCHIP
000012  4780              BLX      r0
;;;143       WIZCHIP.CS._select();
000014  4912              LDR      r1,|L2.96|
000016  6908              LDR      r0,[r1,#0x10]  ; WIZCHIP
000018  4780              BLX      r0
;;;144    
;;;145    #if( (_WIZCHIP_IO_MODE_ & _WIZCHIP_IO_MODE_SPI_))
;;;146    
;;;147       #if  ( _WIZCHIP_IO_MODE_ == _WIZCHIP_IO_MODE_SPI_VDM_ )
;;;148          AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);
00001a  bf00              NOP      
;;;149          WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
00001c  4810              LDR      r0,|L2.96|
00001e  69c1              LDR      r1,[r0,#0x1c]
000020  f3c44007          UBFX     r0,r4,#16,#8
000024  4788              BLX      r1
;;;150          WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
000026  480e              LDR      r0,|L2.96|
000028  69c1              LDR      r1,[r0,#0x1c]
00002a  f3c42007          UBFX     r0,r4,#8,#8
00002e  4788              BLX      r1
;;;151          WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
000030  b2e0              UXTB     r0,r4
000032  4a0b              LDR      r2,|L2.96|
000034  69d1              LDR      r1,[r2,#0x1c]
000036  4788              BLX      r1
;;;152          for(i = 0; i < len; i++,j)
000038  bf00              NOP      
00003a  e006              B        |L2.74|
                  |L2.60|
;;;153            pBuf[i] = WIZCHIP.IF.SPI._read_byte();
00003c  4908              LDR      r1,|L2.96|
00003e  6988              LDR      r0,[r1,#0x18]  ; WIZCHIP
000040  4780              BLX      r0
000042  5570              STRB     r0,[r6,r5]
000044  1c68              ADDS     r0,r5,#1              ;152
000046  b285              UXTH     r5,r0                 ;152
000048  bf00              NOP                            ;152
                  |L2.74|
00004a  42bd              CMP      r5,r7                 ;152
00004c  dbf6              BLT      |L2.60|
;;;154       #elif( _WIZCHIP_IO_MODE_ == _WIZCHIP_IO_MODE_SPI_FDM_ )
;;;155          AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_FDM_OP_LEN4_);
;;;156          for(i = 0; i < len/4; i++, j)
;;;157          {
;;;158             WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
;;;159             WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
;;;160             WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
;;;161             pBuf[i*4]   = WIZCHIP.IF.SPI._read_byte();
;;;162             pBuf[i*4+1] = WIZCHIP.IF.SPI._read_byte();
;;;163             pBuf[i*4+2] = WIZCHIP.IF.SPI._read_byte();            
;;;164             pBuf[i*4+3] = WIZCHIP.IF.SPI._read_byte();            
;;;165             AddrSel = WIZCHIP_OFFSET_INC(AddrSel,4);
;;;166          }
;;;167          len %= 4;      // for the rest data
;;;168          // M20131220 : remove for loop
;;;169          i *= 4;        
;;;170          if(len >= 2)
;;;171          {
;;;172             AddrSel -= 1;  // change _W5500_SPI_FDM_OP_LEN4_ to _W5500_SPI_FDM_OP_LEN2_
;;;173    
;;;174           //for(j = 0; j < len/2 ; j++)
;;;175             {
;;;176                WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
;;;177                WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
;;;178                WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
;;;179                pBuf[i]   = WIZCHIP.IF.SPI._read_byte();
;;;180                pBuf[i+1] = WIZCHIP.IF.SPI._read_byte();
;;;181                i += 2;
;;;182                AddrSel = WIZCHIP_OFFSET_INC(AddrSel,2);
;;;183             }
;;;184          }
;;;185          len %= 2;
;;;186          if(len)
;;;187          {
;;;188            AddrSel -= 1;  // change _W5500_SPI_FDM_OP_LEN2_ to _W5500_SPI_FDM_OP_LEN1_
;;;189            WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
;;;190            WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
;;;191            WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
;;;192            pBuf[i]   = WIZCHIP.IF.SPI._read_byte();
;;;193          }      
;;;194       #else
;;;195          #error "Unsupported _WIZCHIP_IO_MODE_SPI_ in W5500 !!!"
;;;196       #endif
;;;197    
;;;198    #elif ( (_WIZCHIP_IO_MODE_ & _WIZCHIP_IO_MODE_BUS_) )
;;;199    
;;;200       #if  (_WIZCHIP_IO_MODE_ == _WIZCHIP_IO_MODE_BUS_DIR_)
;;;201    
;;;202       #elif(_WIZCHIP_IO_MODE_ == _WIZCHIP_IO_MODE_BUS_INDIR_)
;;;203    
;;;204       #else
;;;205          #error "Unsupported _WIZCHIP_IO_MODE_BUS_ in W5500 !!!"
;;;206       #endif
;;;207    #else
;;;208       #error "Unknown _WIZCHIP_IO_MODE_ in W5500. !!!!"
;;;209    #endif
;;;210    
;;;211       WIZCHIP.CS._deselect();
00004e  4904              LDR      r1,|L2.96|
000050  6948              LDR      r0,[r1,#0x14]
000052  4780              BLX      r0
;;;212       WIZCHIP_CRITICAL_EXIT();
000054  4902              LDR      r1,|L2.96|
000056  68c8              LDR      r0,[r1,#0xc]
000058  4780              BLX      r0
;;;213    }
00005a  e8bd81f0          POP      {r4-r8,pc}
;;;214    
                          ENDP

00005e  0000              DCW      0x0000
                  |L2.96|
                          DCD      WIZCHIP

                          AREA ||i.WIZCHIP_WRITE||, CODE, READONLY, ALIGN=2

                  WIZCHIP_WRITE PROC
;;;100    
;;;101    void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
000000  b570              PUSH     {r4-r6,lr}
;;;102    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;103        WIZCHIP_CRITICAL_ENTER();
000006  4910              LDR      r1,|L3.72|
000008  6888              LDR      r0,[r1,#8]  ; WIZCHIP
00000a  4780              BLX      r0
;;;104        WIZCHIP.CS._select();
00000c  490e              LDR      r1,|L3.72|
00000e  6908              LDR      r0,[r1,#0x10]  ; WIZCHIP
000010  4780              BLX      r0
;;;105    
;;;106    #if( (_WIZCHIP_IO_MODE_ & _WIZCHIP_IO_MODE_SPI_))
;;;107    
;;;108       #if  ( _WIZCHIP_IO_MODE_ == _WIZCHIP_IO_MODE_SPI_VDM_ )
;;;109       	   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
000012  f0440404          ORR      r4,r4,#4
;;;110       #elif( _WIZCHIP_IO_MODE_ == _WIZCHIP_IO_MODE_SPI_FDM_ )
;;;111       	   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_FDM_OP_LEN1_);
;;;112       #else
;;;113          #error "Unsupported _WIZCHIP_IO_SPI_ in W5500 !!!"
;;;114       #endif
;;;115    
;;;116       WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
000016  480c              LDR      r0,|L3.72|
000018  69c1              LDR      r1,[r0,#0x1c]
00001a  f3c44007          UBFX     r0,r4,#16,#8
00001e  4788              BLX      r1
;;;117       WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
000020  4809              LDR      r0,|L3.72|
000022  69c1              LDR      r1,[r0,#0x1c]
000024  f3c42007          UBFX     r0,r4,#8,#8
000028  4788              BLX      r1
;;;118       WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
00002a  b2e0              UXTB     r0,r4
00002c  4a06              LDR      r2,|L3.72|
00002e  69d1              LDR      r1,[r2,#0x1c]
000030  4788              BLX      r1
;;;119       WIZCHIP.IF.SPI._write_byte(wb);
000032  4805              LDR      r0,|L3.72|
000034  69c1              LDR      r1,[r0,#0x1c]
000036  4628              MOV      r0,r5
000038  4788              BLX      r1
;;;120    
;;;121    #elif ( (_WIZCHIP_IO_MODE_ & _WIZCHIP_IO_MODE_BUS_) )
;;;122    
;;;123       #if  (_WIZCHIP_IO_MODE_ == _WIZCHIP_IO_MODE_BUS_DIR_)
;;;124    
;;;125       #elif(_WIZCHIP_IO_MODE_ == _WIZCHIP_IO_MODE_BUS_INDIR_)
;;;126    
;;;127       #else
;;;128          #error "Unsupported _WIZCHIP_IO_MODE_BUS_ in W5500 !!!"
;;;129       #endif
;;;130    #else
;;;131       #error "Unknown _WIZCHIP_IO_MODE_ in W5500. !!!"
;;;132    #endif
;;;133    
;;;134       WIZCHIP.CS._deselect();
00003a  4903              LDR      r1,|L3.72|
00003c  6948              LDR      r0,[r1,#0x14]
00003e  4780              BLX      r0
;;;135       WIZCHIP_CRITICAL_EXIT();
000040  4901              LDR      r1,|L3.72|
000042  68c8              LDR      r0,[r1,#0xc]
000044  4780              BLX      r0
;;;136    }
000046  bd70              POP      {r4-r6,pc}
;;;137             
                          ENDP

                  |L3.72|
                          DCD      WIZCHIP

                          AREA ||i.WIZCHIP_WRITE_BUF||, CODE, READONLY, ALIGN=2

                  WIZCHIP_WRITE_BUF PROC
;;;214    
;;;215    void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;216    {
000004  4604              MOV      r4,r0
000006  460e              MOV      r6,r1
000008  4617              MOV      r7,r2
;;;217       uint16_t i = 0;
00000a  2500              MOVS     r5,#0
;;;218       uint16_t j = 0;
00000c  46a8              MOV      r8,r5
;;;219       WIZCHIP_CRITICAL_ENTER();
00000e  4914              LDR      r1,|L4.96|
000010  6888              LDR      r0,[r1,#8]  ; WIZCHIP
000012  4780              BLX      r0
;;;220       WIZCHIP.CS._select();
000014  4912              LDR      r1,|L4.96|
000016  6908              LDR      r0,[r1,#0x10]  ; WIZCHIP
000018  4780              BLX      r0
;;;221    
;;;222    #if( (_WIZCHIP_IO_MODE_ & _WIZCHIP_IO_MODE_SPI_))
;;;223    
;;;224       #if  ( _WIZCHIP_IO_MODE_ == _WIZCHIP_IO_MODE_SPI_VDM_ )
;;;225          AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
00001a  f0440404          ORR      r4,r4,#4
;;;226          WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
00001e  4810              LDR      r0,|L4.96|
000020  69c1              LDR      r1,[r0,#0x1c]
000022  f3c44007          UBFX     r0,r4,#16,#8
000026  4788              BLX      r1
;;;227          WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
000028  480d              LDR      r0,|L4.96|
00002a  69c1              LDR      r1,[r0,#0x1c]
00002c  f3c42007          UBFX     r0,r4,#8,#8
000030  4788              BLX      r1
;;;228          WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
000032  b2e0              UXTB     r0,r4
000034  4a0a              LDR      r2,|L4.96|
000036  69d1              LDR      r1,[r2,#0x1c]
000038  4788              BLX      r1
;;;229          for(i = 0; i < len; i++,j)
00003a  bf00              NOP      
00003c  e006              B        |L4.76|
                  |L4.62|
;;;230             WIZCHIP.IF.SPI._write_byte(pBuf[i]);
00003e  5d70              LDRB     r0,[r6,r5]
000040  4a07              LDR      r2,|L4.96|
000042  69d1              LDR      r1,[r2,#0x1c]
000044  4788              BLX      r1
000046  1c68              ADDS     r0,r5,#1              ;229
000048  b285              UXTH     r5,r0                 ;229
00004a  bf00              NOP                            ;229
                  |L4.76|
00004c  42bd              CMP      r5,r7                 ;229
00004e  dbf6              BLT      |L4.62|
;;;231       #elif( _WIZCHIP_IO_MODE_ == _WIZCHIP_IO_MODE_SPI_FDM_ )
;;;232          AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_FDM_OP_LEN4_);
;;;233          for(i = 0; i < len/4; i++, j)
;;;234          {
;;;235             WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
;;;236             WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
;;;237             WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
;;;238             WIZCHIP.IF.SPI._write_byte(pBuf[i*4]  );
;;;239             WIZCHIP.IF.SPI._write_byte(pBuf[i*4+1]);
;;;240             WIZCHIP.IF.SPI._write_byte(pBuf[i*4+2]);            
;;;241             WIZCHIP.IF.SPI._write_byte(pBuf[i*4+3]);            
;;;242             AddrSel = WIZCHIP_OFFSET_INC(AddrSel,4);
;;;243          }
;;;244          len %= 4;      // for the rest data
;;;245          // M20131220 : Remove for loop
;;;246          i *= 4;
;;;247          if(len >= 2)
;;;248          {
;;;249             AddrSel -= 1;  // change _W5500_SPI_FDM_OP_LEN4_ to _W5500_SPI_FDM_OP_LEN2_
;;;250    
;;;251           //for(j = 0; j < len/2 ; j++)
;;;252             {
;;;253                WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
;;;254                WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
;;;255                WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
;;;256                WIZCHIP.IF.SPI._write_byte(pBuf[i]  );
;;;257                WIZCHIP.IF.SPI._write_byte(pBuf[i+1]);
;;;258                i += 2;
;;;259                AddrSel = WIZCHIP_OFFSET_INC(AddrSel, 2);
;;;260             }
;;;261             len %= 2;
;;;262             if(len)
;;;263             {
;;;264                AddrSel -= 1;  // change _W5500_SPI_FDM_OP_LEN2_ to _W5500_SPI_FDM_OP_LEN1_
;;;265                WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
;;;266                WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
;;;267                WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
;;;268                WIZCHIP.IF.SPI._write_byte(pBuf[i]);
;;;269             }      
;;;270          }
;;;271       #else
;;;272          #error "Unsupported _WIZCHIP_IO_SPI_ in W5500 !!!"
;;;273       #endif
;;;274    
;;;275    #elif ( (_WIZCHIP_IO_MODE_ & _WIZCHIP_IO_MODE_BUS_) )
;;;276    
;;;277       #if  (_WIZCHIP_IO_MODE_ == _WIZCHIP_IO_MODE_BUS_DIR_)
;;;278    
;;;279       #elif(_WIZCHIP_IO_MODE_ == _WIZCHIP_IO_MODE_BUS_INDIR_)
;;;280    
;;;281       #else
;;;282          #error "Unsupported _WIZCHIP_IO_MODE_BUS_ in W5500 !!!"
;;;283       #endif
;;;284    #else
;;;285       #error "Unknown _WIZCHIP_IO_MODE_ in W5500. !!!!"
;;;286    #endif
;;;287    
;;;288       WIZCHIP.CS._deselect();
000050  4903              LDR      r1,|L4.96|
000052  6948              LDR      r0,[r1,#0x14]
000054  4780              BLX      r0
;;;289       WIZCHIP_CRITICAL_EXIT();
000056  4902              LDR      r1,|L4.96|
000058  68c8              LDR      r0,[r1,#0xc]
00005a  4780              BLX      r0
;;;290    }
00005c  e8bd81f0          POP      {r4-r8,pc}
;;;291    
                          ENDP

                  |L4.96|
                          DCD      WIZCHIP

                          AREA ||i.getSn_RX_RSR||, CODE, READONLY, ALIGN=1

                  getSn_RX_RSR PROC
;;;309    
;;;310    uint16_t getSn_RX_RSR(uint8_t sn)
000000  b570              PUSH     {r4-r6,lr}
;;;311    {
000002  4604              MOV      r4,r0
;;;312       uint16_t val=0,val1=0;
000004  2500              MOVS     r5,#0
000006  2600              MOVS     r6,#0
;;;313       do
000008  bf00              NOP      
                  |L5.10|
;;;314       {
;;;315          val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
00000a  00a1              LSLS     r1,r4,#2
00000c  1c49              ADDS     r1,r1,#1
00000e  f44f5218          MOV      r2,#0x2600
000012  eb0200c1          ADD      r0,r2,r1,LSL #3
000016  f7fffffe          BL       WIZCHIP_READ
00001a  4606              MOV      r6,r0
;;;316          val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
00001c  00a1              LSLS     r1,r4,#2
00001e  1c49              ADDS     r1,r1,#1
000020  f44f5218          MOV      r2,#0x2600
000024  eb0201c1          ADD      r1,r2,r1,LSL #3
000028  f5017080          ADD      r0,r1,#0x100
00002c  f7fffffe          BL       WIZCHIP_READ
000030  eb002006          ADD      r0,r0,r6,LSL #8
000034  b286              UXTH     r6,r0
;;;317          if (val1 != 0)
000036  b1ae              CBZ      r6,|L5.100|
;;;318          {
;;;319            val = WIZCHIP_READ(Sn_RX_RSR(sn));
000038  00a1              LSLS     r1,r4,#2
00003a  1c49              ADDS     r1,r1,#1
00003c  f44f5218          MOV      r2,#0x2600
000040  eb0200c1          ADD      r0,r2,r1,LSL #3
000044  f7fffffe          BL       WIZCHIP_READ
000048  4605              MOV      r5,r0
;;;320            val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
00004a  00a1              LSLS     r1,r4,#2
00004c  1c49              ADDS     r1,r1,#1
00004e  f44f5218          MOV      r2,#0x2600
000052  eb0201c1          ADD      r1,r2,r1,LSL #3
000056  f5017080          ADD      r0,r1,#0x100
00005a  f7fffffe          BL       WIZCHIP_READ
00005e  eb002005          ADD      r0,r0,r5,LSL #8
000062  b285              UXTH     r5,r0
                  |L5.100|
;;;321          }
;;;322       }while (val != val1);
000064  42b5              CMP      r5,r6
000066  d1d0              BNE      |L5.10|
;;;323       return val;
000068  4628              MOV      r0,r5
;;;324    }
00006a  bd70              POP      {r4-r6,pc}
;;;325    
                          ENDP


                          AREA ||i.getSn_TX_FSR||, CODE, READONLY, ALIGN=1

                  getSn_TX_FSR PROC
;;;292    
;;;293    uint16_t getSn_TX_FSR(uint8_t sn)
000000  b570              PUSH     {r4-r6,lr}
;;;294    {
000002  4604              MOV      r4,r0
;;;295       uint16_t val=0,val1=0;
000004  2500              MOVS     r5,#0
000006  2600              MOVS     r6,#0
;;;296       do
000008  bf00              NOP      
                  |L6.10|
;;;297       {
;;;298          val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
00000a  00a1              LSLS     r1,r4,#2
00000c  1c49              ADDS     r1,r1,#1
00000e  f44f5200          MOV      r2,#0x2000
000012  eb0200c1          ADD      r0,r2,r1,LSL #3
000016  f7fffffe          BL       WIZCHIP_READ
00001a  4606              MOV      r6,r0
;;;299          val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
00001c  00a1              LSLS     r1,r4,#2
00001e  1c49              ADDS     r1,r1,#1
000020  f44f5200          MOV      r2,#0x2000
000024  eb0201c1          ADD      r1,r2,r1,LSL #3
000028  f5017080          ADD      r0,r1,#0x100
00002c  f7fffffe          BL       WIZCHIP_READ
000030  eb002006          ADD      r0,r0,r6,LSL #8
000034  b286              UXTH     r6,r0
;;;300          if (val1 != 0)
000036  b1ae              CBZ      r6,|L6.100|
;;;301          {
;;;302            val = WIZCHIP_READ(Sn_TX_FSR(sn));
000038  00a1              LSLS     r1,r4,#2
00003a  1c49              ADDS     r1,r1,#1
00003c  f44f5200          MOV      r2,#0x2000
000040  eb0200c1          ADD      r0,r2,r1,LSL #3
000044  f7fffffe          BL       WIZCHIP_READ
000048  4605              MOV      r5,r0
;;;303            val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
00004a  00a1              LSLS     r1,r4,#2
00004c  1c49              ADDS     r1,r1,#1
00004e  f44f5200          MOV      r2,#0x2000
000052  eb0201c1          ADD      r1,r2,r1,LSL #3
000056  f5017080          ADD      r0,r1,#0x100
00005a  f7fffffe          BL       WIZCHIP_READ
00005e  eb002005          ADD      r0,r0,r5,LSL #8
000062  b285              UXTH     r5,r0
                  |L6.100|
;;;304          }
;;;305       }while (val != val1);
000064  42b5              CMP      r5,r6
000066  d1d0              BNE      |L6.10|
;;;306       return val;
000068  4628              MOV      r0,r5
;;;307    }
00006a  bd70              POP      {r4-r6,pc}
;;;308    
                          ENDP


                          AREA ||i.wiz_recv_data||, CODE, READONLY, ALIGN=1

                  wiz_recv_data PROC
;;;341    
;;;342    void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;343    {
000004  4604              MOV      r4,r0
000006  460f              MOV      r7,r1
000008  4616              MOV      r6,r2
;;;344       uint16_t ptr = 0;
00000a  2500              MOVS     r5,#0
;;;345       uint32_t addrsel = 0;
00000c  46a8              MOV      r8,r5
;;;346       
;;;347       if(len == 0) return;
00000e  b90e              CBNZ     r6,|L7.20|
                  |L7.16|
;;;348       ptr = getSn_RX_RD(sn);
;;;349       //M20140501 : implict type casting -> explict type casting
;;;350       //addrsel = ((ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
;;;351       addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
;;;352       //
;;;353       WIZCHIP_READ_BUF(addrsel, wizdata, len);
;;;354       ptr += len;
;;;355       
;;;356       setSn_RX_RD(sn,ptr);
;;;357    }
000010  e8bd87f0          POP      {r4-r10,pc}
                  |L7.20|
000014  00a1              LSLS     r1,r4,#2              ;348
000016  1c49              ADDS     r1,r1,#1              ;348
000018  f44f5220          MOV      r2,#0x2800            ;348
00001c  eb0201c1          ADD      r1,r2,r1,LSL #3       ;348
000020  f5017080          ADD      r0,r1,#0x100          ;348
000024  f7fffffe          BL       WIZCHIP_READ
000028  4681              MOV      r9,r0                 ;348
00002a  00a1              LSLS     r1,r4,#2              ;348
00002c  1c49              ADDS     r1,r1,#1              ;348
00002e  f44f5220          MOV      r2,#0x2800            ;348
000032  eb0200c1          ADD      r0,r2,r1,LSL #3       ;348
000036  f7fffffe          BL       WIZCHIP_READ
00003a  eb092000          ADD      r0,r9,r0,LSL #8       ;348
00003e  b285              UXTH     r5,r0                 ;348
000040  0229              LSLS     r1,r5,#8              ;351
000042  00a0              LSLS     r0,r4,#2              ;351
000044  1cc0              ADDS     r0,r0,#3              ;351
000046  eb0108c0          ADD      r8,r1,r0,LSL #3       ;351
00004a  4632              MOV      r2,r6                 ;353
00004c  4639              MOV      r1,r7                 ;353
00004e  4640              MOV      r0,r8                 ;353
000050  f7fffffe          BL       WIZCHIP_READ_BUF
000054  19a8              ADDS     r0,r5,r6              ;354
000056  b285              UXTH     r5,r0                 ;354
000058  1229              ASRS     r1,r5,#8              ;356
00005a  00a2              LSLS     r2,r4,#2              ;356
00005c  1c52              ADDS     r2,r2,#1              ;356
00005e  f44f5320          MOV      r3,#0x2800            ;356
000062  eb0300c2          ADD      r0,r3,r2,LSL #3       ;356
000066  f7fffffe          BL       WIZCHIP_WRITE
00006a  b2e9              UXTB     r1,r5                 ;356
00006c  00a2              LSLS     r2,r4,#2              ;356
00006e  1c52              ADDS     r2,r2,#1              ;356
000070  f44f5320          MOV      r3,#0x2800            ;356
000074  eb0302c2          ADD      r2,r3,r2,LSL #3       ;356
000078  f5027080          ADD      r0,r2,#0x100          ;356
00007c  f7fffffe          BL       WIZCHIP_WRITE
000080  bf00              NOP      
000082  e7c5              B        |L7.16|
;;;358    
                          ENDP


                          AREA ||i.wiz_recv_ignore||, CODE, READONLY, ALIGN=1

                  wiz_recv_ignore PROC
;;;359    
;;;360    void wiz_recv_ignore(uint8_t sn, uint16_t len)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;361    {
000004  4604              MOV      r4,r0
000006  460e              MOV      r6,r1
;;;362       uint16_t ptr = 0;
000008  2500              MOVS     r5,#0
;;;363       ptr = getSn_RX_RD(sn);
00000a  00a1              LSLS     r1,r4,#2
00000c  1c49              ADDS     r1,r1,#1
00000e  f44f5220          MOV      r2,#0x2800
000012  eb0201c1          ADD      r1,r2,r1,LSL #3
000016  f5017080          ADD      r0,r1,#0x100
00001a  f7fffffe          BL       WIZCHIP_READ
00001e  4607              MOV      r7,r0
000020  00a1              LSLS     r1,r4,#2
000022  1c49              ADDS     r1,r1,#1
000024  f44f5220          MOV      r2,#0x2800
000028  eb0200c1          ADD      r0,r2,r1,LSL #3
00002c  f7fffffe          BL       WIZCHIP_READ
000030  eb072000          ADD      r0,r7,r0,LSL #8
000034  b285              UXTH     r5,r0
;;;364       ptr += len;
000036  19a8              ADDS     r0,r5,r6
000038  b285              UXTH     r5,r0
;;;365       setSn_RX_RD(sn,ptr);
00003a  1229              ASRS     r1,r5,#8
00003c  00a2              LSLS     r2,r4,#2
00003e  1c52              ADDS     r2,r2,#1
000040  f44f5320          MOV      r3,#0x2800
000044  eb0300c2          ADD      r0,r3,r2,LSL #3
000048  f7fffffe          BL       WIZCHIP_WRITE
00004c  b2e9              UXTB     r1,r5
00004e  00a2              LSLS     r2,r4,#2
000050  1c52              ADDS     r2,r2,#1
000052  f44f5320          MOV      r3,#0x2800
000056  eb0302c2          ADD      r2,r3,r2,LSL #3
00005a  f5027080          ADD      r0,r2,#0x100
00005e  f7fffffe          BL       WIZCHIP_WRITE
;;;366    }
000062  e8bd81f0          POP      {r4-r8,pc}
;;;367    
                          ENDP


                          AREA ||i.wiz_send_data||, CODE, READONLY, ALIGN=1

                  wiz_send_data PROC
;;;325    
;;;326    void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;327    {
000004  4604              MOV      r4,r0
000006  460f              MOV      r7,r1
000008  4616              MOV      r6,r2
;;;328       uint16_t ptr = 0;
00000a  2500              MOVS     r5,#0
;;;329       uint32_t addrsel = 0;
00000c  46a8              MOV      r8,r5
;;;330       if(len == 0)  return;
00000e  b90e              CBNZ     r6,|L9.20|
                  |L9.16|
;;;331       ptr = getSn_TX_WR(sn);
;;;332       //M20140501 : implict type casting -> explict type casting
;;;333       //addrsel = (ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
;;;334       addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
;;;335       //
;;;336       WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
;;;337       
;;;338       ptr += len;
;;;339       setSn_TX_WR(sn,ptr);
;;;340    }
000010  e8bd87f0          POP      {r4-r10,pc}
                  |L9.20|
000014  00a1              LSLS     r1,r4,#2              ;331
000016  1c49              ADDS     r1,r1,#1              ;331
000018  f44f5210          MOV      r2,#0x2400            ;331
00001c  eb0201c1          ADD      r1,r2,r1,LSL #3       ;331
000020  f5017080          ADD      r0,r1,#0x100          ;331
000024  f7fffffe          BL       WIZCHIP_READ
000028  4681              MOV      r9,r0                 ;331
00002a  00a1              LSLS     r1,r4,#2              ;331
00002c  1c49              ADDS     r1,r1,#1              ;331
00002e  f44f5210          MOV      r2,#0x2400            ;331
000032  eb0200c1          ADD      r0,r2,r1,LSL #3       ;331
000036  f7fffffe          BL       WIZCHIP_READ
00003a  eb092000          ADD      r0,r9,r0,LSL #8       ;331
00003e  b285              UXTH     r5,r0                 ;331
000040  0229              LSLS     r1,r5,#8              ;334
000042  00a0              LSLS     r0,r4,#2              ;334
000044  1c80              ADDS     r0,r0,#2              ;334
000046  eb0108c0          ADD      r8,r1,r0,LSL #3       ;334
00004a  4632              MOV      r2,r6                 ;336
00004c  4639              MOV      r1,r7                 ;336
00004e  4640              MOV      r0,r8                 ;336
000050  f7fffffe          BL       WIZCHIP_WRITE_BUF
000054  19a8              ADDS     r0,r5,r6              ;338
000056  b285              UXTH     r5,r0                 ;338
000058  1229              ASRS     r1,r5,#8              ;339
00005a  00a2              LSLS     r2,r4,#2              ;339
00005c  1c52              ADDS     r2,r2,#1              ;339
00005e  f44f5310          MOV      r3,#0x2400            ;339
000062  eb0300c2          ADD      r0,r3,r2,LSL #3       ;339
000066  f7fffffe          BL       WIZCHIP_WRITE
00006a  b2e9              UXTB     r1,r5                 ;339
00006c  00a2              LSLS     r2,r4,#2              ;339
00006e  1c52              ADDS     r2,r2,#1              ;339
000070  f44f5310          MOV      r3,#0x2400            ;339
000074  eb0302c2          ADD      r2,r3,r2,LSL #3       ;339
000078  f5027080          ADD      r0,r2,#0x100          ;339
00007c  f7fffffe          BL       WIZCHIP_WRITE
000080  bf00              NOP      
000082  e7c5              B        |L9.16|
;;;341    
                          ENDP

