; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\flash\obj\socket.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\socket.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931,870 -I..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\User\bsp -I..\..\User\bsp\inc -I..\..\User -I..\..\Libraries\CMSIS\Include -I..\..\FreeRTOS\include -I..\..\FreeRTOS\portable\RVDS\ARM_CM3 -I..\..\MQTT -I..\..\Ethernet -I..\..\Ethernet\W5500 -I..\..\Internet\DHCP -I..\..\Internet\DNS -I..\..\User\app\src -I..\..\User\app\inc -I..\..\Internet\NTP -I..\..\Internet\HTTP -I.\RTE\_Flash -ID:\MDK5\ARM\CMSIS\5.0.1\CMSIS\Include -ID:\MDK5\Keil\STM32F1xx_DFP\2.0.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=523 -D_RTE_ -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=.\flash\obj\socket.crf ..\..\Ethernet\socket.c]
                          THUMB

                          AREA ||i.close||, CODE, READONLY, ALIGN=2

                  close PROC
;;;150    
;;;151    int8_t close(uint8_t sn)
000000  b510              PUSH     {r4,lr}
;;;152    {
000002  4604              MOV      r4,r0
;;;153    	CHECK_SOCKNUM();
000004  bf00              NOP      
000006  2c08              CMP      r4,#8
000008  dd02              BLE      |L1.16|
00000a  f04f30ff          MOV      r0,#0xffffffff
                  |L1.14|
;;;154    	
;;;155    	setSn_CR(sn,Sn_CR_CLOSE);
;;;156       /* wait to process the command... */
;;;157    	while( getSn_CR(sn) );
;;;158    	/* clear all interrupt of the socket. */
;;;159    	setSn_IR(sn, 0xFF);
;;;160    	sock_is_sending &= ~(1<<sn);
;;;161    	sock_remained_size[sn] = 0;
;;;162    	sock_pack_info[sn] = 0;
;;;163    	while(getSn_SR(sn) != SOCK_CLOSED);
;;;164    	return SOCK_OK;
;;;165    }
00000e  bd10              POP      {r4,pc}
                  |L1.16|
000010  bf00              NOP                            ;153
000012  00a1              LSLS     r1,r4,#2              ;155
000014  1c49              ADDS     r1,r1,#1              ;155
000016  f44f7280          MOV      r2,#0x100             ;155
00001a  eb0200c1          ADD      r0,r2,r1,LSL #3       ;155
00001e  2110              MOVS     r1,#0x10              ;155
000020  f7fffffe          BL       WIZCHIP_WRITE
000024  bf00              NOP                            ;157
                  |L1.38|
000026  00a1              LSLS     r1,r4,#2              ;157
000028  1c49              ADDS     r1,r1,#1              ;157
00002a  f44f7280          MOV      r2,#0x100             ;157
00002e  eb0200c1          ADD      r0,r2,r1,LSL #3       ;157
000032  f7fffffe          BL       WIZCHIP_READ
000036  2800              CMP      r0,#0                 ;157
000038  d1f5              BNE      |L1.38|
00003a  00a1              LSLS     r1,r4,#2              ;159
00003c  1c49              ADDS     r1,r1,#1              ;159
00003e  f44f7200          MOV      r2,#0x200             ;159
000042  eb0200c1          ADD      r0,r2,r1,LSL #3       ;159
000046  211f              MOVS     r1,#0x1f              ;159
000048  f7fffffe          BL       WIZCHIP_WRITE
00004c  2001              MOVS     r0,#1                 ;160
00004e  40a0              LSLS     r0,r0,r4              ;160
000050  490b              LDR      r1,|L1.128|
000052  8809              LDRH     r1,[r1,#0]            ;160  ; sock_is_sending
000054  4381              BICS     r1,r1,r0              ;160
000056  480a              LDR      r0,|L1.128|
000058  8001              STRH     r1,[r0,#0]            ;160
00005a  2000              MOVS     r0,#0                 ;161
00005c  4909              LDR      r1,|L1.132|
00005e  f8210014          STRH     r0,[r1,r4,LSL #1]     ;161
000062  4909              LDR      r1,|L1.136|
000064  5508              STRB     r0,[r1,r4]            ;162
000066  bf00              NOP                            ;163
                  |L1.104|
000068  00a1              LSLS     r1,r4,#2              ;163
00006a  1c49              ADDS     r1,r1,#1              ;163
00006c  f44f7240          MOV      r2,#0x300             ;163
000070  eb0200c1          ADD      r0,r2,r1,LSL #3       ;163
000074  f7fffffe          BL       WIZCHIP_READ
000078  2800              CMP      r0,#0                 ;163
00007a  d1f5              BNE      |L1.104|
00007c  2001              MOVS     r0,#1                 ;164
00007e  e7c6              B        |L1.14|
;;;166    
                          ENDP

                  |L1.128|
                          DCD      sock_is_sending
                  |L1.132|
                          DCD      sock_remained_size
                  |L1.136|
                          DCD      sock_pack_info

                          AREA ||i.connect||, CODE, READONLY, ALIGN=2

                  connect PROC
;;;185    
;;;186    int8_t connect(uint8_t sn, uint8_t * addr, uint16_t port)
000000  b570              PUSH     {r4-r6,lr}
;;;187    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4616              MOV      r6,r2
;;;188       CHECK_SOCKNUM();
000008  bf00              NOP      
00000a  2c08              CMP      r4,#8
00000c  dd02              BLE      |L2.20|
00000e  f04f30ff          MOV      r0,#0xffffffff
                  |L2.18|
;;;189       CHECK_SOCKMODE(Sn_MR_TCP);
;;;190       CHECK_SOCKINIT();
;;;191       //M20140501 : For avoiding fatal error on memory align mismatched
;;;192       //if( *((uint32_t*)addr) == 0xFFFFFFFF || *((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
;;;193       {
;;;194          uint32_t taddr;
;;;195          taddr = ((uint32_t)addr[0] & 0x000000FF);
;;;196          taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
;;;197          taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
;;;198          taddr = (taddr << 8) + ((uint32_t)addr[0] & 0x000000FF);
;;;199          if( taddr == 0xFFFFFFFF || taddr == 0) return SOCKERR_IPINVALID;
;;;200       }
;;;201       //
;;;202    	
;;;203    	if(port == 0) return SOCKERR_PORTZERO;
;;;204    	setSn_DIPR(sn,addr);
;;;205    	setSn_DPORT(sn,port);
;;;206       #if _WIZCHIP_ == 5200   // for W5200 ARP errata 
;;;207          setSUBR(0);
;;;208       #endif
;;;209    	setSn_CR(sn,Sn_CR_CONNECT);
;;;210       while(getSn_CR(sn));
;;;211       if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
;;;212       while(getSn_SR(sn) != SOCK_ESTABLISHED)
;;;213       {   
;;;214    		if (getSn_IR(sn) & Sn_IR_TIMEOUT)
;;;215    		{
;;;216    			setSn_IR(sn, Sn_IR_TIMEOUT);
;;;217             #if _WIZCHIP_ == 5200   // for W5200 ARP errata 
;;;218                setSUBR((uint8_t*)"\x00\x00\x00\x00");
;;;219             #endif
;;;220             return SOCKERR_TIMEOUT;
;;;221    		}
;;;222    	}
;;;223       #if _WIZCHIP_ == 5200   // for W5200 ARP errata 
;;;224          setSUBR((uint8_t*)"\x00\x00\x00\x00");
;;;225       #endif
;;;226       
;;;227       return SOCK_OK;
;;;228    }
000012  bd70              POP      {r4-r6,pc}
                  |L2.20|
000014  bf00              NOP                            ;188
000016  bf00              NOP                            ;189
000018  00a1              LSLS     r1,r4,#2              ;189
00001a  1c49              ADDS     r1,r1,#1              ;189
00001c  2200              MOVS     r2,#0                 ;189
00001e  eb0200c1          ADD      r0,r2,r1,LSL #3       ;189
000022  f7fffffe          BL       WIZCHIP_READ
000026  f000000f          AND      r0,r0,#0xf            ;189
00002a  2801              CMP      r0,#1                 ;189
00002c  d002              BEQ      |L2.52|
00002e  f06f0004          MVN      r0,#4                 ;189
000032  e7ee              B        |L2.18|
                  |L2.52|
000034  bf00              NOP                            ;189
000036  bf00              NOP                            ;190
000038  00a1              LSLS     r1,r4,#2              ;190
00003a  1c49              ADDS     r1,r1,#1              ;190
00003c  f44f7240          MOV      r2,#0x300             ;190
000040  eb0200c1          ADD      r0,r2,r1,LSL #3       ;190
000044  f7fffffe          BL       WIZCHIP_READ
000048  2813              CMP      r0,#0x13              ;190
00004a  d002              BEQ      |L2.82|
00004c  f06f0002          MVN      r0,#2                 ;190
000050  e7df              B        |L2.18|
                  |L2.82|
000052  bf00              NOP                            ;190
000054  7829              LDRB     r1,[r5,#0]            ;195
000056  7868              LDRB     r0,[r5,#1]            ;196
000058  f361201f          BFI      r0,r1,#8,#24          ;196
00005c  4601              MOV      r1,r0                 ;196
00005e  78a8              LDRB     r0,[r5,#2]            ;197
000060  f361201f          BFI      r0,r1,#8,#24          ;197
000064  4601              MOV      r1,r0                 ;197
000066  7828              LDRB     r0,[r5,#0]            ;198
000068  f361201f          BFI      r0,r1,#8,#24          ;198
00006c  4601              MOV      r1,r0                 ;198
00006e  1c48              ADDS     r0,r1,#1              ;199
000070  b100              CBZ      r0,|L2.116|
000072  b911              CBNZ     r1,|L2.122|
                  |L2.116|
000074  f06f000b          MVN      r0,#0xb               ;199
000078  e7cb              B        |L2.18|
                  |L2.122|
00007a  b916              CBNZ     r6,|L2.130|
00007c  f06f000a          MVN      r0,#0xa               ;203
000080  e7c7              B        |L2.18|
                  |L2.130|
000082  00a1              LSLS     r1,r4,#2              ;204
000084  1c49              ADDS     r1,r1,#1              ;204
000086  f44f6240          MOV      r2,#0xc00             ;204
00008a  eb0200c1          ADD      r0,r2,r1,LSL #3       ;204
00008e  2204              MOVS     r2,#4                 ;204
000090  4629              MOV      r1,r5                 ;204
000092  f7fffffe          BL       WIZCHIP_WRITE_BUF
000096  1231              ASRS     r1,r6,#8              ;205
000098  00a2              LSLS     r2,r4,#2              ;205
00009a  1c52              ADDS     r2,r2,#1              ;205
00009c  f44f5380          MOV      r3,#0x1000            ;205
0000a0  eb0300c2          ADD      r0,r3,r2,LSL #3       ;205
0000a4  f7fffffe          BL       WIZCHIP_WRITE
0000a8  b2f1              UXTB     r1,r6                 ;205
0000aa  00a2              LSLS     r2,r4,#2              ;205
0000ac  1c52              ADDS     r2,r2,#1              ;205
0000ae  f44f5380          MOV      r3,#0x1000            ;205
0000b2  eb0302c2          ADD      r2,r3,r2,LSL #3       ;205
0000b6  f5027080          ADD      r0,r2,#0x100          ;205
0000ba  f7fffffe          BL       WIZCHIP_WRITE
0000be  00a1              LSLS     r1,r4,#2              ;209
0000c0  1c49              ADDS     r1,r1,#1              ;209
0000c2  f44f7280          MOV      r2,#0x100             ;209
0000c6  eb0200c1          ADD      r0,r2,r1,LSL #3       ;209
0000ca  2104              MOVS     r1,#4                 ;209
0000cc  f7fffffe          BL       WIZCHIP_WRITE
0000d0  bf00              NOP                            ;210
                  |L2.210|
0000d2  00a1              LSLS     r1,r4,#2              ;210
0000d4  1c49              ADDS     r1,r1,#1              ;210
0000d6  f44f7280          MOV      r2,#0x100             ;210
0000da  eb0200c1          ADD      r0,r2,r1,LSL #3       ;210
0000de  f7fffffe          BL       WIZCHIP_READ
0000e2  2800              CMP      r0,#0                 ;210
0000e4  d1f5              BNE      |L2.210|
0000e6  2001              MOVS     r0,#1                 ;211
0000e8  40a0              LSLS     r0,r0,r4              ;211
0000ea  4915              LDR      r1,|L2.320|
0000ec  8809              LDRH     r1,[r1,#0]            ;211  ; sock_io_mode
0000ee  4008              ANDS     r0,r0,r1              ;211
0000f0  b108              CBZ      r0,|L2.246|
0000f2  2000              MOVS     r0,#0                 ;211
0000f4  e78d              B        |L2.18|
                  |L2.246|
0000f6  e016              B        |L2.294|
                  |L2.248|
0000f8  00a1              LSLS     r1,r4,#2              ;214
0000fa  1c49              ADDS     r1,r1,#1              ;214
0000fc  f44f7200          MOV      r2,#0x200             ;214
000100  eb0200c1          ADD      r0,r2,r1,LSL #3       ;214
000104  f7fffffe          BL       WIZCHIP_READ
000108  f0000008          AND      r0,r0,#8              ;214
00010c  b158              CBZ      r0,|L2.294|
00010e  00a1              LSLS     r1,r4,#2              ;216
000110  1c49              ADDS     r1,r1,#1              ;216
000112  f44f7200          MOV      r2,#0x200             ;216
000116  eb0200c1          ADD      r0,r2,r1,LSL #3       ;216
00011a  2108              MOVS     r1,#8                 ;216
00011c  f7fffffe          BL       WIZCHIP_WRITE
000120  f06f000c          MVN      r0,#0xc               ;220
000124  e775              B        |L2.18|
                  |L2.294|
000126  00a1              LSLS     r1,r4,#2              ;212
000128  1c49              ADDS     r1,r1,#1              ;212
00012a  f44f7240          MOV      r2,#0x300             ;212
00012e  eb0200c1          ADD      r0,r2,r1,LSL #3       ;212
000132  f7fffffe          BL       WIZCHIP_READ
000136  2817              CMP      r0,#0x17              ;212
000138  d1de              BNE      |L2.248|
00013a  2001              MOVS     r0,#1                 ;227
00013c  e769              B        |L2.18|
;;;229    
                          ENDP

00013e  0000              DCW      0x0000
                  |L2.320|
                          DCD      sock_io_mode

                          AREA ||i.ctlsocket||, CODE, READONLY, ALIGN=2

                  ctlsocket PROC
;;;544    
;;;545    int8_t  ctlsocket(uint8_t sn, ctlsock_type cstype, void* arg)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;546    {
000004  4604              MOV      r4,r0
000006  460e              MOV      r6,r1
000008  4615              MOV      r5,r2
;;;547       uint8_t tmp = 0;
00000a  2700              MOVS     r7,#0
;;;548       CHECK_SOCKNUM();
00000c  bf00              NOP      
00000e  2c08              CMP      r4,#8
000010  dd02              BLE      |L3.24|
000012  1e78              SUBS     r0,r7,#1
                  |L3.20|
;;;549       switch(cstype)
;;;550       {
;;;551          case CS_SET_IOMODE:
;;;552             tmp = *((uint8_t*)arg);
;;;553             if(tmp == SOCK_IO_NONBLOCK)  sock_io_mode |= (1<<sn);
;;;554             else if(tmp == SOCK_IO_BLOCK) sock_io_mode &= ~(1<<sn);
;;;555             else return SOCKERR_ARG;
;;;556             break;
;;;557          case CS_GET_IOMODE:   
;;;558             //M20140501 : implict type casting -> explict type casting
;;;559             //*((uint8_t*)arg) = (sock_io_mode >> sn) & 0x0001;
;;;560             *((uint8_t*)arg) = (uint8_t)((sock_io_mode >> sn) & 0x0001);
;;;561             //
;;;562             break;
;;;563          case CS_GET_MAXTXBUF:
;;;564             *((uint16_t*)arg) = getSn_TxMAX(sn);
;;;565             break;
;;;566          case CS_GET_MAXRXBUF:    
;;;567             *((uint16_t*)arg) = getSn_RxMAX(sn);
;;;568             break;
;;;569          case CS_CLR_INTERRUPT:
;;;570             if( (*(uint8_t*)arg) > SIK_ALL) return SOCKERR_ARG;
;;;571             setSn_IR(sn,*(uint8_t*)arg);
;;;572             break;
;;;573          case CS_GET_INTERRUPT:
;;;574             *((uint8_t*)arg) = getSn_IR(sn);
;;;575             break;
;;;576          case CS_SET_INTMASK:  
;;;577             if( (*(uint8_t*)arg) > SIK_ALL) return SOCKERR_ARG;
;;;578             setSn_IMR(sn,*(uint8_t*)arg);
;;;579             break;
;;;580          case CS_GET_INTMASK:   
;;;581             *((uint8_t*)arg) = getSn_IMR(sn);
;;;582          default:
;;;583             return SOCKERR_ARG;
;;;584       }
;;;585       return SOCK_OK;
;;;586    }
000014  e8bd81f0          POP      {r4-r8,pc}
                  |L3.24|
000018  bf00              NOP                            ;548
00001a  2e08              CMP      r6,#8                 ;549
00001c  d27d              BCS      |L3.282|
00001e  e8dff006          TBB      [pc,r6]               ;549
000022  041c              DCB      0x04,0x1c
000024  23313f51          DCB      0x23,0x31,0x3f,0x51
000028  5d70              DCB      0x5d,0x70
00002a  782f              LDRB     r7,[r5,#0]            ;552
00002c  2f01              CMP      r7,#1                 ;553
00002e  d107              BNE      |L3.64|
000030  2001              MOVS     r0,#1                 ;553
000032  40a0              LSLS     r0,r0,r4              ;553
000034  493c              LDR      r1,|L3.296|
000036  8809              LDRH     r1,[r1,#0]            ;553  ; sock_io_mode
000038  4308              ORRS     r0,r0,r1              ;553
00003a  493b              LDR      r1,|L3.296|
00003c  8008              STRH     r0,[r1,#0]            ;553
00003e  e00b              B        |L3.88|
                  |L3.64|
000040  b93f              CBNZ     r7,|L3.82|
000042  2001              MOVS     r0,#1                 ;554
000044  40a0              LSLS     r0,r0,r4              ;554
000046  4938              LDR      r1,|L3.296|
000048  8809              LDRH     r1,[r1,#0]            ;554  ; sock_io_mode
00004a  4381              BICS     r1,r1,r0              ;554
00004c  4836              LDR      r0,|L3.296|
00004e  8001              STRH     r1,[r0,#0]            ;554
000050  e002              B        |L3.88|
                  |L3.82|
000052  f06f0009          MVN      r0,#9                 ;555
000056  e7dd              B        |L3.20|
                  |L3.88|
000058  e062              B        |L3.288|
00005a  4833              LDR      r0,|L3.296|
00005c  8800              LDRH     r0,[r0,#0]            ;560  ; sock_io_mode
00005e  4120              ASRS     r0,r0,r4              ;560
000060  f0000001          AND      r0,r0,#1              ;560
000064  7028              STRB     r0,[r5,#0]            ;560
000066  e05b              B        |L3.288|
000068  00a1              LSLS     r1,r4,#2              ;564
00006a  1c49              ADDS     r1,r1,#1              ;564
00006c  f44f52f8          MOV      r2,#0x1f00            ;564
000070  eb0200c1          ADD      r0,r2,r1,LSL #3       ;564
000074  f7fffffe          BL       WIZCHIP_READ
000078  f64f71ff          MOV      r1,#0xffff            ;564
00007c  ea012080          AND      r0,r1,r0,LSL #10      ;564
000080  8028              STRH     r0,[r5,#0]            ;564
000082  e04d              B        |L3.288|
000084  00a1              LSLS     r1,r4,#2              ;567
000086  1c49              ADDS     r1,r1,#1              ;567
000088  f44f52f0          MOV      r2,#0x1e00            ;567
00008c  eb0200c1          ADD      r0,r2,r1,LSL #3       ;567
000090  f7fffffe          BL       WIZCHIP_READ
000094  f64f71ff          MOV      r1,#0xffff            ;567
000098  ea012080          AND      r0,r1,r0,LSL #10      ;567
00009c  8028              STRH     r0,[r5,#0]            ;567
00009e  e03f              B        |L3.288|
0000a0  7828              LDRB     r0,[r5,#0]            ;570
0000a2  281f              CMP      r0,#0x1f              ;570
0000a4  dd02              BLE      |L3.172|
0000a6  f06f0009          MVN      r0,#9                 ;570
0000aa  e7b3              B        |L3.20|
                  |L3.172|
0000ac  782a              LDRB     r2,[r5,#0]            ;571
0000ae  f002011f          AND      r1,r2,#0x1f           ;571
0000b2  00a2              LSLS     r2,r4,#2              ;571
0000b4  1c52              ADDS     r2,r2,#1              ;571
0000b6  f44f7300          MOV      r3,#0x200             ;571
0000ba  eb0300c2          ADD      r0,r3,r2,LSL #3       ;571
0000be  f7fffffe          BL       WIZCHIP_WRITE
0000c2  e02d              B        |L3.288|
0000c4  00a1              LSLS     r1,r4,#2              ;574
0000c6  1c49              ADDS     r1,r1,#1              ;574
0000c8  f44f7200          MOV      r2,#0x200             ;574
0000cc  eb0200c1          ADD      r0,r2,r1,LSL #3       ;574
0000d0  f7fffffe          BL       WIZCHIP_READ
0000d4  f000001f          AND      r0,r0,#0x1f           ;574
0000d8  7028              STRB     r0,[r5,#0]            ;574
0000da  e021              B        |L3.288|
0000dc  7828              LDRB     r0,[r5,#0]            ;577
0000de  281f              CMP      r0,#0x1f              ;577
0000e0  dd02              BLE      |L3.232|
0000e2  f06f0009          MVN      r0,#9                 ;577
0000e6  e795              B        |L3.20|
                  |L3.232|
0000e8  782a              LDRB     r2,[r5,#0]            ;578
0000ea  f002011f          AND      r1,r2,#0x1f           ;578
0000ee  00a2              LSLS     r2,r4,#2              ;578
0000f0  1c52              ADDS     r2,r2,#1              ;578
0000f2  f44f5330          MOV      r3,#0x2c00            ;578
0000f6  eb0300c2          ADD      r0,r3,r2,LSL #3       ;578
0000fa  f7fffffe          BL       WIZCHIP_WRITE
0000fe  e00f              B        |L3.288|
000100  e00b              B        |L3.282|
000102  00a1              LSLS     r1,r4,#2              ;581
000104  1c49              ADDS     r1,r1,#1              ;581
000106  f44f5230          MOV      r2,#0x2c00            ;581
00010a  eb0200c1          ADD      r0,r2,r1,LSL #3       ;581
00010e  f7fffffe          BL       WIZCHIP_READ
000112  f000001f          AND      r0,r0,#0x1f           ;581
000116  7028              STRB     r0,[r5,#0]            ;581
000118  bf00              NOP                            ;582
                  |L3.282|
00011a  f06f0009          MVN      r0,#9                 ;583
00011e  e779              B        |L3.20|
                  |L3.288|
000120  bf00              NOP                            ;556
000122  2001              MOVS     r0,#1                 ;585
000124  e776              B        |L3.20|
;;;587    
                          ENDP

000126  0000              DCW      0x0000
                  |L3.296|
                          DCD      sock_io_mode

                          AREA ||i.disconnect||, CODE, READONLY, ALIGN=2

                  disconnect PROC
;;;229    
;;;230    int8_t disconnect(uint8_t sn)
000000  b510              PUSH     {r4,lr}
;;;231    {
000002  4604              MOV      r4,r0
;;;232       CHECK_SOCKNUM();
000004  bf00              NOP      
000006  2c08              CMP      r4,#8
000008  dd02              BLE      |L4.16|
00000a  f04f30ff          MOV      r0,#0xffffffff
                  |L4.14|
;;;233       CHECK_SOCKMODE(Sn_MR_TCP);
;;;234    	setSn_CR(sn,Sn_CR_DISCON);
;;;235    	/* wait to process the command... */
;;;236    	while(getSn_CR(sn));
;;;237    	sock_is_sending &= ~(1<<sn);
;;;238       if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
;;;239    	while(getSn_SR(sn) != SOCK_CLOSED)
;;;240    	{
;;;241    	   if(getSn_IR(sn) & Sn_IR_TIMEOUT)
;;;242    	   {
;;;243    	      close(sn);
;;;244    	      return SOCKERR_TIMEOUT;
;;;245    	   }
;;;246    	}
;;;247    	return SOCK_OK;
;;;248    }
00000e  bd10              POP      {r4,pc}
                  |L4.16|
000010  bf00              NOP                            ;232
000012  bf00              NOP                            ;233
000014  00a1              LSLS     r1,r4,#2              ;233
000016  1c49              ADDS     r1,r1,#1              ;233
000018  2200              MOVS     r2,#0                 ;233
00001a  eb0200c1          ADD      r0,r2,r1,LSL #3       ;233
00001e  f7fffffe          BL       WIZCHIP_READ
000022  f000000f          AND      r0,r0,#0xf            ;233
000026  2801              CMP      r0,#1                 ;233
000028  d002              BEQ      |L4.48|
00002a  f06f0004          MVN      r0,#4                 ;233
00002e  e7ee              B        |L4.14|
                  |L4.48|
000030  bf00              NOP                            ;233
000032  00a1              LSLS     r1,r4,#2              ;234
000034  1c49              ADDS     r1,r1,#1              ;234
000036  f44f7280          MOV      r2,#0x100             ;234
00003a  eb0200c1          ADD      r0,r2,r1,LSL #3       ;234
00003e  2108              MOVS     r1,#8                 ;234
000040  f7fffffe          BL       WIZCHIP_WRITE
000044  bf00              NOP                            ;236
                  |L4.70|
000046  00a1              LSLS     r1,r4,#2              ;236
000048  1c49              ADDS     r1,r1,#1              ;236
00004a  f44f7280          MOV      r2,#0x100             ;236
00004e  eb0200c1          ADD      r0,r2,r1,LSL #3       ;236
000052  f7fffffe          BL       WIZCHIP_READ
000056  2800              CMP      r0,#0                 ;236
000058  d1f5              BNE      |L4.70|
00005a  2001              MOVS     r0,#1                 ;237
00005c  40a0              LSLS     r0,r0,r4              ;237
00005e  4915              LDR      r1,|L4.180|
000060  8809              LDRH     r1,[r1,#0]            ;237  ; sock_is_sending
000062  4381              BICS     r1,r1,r0              ;237
000064  4813              LDR      r0,|L4.180|
000066  8001              STRH     r1,[r0,#0]            ;237
000068  2001              MOVS     r0,#1                 ;238
00006a  40a0              LSLS     r0,r0,r4              ;238
00006c  4912              LDR      r1,|L4.184|
00006e  8809              LDRH     r1,[r1,#0]            ;238  ; sock_io_mode
000070  4008              ANDS     r0,r0,r1              ;238
000072  b108              CBZ      r0,|L4.120|
000074  2000              MOVS     r0,#0                 ;238
000076  e7ca              B        |L4.14|
                  |L4.120|
000078  e010              B        |L4.156|
                  |L4.122|
00007a  00a1              LSLS     r1,r4,#2              ;241
00007c  1c49              ADDS     r1,r1,#1              ;241
00007e  f44f7200          MOV      r2,#0x200             ;241
000082  eb0200c1          ADD      r0,r2,r1,LSL #3       ;241
000086  f7fffffe          BL       WIZCHIP_READ
00008a  f0000008          AND      r0,r0,#8              ;241
00008e  b128              CBZ      r0,|L4.156|
000090  4620              MOV      r0,r4                 ;243
000092  f7fffffe          BL       close
000096  f06f000c          MVN      r0,#0xc               ;244
00009a  e7b8              B        |L4.14|
                  |L4.156|
00009c  00a1              LSLS     r1,r4,#2              ;239
00009e  1c49              ADDS     r1,r1,#1              ;239
0000a0  f44f7240          MOV      r2,#0x300             ;239
0000a4  eb0200c1          ADD      r0,r2,r1,LSL #3       ;239
0000a8  f7fffffe          BL       WIZCHIP_READ
0000ac  2800              CMP      r0,#0                 ;239
0000ae  d1e4              BNE      |L4.122|
0000b0  2001              MOVS     r0,#1                 ;247
0000b2  e7ac              B        |L4.14|
;;;249    
                          ENDP

                  |L4.180|
                          DCD      sock_is_sending
                  |L4.184|
                          DCD      sock_io_mode

                          AREA ||i.getsockopt||, CODE, READONLY, ALIGN=2

                  getsockopt PROC
;;;640    
;;;641    int8_t  getsockopt(uint8_t sn, sockopt_type sotype, void* arg)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;642    {
000004  4604              MOV      r4,r0
000006  460e              MOV      r6,r1
000008  4615              MOV      r5,r2
;;;643       CHECK_SOCKNUM();
00000a  bf00              NOP      
00000c  2c08              CMP      r4,#8
00000e  dd03              BLE      |L5.24|
000010  f04f30ff          MOV      r0,#0xffffffff
                  |L5.20|
;;;644       switch(sotype)
;;;645       {
;;;646          case SO_FLAG:
;;;647             *(uint8_t*)arg = getSn_MR(sn) & 0xF0;
;;;648             break;
;;;649          case SO_TTL:
;;;650             *(uint8_t*) arg = getSn_TTL(sn);
;;;651             break;
;;;652          case SO_TOS:
;;;653             *(uint8_t*) arg = getSn_TOS(sn);
;;;654             break;
;;;655          case SO_MSS:   
;;;656             *(uint8_t*) arg = getSn_MSSR(sn);
;;;657          case SO_DESTIP:
;;;658             getSn_DIPR(sn, (uint8_t*)arg);
;;;659             break;
;;;660          case SO_DESTPORT:  
;;;661             *(uint16_t*) arg = getSn_DPORT(sn);
;;;662             break;
;;;663       #if _WIZCHIP_ > 5200   
;;;664          case SO_KEEPALIVEAUTO:
;;;665             CHECK_SOCKMODE(Sn_MR_TCP);
;;;666             *(uint16_t*) arg = getSn_KPALVTR(sn);
;;;667             break;
;;;668       #endif      
;;;669          case SO_SENDBUF:
;;;670             *(uint16_t*) arg = getSn_TX_FSR(sn);
;;;671          case SO_RECVBUF:
;;;672             *(uint16_t*) arg = getSn_RX_RSR(sn);
;;;673          case SO_STATUS:
;;;674             *(uint8_t*) arg = getSn_SR(sn);
;;;675             break;
;;;676          case SO_REMAINSIZE:
;;;677             if(getSn_MR(sn) == Sn_MR_TCP)
;;;678                *(uint16_t*)arg = getSn_RX_RSR(sn);
;;;679             else
;;;680                *(uint16_t*)arg = sock_remained_size[sn];
;;;681             break;
;;;682          case SO_PACKINFO:
;;;683             CHECK_SOCKMODE(Sn_MR_TCP);
;;;684             *(uint8_t*)arg = sock_pack_info[sn];
;;;685             break;
;;;686          default:
;;;687             return SOCKERR_SOCKOPT;
;;;688       }
;;;689       return SOCK_OK;
;;;690    }
000014  e8bd81f0          POP      {r4-r8,pc}
                  |L5.24|
000018  bf00              NOP                            ;643
00001a  2e0d              CMP      r6,#0xd               ;644
00001c  d26f              BCS      |L5.254|
00001e  e8dff006          TBB      [pc,r6]               ;644
000022  0712              DCB      0x07,0x12
000024  1c263d48          DCB      0x1c,0x26,0x3d,0x48
000028  b55f7a7f          DCB      0xb5,0x5f,0x7a,0x7f
00002c  848ea100          DCB      0x84,0x8e,0xa1,0x00
000030  00a1              LSLS     r1,r4,#2              ;647
000032  1c49              ADDS     r1,r1,#1              ;647
000034  2200              MOVS     r2,#0                 ;647
000036  eb0200c1          ADD      r0,r2,r1,LSL #3       ;647
00003a  f7fffffe          BL       WIZCHIP_READ
00003e  f00000f0          AND      r0,r0,#0xf0           ;647
000042  7028              STRB     r0,[r5,#0]            ;647
000044  e0a5              B        |L5.402|
000046  00a1              LSLS     r1,r4,#2              ;650
000048  1c49              ADDS     r1,r1,#1              ;650
00004a  f44f52b0          MOV      r2,#0x1600            ;650
00004e  eb0200c1          ADD      r0,r2,r1,LSL #3       ;650
000052  f7fffffe          BL       WIZCHIP_READ
000056  7028              STRB     r0,[r5,#0]            ;650
000058  e09b              B        |L5.402|
00005a  00a1              LSLS     r1,r4,#2              ;653
00005c  1c49              ADDS     r1,r1,#1              ;653
00005e  f44f52a8          MOV      r2,#0x1500            ;653
000062  eb0200c1          ADD      r0,r2,r1,LSL #3       ;653
000066  f7fffffe          BL       WIZCHIP_READ
00006a  7028              STRB     r0,[r5,#0]            ;653
00006c  e091              B        |L5.402|
00006e  00a1              LSLS     r1,r4,#2              ;656
000070  1c49              ADDS     r1,r1,#1              ;656
000072  f44f5290          MOV      r2,#0x1200            ;656
000076  eb0201c1          ADD      r1,r2,r1,LSL #3       ;656
00007a  f5017080          ADD      r0,r1,#0x100          ;656
00007e  f7fffffe          BL       WIZCHIP_READ
000082  4607              MOV      r7,r0                 ;656
000084  00a1              LSLS     r1,r4,#2              ;656
000086  1c49              ADDS     r1,r1,#1              ;656
000088  f44f5290          MOV      r2,#0x1200            ;656
00008c  eb0200c1          ADD      r0,r2,r1,LSL #3       ;656
000090  f7fffffe          BL       WIZCHIP_READ
000094  eb072000          ADD      r0,r7,r0,LSL #8       ;656
000098  7028              STRB     r0,[r5,#0]            ;656
00009a  bf00              NOP                            ;657
00009c  00a1              LSLS     r1,r4,#2              ;658
00009e  1c49              ADDS     r1,r1,#1              ;658
0000a0  f44f6240          MOV      r2,#0xc00             ;658
0000a4  eb0200c1          ADD      r0,r2,r1,LSL #3       ;658
0000a8  2204              MOVS     r2,#4                 ;658
0000aa  4629              MOV      r1,r5                 ;658
0000ac  f7fffffe          BL       WIZCHIP_READ_BUF
0000b0  e06f              B        |L5.402|
0000b2  00a1              LSLS     r1,r4,#2              ;661
0000b4  1c49              ADDS     r1,r1,#1              ;661
0000b6  f44f5280          MOV      r2,#0x1000            ;661
0000ba  eb0201c1          ADD      r1,r2,r1,LSL #3       ;661
0000be  f5017080          ADD      r0,r1,#0x100          ;661
0000c2  f7fffffe          BL       WIZCHIP_READ
0000c6  4607              MOV      r7,r0                 ;661
0000c8  00a1              LSLS     r1,r4,#2              ;661
0000ca  1c49              ADDS     r1,r1,#1              ;661
0000cc  f44f5280          MOV      r2,#0x1000            ;661
0000d0  eb0200c1          ADD      r0,r2,r1,LSL #3       ;661
0000d4  f7fffffe          BL       WIZCHIP_READ
0000d8  eb072000          ADD      r0,r7,r0,LSL #8       ;661
0000dc  8028              STRH     r0,[r5,#0]            ;661
0000de  e058              B        |L5.402|
0000e0  bf00              NOP                            ;665
0000e2  00a1              LSLS     r1,r4,#2              ;665
0000e4  1c49              ADDS     r1,r1,#1              ;665
0000e6  2200              MOVS     r2,#0                 ;665
0000e8  eb0200c1          ADD      r0,r2,r1,LSL #3       ;665
0000ec  f7fffffe          BL       WIZCHIP_READ
0000f0  f000000f          AND      r0,r0,#0xf            ;665
0000f4  2801              CMP      r0,#1                 ;665
0000f6  d003              BEQ      |L5.256|
0000f8  f06f0004          MVN      r0,#4                 ;665
0000fc  e78a              B        |L5.20|
                  |L5.254|
0000fe  e045              B        |L5.396|
                  |L5.256|
000100  bf00              NOP                            ;665
000102  00a1              LSLS     r1,r4,#2              ;666
000104  1c49              ADDS     r1,r1,#1              ;666
000106  f44f523c          MOV      r2,#0x2f00            ;666
00010a  eb0200c1          ADD      r0,r2,r1,LSL #3       ;666
00010e  f7fffffe          BL       WIZCHIP_READ
000112  8028              STRH     r0,[r5,#0]            ;666
000114  e03d              B        |L5.402|
000116  4620              MOV      r0,r4                 ;670
000118  f7fffffe          BL       getSn_TX_FSR
00011c  8028              STRH     r0,[r5,#0]            ;670
00011e  bf00              NOP                            ;671
000120  4620              MOV      r0,r4                 ;672
000122  f7fffffe          BL       getSn_RX_RSR
000126  8028              STRH     r0,[r5,#0]            ;672
000128  bf00              NOP                            ;673
00012a  00a1              LSLS     r1,r4,#2              ;674
00012c  1c49              ADDS     r1,r1,#1              ;674
00012e  f44f7240          MOV      r2,#0x300             ;674
000132  eb0200c1          ADD      r0,r2,r1,LSL #3       ;674
000136  f7fffffe          BL       WIZCHIP_READ
00013a  7028              STRB     r0,[r5,#0]            ;674
00013c  e029              B        |L5.402|
00013e  00a1              LSLS     r1,r4,#2              ;677
000140  1c49              ADDS     r1,r1,#1              ;677
000142  2200              MOVS     r2,#0                 ;677
000144  eb0200c1          ADD      r0,r2,r1,LSL #3       ;677
000148  f7fffffe          BL       WIZCHIP_READ
00014c  2801              CMP      r0,#1                 ;677
00014e  d104              BNE      |L5.346|
000150  4620              MOV      r0,r4                 ;678
000152  f7fffffe          BL       getSn_RX_RSR
000156  8028              STRH     r0,[r5,#0]            ;678
000158  e003              B        |L5.354|
                  |L5.346|
00015a  480f              LDR      r0,|L5.408|
00015c  f8300014          LDRH     r0,[r0,r4,LSL #1]     ;680
000160  8028              STRH     r0,[r5,#0]            ;680
                  |L5.354|
000162  e016              B        |L5.402|
000164  bf00              NOP                            ;683
000166  00a1              LSLS     r1,r4,#2              ;683
000168  1c49              ADDS     r1,r1,#1              ;683
00016a  2200              MOVS     r2,#0                 ;683
00016c  eb0200c1          ADD      r0,r2,r1,LSL #3       ;683
000170  f7fffffe          BL       WIZCHIP_READ
000174  f000000f          AND      r0,r0,#0xf            ;683
000178  2801              CMP      r0,#1                 ;683
00017a  d002              BEQ      |L5.386|
00017c  f06f0004          MVN      r0,#4                 ;683
000180  e748              B        |L5.20|
                  |L5.386|
000182  bf00              NOP                            ;683
000184  4805              LDR      r0,|L5.412|
000186  5d00              LDRB     r0,[r0,r4]            ;684
000188  7028              STRB     r0,[r5,#0]            ;684
00018a  e002              B        |L5.402|
                  |L5.396|
00018c  f06f0001          MVN      r0,#1                 ;687
000190  e740              B        |L5.20|
                  |L5.402|
000192  bf00              NOP                            ;648
000194  2001              MOVS     r0,#1                 ;689
000196  e73d              B        |L5.20|
                          ENDP

                  |L5.408|
                          DCD      sock_remained_size
                  |L5.412|
                          DCD      sock_pack_info

                          AREA ||i.listen||, CODE, READONLY, ALIGN=1

                  listen PROC
;;;166    
;;;167    int8_t listen(uint8_t sn)
000000  b510              PUSH     {r4,lr}
;;;168    {
000002  4604              MOV      r4,r0
;;;169    	CHECK_SOCKNUM();
000004  bf00              NOP      
000006  2c08              CMP      r4,#8
000008  dd02              BLE      |L6.16|
00000a  f04f30ff          MOV      r0,#0xffffffff
                  |L6.14|
;;;170    	CHECK_SOCKMODE(Sn_MR_TCP);
;;;171    	CHECK_SOCKINIT();
;;;172    	setSn_CR(sn,Sn_CR_LISTEN);
;;;173    	while(getSn_CR(sn));
;;;174       while(getSn_SR(sn) != SOCK_LISTEN)
;;;175       {
;;;176          if(getSn_CR(sn) == SOCK_CLOSED)
;;;177          {
;;;178             close(sn);
;;;179             return SOCKERR_SOCKCLOSED;
;;;180          }
;;;181       }
;;;182       return SOCK_OK;
;;;183    }
00000e  bd10              POP      {r4,pc}
                  |L6.16|
000010  bf00              NOP                            ;169
000012  bf00              NOP                            ;170
000014  00a1              LSLS     r1,r4,#2              ;170
000016  1c49              ADDS     r1,r1,#1              ;170
000018  2200              MOVS     r2,#0                 ;170
00001a  eb0200c1          ADD      r0,r2,r1,LSL #3       ;170
00001e  f7fffffe          BL       WIZCHIP_READ
000022  f000000f          AND      r0,r0,#0xf            ;170
000026  2801              CMP      r0,#1                 ;170
000028  d002              BEQ      |L6.48|
00002a  f06f0004          MVN      r0,#4                 ;170
00002e  e7ee              B        |L6.14|
                  |L6.48|
000030  bf00              NOP                            ;170
000032  bf00              NOP                            ;171
000034  00a1              LSLS     r1,r4,#2              ;171
000036  1c49              ADDS     r1,r1,#1              ;171
000038  f44f7240          MOV      r2,#0x300             ;171
00003c  eb0200c1          ADD      r0,r2,r1,LSL #3       ;171
000040  f7fffffe          BL       WIZCHIP_READ
000044  2813              CMP      r0,#0x13              ;171
000046  d002              BEQ      |L6.78|
000048  f06f0002          MVN      r0,#2                 ;171
00004c  e7df              B        |L6.14|
                  |L6.78|
00004e  bf00              NOP                            ;171
000050  00a1              LSLS     r1,r4,#2              ;172
000052  1c49              ADDS     r1,r1,#1              ;172
000054  f44f7280          MOV      r2,#0x100             ;172
000058  eb0200c1          ADD      r0,r2,r1,LSL #3       ;172
00005c  2102              MOVS     r1,#2                 ;172
00005e  f7fffffe          BL       WIZCHIP_WRITE
000062  bf00              NOP                            ;173
                  |L6.100|
000064  00a1              LSLS     r1,r4,#2              ;173
000066  1c49              ADDS     r1,r1,#1              ;173
000068  f44f7280          MOV      r2,#0x100             ;173
00006c  eb0200c1          ADD      r0,r2,r1,LSL #3       ;173
000070  f7fffffe          BL       WIZCHIP_READ
000074  2800              CMP      r0,#0                 ;173
000076  d1f5              BNE      |L6.100|
000078  e00e              B        |L6.152|
                  |L6.122|
00007a  00a1              LSLS     r1,r4,#2              ;176
00007c  1c49              ADDS     r1,r1,#1              ;176
00007e  f44f7280          MOV      r2,#0x100             ;176
000082  eb0200c1          ADD      r0,r2,r1,LSL #3       ;176
000086  f7fffffe          BL       WIZCHIP_READ
00008a  b928              CBNZ     r0,|L6.152|
00008c  4620              MOV      r0,r4                 ;178
00008e  f7fffffe          BL       close
000092  f06f0003          MVN      r0,#3                 ;179
000096  e7ba              B        |L6.14|
                  |L6.152|
000098  00a1              LSLS     r1,r4,#2              ;174
00009a  1c49              ADDS     r1,r1,#1              ;174
00009c  f44f7240          MOV      r2,#0x300             ;174
0000a0  eb0200c1          ADD      r0,r2,r1,LSL #3       ;174
0000a4  f7fffffe          BL       WIZCHIP_READ
0000a8  2814              CMP      r0,#0x14              ;174
0000aa  d1e6              BNE      |L6.122|
0000ac  2001              MOVS     r0,#1                 ;182
0000ae  e7ae              B        |L6.14|
;;;184    
                          ENDP


                          AREA ||i.recv||, CODE, READONLY, ALIGN=2

                  recv PROC
;;;310    
;;;311    int32_t recv(uint8_t sn, uint8_t * buf, uint16_t len)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;312    {
000004  4604              MOV      r4,r0
000006  4688              MOV      r8,r1
000008  4616              MOV      r6,r2
;;;313       uint8_t  tmp = 0;
00000a  2700              MOVS     r7,#0
;;;314       uint16_t recvsize = 0;
00000c  2500              MOVS     r5,#0
;;;315       CHECK_SOCKNUM();
00000e  bf00              NOP      
000010  2c08              CMP      r4,#8
000012  dd02              BLE      |L7.26|
000014  1e68              SUBS     r0,r5,#1
                  |L7.22|
;;;316       CHECK_SOCKMODE(Sn_MR_TCP);
;;;317       CHECK_SOCKDATA();
;;;318       
;;;319       recvsize = getSn_RxMAX(sn);
;;;320       if(recvsize < len) len = recvsize;
;;;321       while(1)
;;;322       {
;;;323          recvsize = getSn_RX_RSR(sn);
;;;324          tmp = getSn_SR(sn);
;;;325          if (tmp != SOCK_ESTABLISHED)
;;;326          {
;;;327             if(tmp == SOCK_CLOSE_WAIT)
;;;328             {
;;;329                if(recvsize != 0) break;
;;;330                else if(getSn_TX_FSR(sn) == getSn_TxMAX(sn))
;;;331                {
;;;332                   close(sn);
;;;333                   return SOCKERR_SOCKSTATUS;
;;;334                }
;;;335             }
;;;336             else
;;;337             {
;;;338                close(sn);
;;;339                return SOCKERR_SOCKSTATUS;
;;;340             }
;;;341          }
;;;342          if((sock_io_mode & (1<<sn)) && (recvsize == 0)) return SOCK_BUSY;
;;;343          if(recvsize != 0) break;
;;;344       };
;;;345       if(recvsize < len) len = recvsize;
;;;346       wiz_recv_data(sn, buf, len);
;;;347       setSn_CR(sn,Sn_CR_RECV);
;;;348       while(getSn_CR(sn));
;;;349       return len;
;;;350    }
000016  e8bd87f0          POP      {r4-r10,pc}
                  |L7.26|
00001a  bf00              NOP                            ;315
00001c  bf00              NOP                            ;316
00001e  00a1              LSLS     r1,r4,#2              ;316
000020  1c49              ADDS     r1,r1,#1              ;316
000022  2200              MOVS     r2,#0                 ;316
000024  eb0200c1          ADD      r0,r2,r1,LSL #3       ;316
000028  f7fffffe          BL       WIZCHIP_READ
00002c  f000000f          AND      r0,r0,#0xf            ;316
000030  2801              CMP      r0,#1                 ;316
000032  d002              BEQ      |L7.58|
000034  f06f0004          MVN      r0,#4                 ;316
000038  e7ed              B        |L7.22|
                  |L7.58|
00003a  bf00              NOP                            ;316
00003c  bf00              NOP                            ;317
00003e  b916              CBNZ     r6,|L7.70|
000040  f06f000d          MVN      r0,#0xd               ;317
000044  e7e7              B        |L7.22|
                  |L7.70|
000046  bf00              NOP                            ;317
000048  00a1              LSLS     r1,r4,#2              ;319
00004a  1c49              ADDS     r1,r1,#1              ;319
00004c  f44f52f0          MOV      r2,#0x1e00            ;319
000050  eb0200c1          ADD      r0,r2,r1,LSL #3       ;319
000054  f7fffffe          BL       WIZCHIP_READ
000058  f64f71ff          MOV      r1,#0xffff            ;319
00005c  ea012580          AND      r5,r1,r0,LSL #10      ;319
000060  42b5              CMP      r5,r6                 ;320
000062  da00              BGE      |L7.102|
000064  462e              MOV      r6,r5                 ;320
                  |L7.102|
000066  e038              B        |L7.218|
                  |L7.104|
000068  4620              MOV      r0,r4                 ;323
00006a  f7fffffe          BL       getSn_RX_RSR
00006e  4605              MOV      r5,r0                 ;323
000070  00a1              LSLS     r1,r4,#2              ;324
000072  1c49              ADDS     r1,r1,#1              ;324
000074  f44f7240          MOV      r2,#0x300             ;324
000078  eb0200c1          ADD      r0,r2,r1,LSL #3       ;324
00007c  f7fffffe          BL       WIZCHIP_READ
000080  4607              MOV      r7,r0                 ;324
000082  2f17              CMP      r7,#0x17              ;325
000084  d01e              BEQ      |L7.196|
000086  2f1c              CMP      r7,#0x1c              ;327
000088  d116              BNE      |L7.184|
00008a  b105              CBZ      r5,|L7.142|
00008c  e026              B        |L7.220|
                  |L7.142|
00008e  4620              MOV      r0,r4                 ;330
000090  f7fffffe          BL       getSn_TX_FSR
000094  4681              MOV      r9,r0                 ;330
000096  00a1              LSLS     r1,r4,#2              ;330
000098  1c49              ADDS     r1,r1,#1              ;330
00009a  f44f52f8          MOV      r2,#0x1f00            ;330
00009e  eb0200c1          ADD      r0,r2,r1,LSL #3       ;330
0000a2  f7fffffe          BL       WIZCHIP_READ
0000a6  ebb92f80          CMP      r9,r0,LSL #10         ;330
0000aa  d10b              BNE      |L7.196|
0000ac  4620              MOV      r0,r4                 ;332
0000ae  f7fffffe          BL       close
0000b2  f06f0006          MVN      r0,#6                 ;333
0000b6  e7ae              B        |L7.22|
                  |L7.184|
0000b8  4620              MOV      r0,r4                 ;338
0000ba  f7fffffe          BL       close
0000be  f06f0006          MVN      r0,#6                 ;339
0000c2  e7a8              B        |L7.22|
                  |L7.196|
0000c4  2001              MOVS     r0,#1                 ;342
0000c6  40a0              LSLS     r0,r0,r4              ;342
0000c8  4914              LDR      r1,|L7.284|
0000ca  8809              LDRH     r1,[r1,#0]            ;342  ; sock_io_mode
0000cc  4008              ANDS     r0,r0,r1              ;342
0000ce  b110              CBZ      r0,|L7.214|
0000d0  b90d              CBNZ     r5,|L7.214|
0000d2  2000              MOVS     r0,#0                 ;342
0000d4  e79f              B        |L7.22|
                  |L7.214|
0000d6  b105              CBZ      r5,|L7.218|
0000d8  e000              B        |L7.220|
                  |L7.218|
0000da  e7c5              B        |L7.104|
                  |L7.220|
0000dc  bf00              NOP                            ;329
0000de  42b5              CMP      r5,r6                 ;345
0000e0  da00              BGE      |L7.228|
0000e2  462e              MOV      r6,r5                 ;345
                  |L7.228|
0000e4  4632              MOV      r2,r6                 ;346
0000e6  4641              MOV      r1,r8                 ;346
0000e8  4620              MOV      r0,r4                 ;346
0000ea  f7fffffe          BL       wiz_recv_data
0000ee  00a1              LSLS     r1,r4,#2              ;347
0000f0  1c49              ADDS     r1,r1,#1              ;347
0000f2  f44f7280          MOV      r2,#0x100             ;347
0000f6  eb0200c1          ADD      r0,r2,r1,LSL #3       ;347
0000fa  2140              MOVS     r1,#0x40              ;347
0000fc  f7fffffe          BL       WIZCHIP_WRITE
000100  bf00              NOP                            ;348
                  |L7.258|
000102  00a1              LSLS     r1,r4,#2              ;348
000104  1c49              ADDS     r1,r1,#1              ;348
000106  f44f7280          MOV      r2,#0x100             ;348
00010a  eb0200c1          ADD      r0,r2,r1,LSL #3       ;348
00010e  f7fffffe          BL       WIZCHIP_READ
000112  2800              CMP      r0,#0                 ;348
000114  d1f5              BNE      |L7.258|
000116  4630              MOV      r0,r6                 ;349
000118  e77d              B        |L7.22|
;;;351    
                          ENDP

00011a  0000              DCW      0x0000
                  |L7.284|
                          DCD      sock_io_mode

                          AREA ||i.recvfrom||, CODE, READONLY, ALIGN=2

                  recvfrom PROC
;;;425    
;;;426    int32_t recvfrom(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t *port)
000000  e92d47fc          PUSH     {r2-r10,lr}
;;;427    {
000004  4604              MOV      r4,r0
000006  468a              MOV      r10,r1
000008  4616              MOV      r6,r2
00000a  461f              MOV      r7,r3
00000c  f8dd8028          LDR      r8,[sp,#0x28]
;;;428       uint8_t  mr;
;;;429       uint8_t  head[8];
;;;430    	uint16_t pack_len=0;
000010  2500              MOVS     r5,#0
;;;431    
;;;432       CHECK_SOCKNUM();
000012  bf00              NOP      
000014  2c08              CMP      r4,#8
000016  dd02              BLE      |L8.30|
000018  1e68              SUBS     r0,r5,#1
                  |L8.26|
;;;433       //CHECK_SOCKMODE(Sn_MR_UDP);
;;;434       switch((mr=getSn_MR(sn)) & 0x0F)
;;;435       {
;;;436          case Sn_MR_UDP:
;;;437          case Sn_MR_MACRAW:
;;;438             break;
;;;439       #if ( _WIZCHIP_ < 5200 )         
;;;440          case Sn_MR_IPRAW:
;;;441          case Sn_MR_PPPoE:
;;;442             break;
;;;443       #endif
;;;444          default:
;;;445             return SOCKERR_SOCKMODE;
;;;446       }
;;;447       CHECK_SOCKDATA();
;;;448       if(sock_remained_size[sn] == 0)
;;;449       {
;;;450          while(1)
;;;451          {
;;;452             pack_len = getSn_RX_RSR(sn);
;;;453             if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
;;;454             if( (sock_io_mode & (1<<sn)) && (pack_len == 0) ) return SOCK_BUSY;
;;;455             if(pack_len != 0) break;
;;;456          };
;;;457       }
;;;458       sock_pack_info[sn] = PACK_COMPLETED;
;;;459    	switch (mr & 0x07)
;;;460    	{
;;;461    	   case Sn_MR_UDP :
;;;462    	      if(sock_remained_size[sn] == 0)
;;;463    	      {
;;;464       			wiz_recv_data(sn, head, 8);
;;;465       			setSn_CR(sn,Sn_CR_RECV);
;;;466       			while(getSn_CR(sn));
;;;467       			// read peer's IP address, port number & packet length
;;;468        			addr[0] = head[0];
;;;469       			addr[1] = head[1];
;;;470       			addr[2] = head[2];
;;;471       			addr[3] = head[3];
;;;472       			*port = head[4];
;;;473       			*port = (*port << 8) + head[5];
;;;474       			sock_remained_size[sn] = head[6];
;;;475       			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[7];
;;;476       			sock_pack_info[sn] = PACK_FIRST;
;;;477       	   }
;;;478    			if(len < sock_remained_size[sn]) pack_len = len;
;;;479    			else pack_len = sock_remained_size[sn];
;;;480    			//
;;;481    			// Need to packet length check (default 1472)
;;;482    			//
;;;483       		wiz_recv_data(sn, buf, pack_len); // data copy.
;;;484    			break;
;;;485    	   case Sn_MR_MACRAW :
;;;486    	      if(sock_remained_size[sn] == 0)
;;;487    	      {
;;;488       			wiz_recv_data(sn, head, 2);
;;;489       			setSn_CR(sn,Sn_CR_RECV);
;;;490       			while(getSn_CR(sn));
;;;491       			// read peer's IP address, port number & packet length
;;;492        			sock_remained_size[sn] = head[0];
;;;493       			sock_remained_size[sn] = (sock_remained_size[sn] <<8) + head[1];
;;;494       			if(sock_remained_size[sn] > 1514) 
;;;495       			{
;;;496       			   close(sn);
;;;497       			   return SOCKFATAL_PACKLEN;
;;;498       			}
;;;499       			sock_pack_info[sn] = PACK_FIRST;
;;;500       	   }
;;;501    			if(len < sock_remained_size[sn]) pack_len = len;
;;;502    			else pack_len = sock_remained_size[sn];
;;;503    			wiz_recv_data(sn,buf,pack_len);
;;;504    		   break;
;;;505       #if ( _WIZCHIP_ < 5200 )
;;;506    		case Sn_MR_IPRAW:
;;;507    		   if(sock_remained_size[sn] == 0)
;;;508    		   {
;;;509       			wiz_recv_data(sn, head, 6);
;;;510       			setSn_CR(sn,Sn_CR_RECV);
;;;511       			while(getSn_CR(sn));
;;;512       			addr[0] = head[0];
;;;513       			addr[1] = head[1];
;;;514       			addr[2] = head[2];
;;;515       			addr[3] = head[3];
;;;516       			sock_remained_size[sn] = head[4];
;;;517       			sock_remaiend_size[sn] = (sock_remained_size[sn] << 8) + head[5];
;;;518       			sock_pack_info[sn] = PACK_FIRST;
;;;519             }
;;;520    			//
;;;521    			// Need to packet length check
;;;522    			//
;;;523    			if(len < sock_remained_size[sn]) pack_len = len;
;;;524    			else pack_len = sock_remained_size[sn];
;;;525       		wiz_recv_data(sn, buf, pack_len); // data copy.
;;;526    			break;
;;;527       #endif
;;;528          default:
;;;529             wiz_recv_ignore(sn, pack_len); // data copy.
;;;530             sock_remained_size[sn] = pack_len;
;;;531             break;
;;;532       }
;;;533    	setSn_CR(sn,Sn_CR_RECV);
;;;534    	/* wait to process the command... */
;;;535    	while(getSn_CR(sn)) ;
;;;536    	sock_remained_size[sn] -= pack_len;
;;;537    	//M20140501 : replace 0x01 with PACK_REMAINED
;;;538    	//if(sock_remained_size[sn] != 0) sock_pack_info[sn] |= 0x01;
;;;539    	if(sock_remained_size[sn] != 0) sock_pack_info[sn] |= PACK_REMAINED;
;;;540       //
;;;541     	return pack_len;
;;;542    }
00001a  e8bd87fc          POP      {r2-r10,pc}
                  |L8.30|
00001e  bf00              NOP                            ;432
000020  00a1              LSLS     r1,r4,#2              ;434
000022  1c49              ADDS     r1,r1,#1              ;434
000024  2200              MOVS     r2,#0                 ;434
000026  eb0200c1          ADD      r0,r2,r1,LSL #3       ;434
00002a  f7fffffe          BL       WIZCHIP_READ
00002e  4681              MOV      r9,r0                 ;434
000030  f000000f          AND      r0,r0,#0xf            ;434
000034  2802              CMP      r0,#2                 ;434
000036  d002              BEQ      |L8.62|
000038  2804              CMP      r0,#4                 ;434
00003a  d102              BNE      |L8.66|
00003c  e000              B        |L8.64|
                  |L8.62|
00003e  bf00              NOP                            ;437
                  |L8.64|
000040  e002              B        |L8.72|
                  |L8.66|
000042  f06f0004          MVN      r0,#4                 ;445
000046  e7e8              B        |L8.26|
                  |L8.72|
000048  bf00              NOP                            ;438
00004a  bf00              NOP                            ;447
00004c  b916              CBNZ     r6,|L8.84|
00004e  f06f000d          MVN      r0,#0xd               ;447
000052  e7e2              B        |L8.26|
                  |L8.84|
000054  bf00              NOP                            ;447
000056  4881              LDR      r0,|L8.604|
000058  f8300014          LDRH     r0,[r0,r4,LSL #1]     ;448
00005c  b9e8              CBNZ     r0,|L8.154|
00005e  e01a              B        |L8.150|
                  |L8.96|
000060  4620              MOV      r0,r4                 ;452
000062  f7fffffe          BL       getSn_RX_RSR
000066  4605              MOV      r5,r0                 ;452
000068  00a1              LSLS     r1,r4,#2              ;453
00006a  1c49              ADDS     r1,r1,#1              ;453
00006c  f44f7240          MOV      r2,#0x300             ;453
000070  eb0200c1          ADD      r0,r2,r1,LSL #3       ;453
000074  f7fffffe          BL       WIZCHIP_READ
000078  b910              CBNZ     r0,|L8.128|
00007a  f06f0003          MVN      r0,#3                 ;453
00007e  e7cc              B        |L8.26|
                  |L8.128|
000080  2001              MOVS     r0,#1                 ;454
000082  40a0              LSLS     r0,r0,r4              ;454
000084  4976              LDR      r1,|L8.608|
000086  8809              LDRH     r1,[r1,#0]            ;454  ; sock_io_mode
000088  4008              ANDS     r0,r0,r1              ;454
00008a  b110              CBZ      r0,|L8.146|
00008c  b90d              CBNZ     r5,|L8.146|
00008e  2000              MOVS     r0,#0                 ;454
000090  e7c3              B        |L8.26|
                  |L8.146|
000092  b105              CBZ      r5,|L8.150|
000094  e000              B        |L8.152|
                  |L8.150|
000096  e7e3              B        |L8.96|
                  |L8.152|
000098  bf00              NOP                            ;455
                  |L8.154|
00009a  2000              MOVS     r0,#0                 ;458
00009c  4971              LDR      r1,|L8.612|
00009e  5508              STRB     r0,[r1,r4]            ;458
0000a0  f0090007          AND      r0,r9,#7              ;459
0000a4  2802              CMP      r0,#2                 ;459
0000a6  d002              BEQ      |L8.174|
0000a8  2804              CMP      r0,#4                 ;459
0000aa  d17d              BNE      |L8.424|
0000ac  e057              B        |L8.350|
                  |L8.174|
0000ae  486b              LDR      r0,|L8.604|
0000b0  f8300014          LDRH     r0,[r0,r4,LSL #1]     ;462
0000b4  bbe8              CBNZ     r0,|L8.306|
0000b6  2208              MOVS     r2,#8                 ;464
0000b8  4669              MOV      r1,sp                 ;464
0000ba  4620              MOV      r0,r4                 ;464
0000bc  f7fffffe          BL       wiz_recv_data
0000c0  00a1              LSLS     r1,r4,#2              ;465
0000c2  1c49              ADDS     r1,r1,#1              ;465
0000c4  f44f7280          MOV      r2,#0x100             ;465
0000c8  eb0200c1          ADD      r0,r2,r1,LSL #3       ;465
0000cc  2140              MOVS     r1,#0x40              ;465
0000ce  f7fffffe          BL       WIZCHIP_WRITE
0000d2  bf00              NOP                            ;466
                  |L8.212|
0000d4  00a1              LSLS     r1,r4,#2              ;466
0000d6  1c49              ADDS     r1,r1,#1              ;466
0000d8  f44f7280          MOV      r2,#0x100             ;466
0000dc  eb0200c1          ADD      r0,r2,r1,LSL #3       ;466
0000e0  f7fffffe          BL       WIZCHIP_READ
0000e4  2800              CMP      r0,#0                 ;466
0000e6  d1f5              BNE      |L8.212|
0000e8  f89d0000          LDRB     r0,[sp,#0]            ;468
0000ec  7038              STRB     r0,[r7,#0]            ;468
0000ee  f89d0001          LDRB     r0,[sp,#1]            ;469
0000f2  7078              STRB     r0,[r7,#1]            ;469
0000f4  f89d0002          LDRB     r0,[sp,#2]            ;470
0000f8  70b8              STRB     r0,[r7,#2]            ;470
0000fa  f89d0003          LDRB     r0,[sp,#3]            ;471
0000fe  70f8              STRB     r0,[r7,#3]            ;471
000100  f89d0004          LDRB     r0,[sp,#4]            ;472
000104  f8a80000          STRH     r0,[r8,#0]            ;472
000108  f89d0005          LDRB     r0,[sp,#5]            ;473
00010c  f8981000          LDRB     r1,[r8,#0]            ;473
000110  eb002001          ADD      r0,r0,r1,LSL #8       ;473
000114  f8a80000          STRH     r0,[r8,#0]            ;473
000118  f89d0006          LDRB     r0,[sp,#6]            ;474
00011c  494f              LDR      r1,|L8.604|
00011e  f8210014          STRH     r0,[r1,r4,LSL #1]     ;474
000122  f89d0007          LDRB     r0,[sp,#7]            ;475
000126  f8111014          LDRB     r1,[r1,r4,LSL #1]     ;475
00012a  eb002001          ADD      r0,r0,r1,LSL #8       ;475
00012e  494b              LDR      r1,|L8.604|
000130  e000              B        |L8.308|
                  |L8.306|
000132  e004              B        |L8.318|
                  |L8.308|
000134  f8210014          STRH     r0,[r1,r4,LSL #1]     ;475
000138  2080              MOVS     r0,#0x80              ;476
00013a  494a              LDR      r1,|L8.612|
00013c  5508              STRB     r0,[r1,r4]            ;476
                  |L8.318|
00013e  4847              LDR      r0,|L8.604|
000140  f8300014          LDRH     r0,[r0,r4,LSL #1]     ;478
000144  42b0              CMP      r0,r6                 ;478
000146  dd01              BLE      |L8.332|
000148  4635              MOV      r5,r6                 ;478
00014a  e002              B        |L8.338|
                  |L8.332|
00014c  4843              LDR      r0,|L8.604|
00014e  f8305014          LDRH     r5,[r0,r4,LSL #1]     ;479
                  |L8.338|
000152  462a              MOV      r2,r5                 ;483
000154  4651              MOV      r1,r10                ;483
000156  4620              MOV      r0,r4                 ;483
000158  f7fffffe          BL       wiz_recv_data
00015c  e055              B        |L8.522|
                  |L8.350|
00015e  483f              LDR      r0,|L8.604|
000160  f8300014          LDRH     r0,[r0,r4,LSL #1]     ;486
000164  bba8              CBNZ     r0,|L8.466|
000166  2202              MOVS     r2,#2                 ;488
000168  4669              MOV      r1,sp                 ;488
00016a  4620              MOV      r0,r4                 ;488
00016c  f7fffffe          BL       wiz_recv_data
000170  00a1              LSLS     r1,r4,#2              ;489
000172  1c49              ADDS     r1,r1,#1              ;489
000174  f44f7280          MOV      r2,#0x100             ;489
000178  eb0200c1          ADD      r0,r2,r1,LSL #3       ;489
00017c  2140              MOVS     r1,#0x40              ;489
00017e  f7fffffe          BL       WIZCHIP_WRITE
000182  bf00              NOP                            ;490
                  |L8.388|
000184  00a1              LSLS     r1,r4,#2              ;490
000186  1c49              ADDS     r1,r1,#1              ;490
000188  f44f7280          MOV      r2,#0x100             ;490
00018c  eb0200c1          ADD      r0,r2,r1,LSL #3       ;490
000190  f7fffffe          BL       WIZCHIP_READ
000194  2800              CMP      r0,#0                 ;490
000196  d1f5              BNE      |L8.388|
000198  f89d0000          LDRB     r0,[sp,#0]            ;492
00019c  492f              LDR      r1,|L8.604|
00019e  f8210014          STRH     r0,[r1,r4,LSL #1]     ;492
0001a2  f89d0001          LDRB     r0,[sp,#1]            ;493
0001a6  e000              B        |L8.426|
                  |L8.424|
0001a8  e027              B        |L8.506|
                  |L8.426|
0001aa  f8111014          LDRB     r1,[r1,r4,LSL #1]     ;493
0001ae  eb002001          ADD      r0,r0,r1,LSL #8       ;493
0001b2  492a              LDR      r1,|L8.604|
0001b4  f8210014          STRH     r0,[r1,r4,LSL #1]     ;493
0001b8  4608              MOV      r0,r1                 ;494
0001ba  f8300014          LDRH     r0,[r0,r4,LSL #1]     ;494
0001be  f24051ea          MOV      r1,#0x5ea             ;494
0001c2  4288              CMP      r0,r1                 ;494
0001c4  dd06              BLE      |L8.468|
0001c6  4620              MOV      r0,r4                 ;496
0001c8  f7fffffe          BL       close
0001cc  f46f707a          MVN      r0,#0x3e8             ;497
0001d0  e723              B        |L8.26|
                  |L8.466|
0001d2  e002              B        |L8.474|
                  |L8.468|
0001d4  2080              MOVS     r0,#0x80              ;499
0001d6  4923              LDR      r1,|L8.612|
0001d8  5508              STRB     r0,[r1,r4]            ;499
                  |L8.474|
0001da  4820              LDR      r0,|L8.604|
0001dc  f8300014          LDRH     r0,[r0,r4,LSL #1]     ;501
0001e0  42b0              CMP      r0,r6                 ;501
0001e2  dd01              BLE      |L8.488|
0001e4  4635              MOV      r5,r6                 ;501
0001e6  e002              B        |L8.494|
                  |L8.488|
0001e8  481c              LDR      r0,|L8.604|
0001ea  f8305014          LDRH     r5,[r0,r4,LSL #1]     ;502
                  |L8.494|
0001ee  462a              MOV      r2,r5                 ;503
0001f0  4651              MOV      r1,r10                ;503
0001f2  4620              MOV      r0,r4                 ;503
0001f4  f7fffffe          BL       wiz_recv_data
0001f8  e007              B        |L8.522|
                  |L8.506|
0001fa  4629              MOV      r1,r5                 ;529
0001fc  4620              MOV      r0,r4                 ;529
0001fe  f7fffffe          BL       wiz_recv_ignore
000202  4816              LDR      r0,|L8.604|
000204  f8205014          STRH     r5,[r0,r4,LSL #1]     ;530
000208  bf00              NOP                            ;531
                  |L8.522|
00020a  bf00              NOP                            ;484
00020c  00a1              LSLS     r1,r4,#2              ;533
00020e  1c49              ADDS     r1,r1,#1              ;533
000210  f44f7280          MOV      r2,#0x100             ;533
000214  eb0200c1          ADD      r0,r2,r1,LSL #3       ;533
000218  2140              MOVS     r1,#0x40              ;533
00021a  f7fffffe          BL       WIZCHIP_WRITE
00021e  bf00              NOP                            ;535
                  |L8.544|
000220  00a1              LSLS     r1,r4,#2              ;535
000222  1c49              ADDS     r1,r1,#1              ;535
000224  f44f7280          MOV      r2,#0x100             ;535
000228  eb0200c1          ADD      r0,r2,r1,LSL #3       ;535
00022c  f7fffffe          BL       WIZCHIP_READ
000230  2800              CMP      r0,#0                 ;535
000232  d1f5              BNE      |L8.544|
000234  4809              LDR      r0,|L8.604|
000236  f8300014          LDRH     r0,[r0,r4,LSL #1]     ;536
00023a  1b40              SUBS     r0,r0,r5              ;536
00023c  4907              LDR      r1,|L8.604|
00023e  f8210014          STRH     r0,[r1,r4,LSL #1]     ;536
000242  4608              MOV      r0,r1                 ;539
000244  f8300014          LDRH     r0,[r0,r4,LSL #1]     ;539
000248  b128              CBZ      r0,|L8.598|
00024a  4806              LDR      r0,|L8.612|
00024c  5d00              LDRB     r0,[r0,r4]            ;539
00024e  f0400001          ORR      r0,r0,#1              ;539
000252  4904              LDR      r1,|L8.612|
000254  5508              STRB     r0,[r1,r4]            ;539
                  |L8.598|
000256  4628              MOV      r0,r5                 ;541
000258  e6df              B        |L8.26|
;;;543    
                          ENDP

00025a  0000              DCW      0x0000
                  |L8.604|
                          DCD      sock_remained_size
                  |L8.608|
                          DCD      sock_io_mode
                  |L8.612|
                          DCD      sock_pack_info

                          AREA ||i.send||, CODE, READONLY, ALIGN=2

                  send PROC
;;;249    
;;;250    int32_t send(uint8_t sn, uint8_t * buf, uint16_t len)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;251    {
000004  4604              MOV      r4,r0
000006  4688              MOV      r8,r1
000008  4615              MOV      r5,r2
;;;252       uint8_t tmp=0;
00000a  2600              MOVS     r6,#0
;;;253       uint16_t freesize=0;
00000c  2700              MOVS     r7,#0
;;;254       
;;;255       CHECK_SOCKNUM();
00000e  bf00              NOP      
000010  2c08              CMP      r4,#8
000012  dd02              BLE      |L9.26|
000014  1e70              SUBS     r0,r6,#1
                  |L9.22|
;;;256       CHECK_SOCKMODE(Sn_MR_TCP);
;;;257       CHECK_SOCKDATA();
;;;258       tmp = getSn_SR(sn);
;;;259       if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
;;;260    	 #if 0  /*by pei 2018-1-26*/
;;;261       if( sock_is_sending & (1<<sn) )
;;;262       {
;;;263          tmp = getSn_IR(sn);
;;;264          if(tmp & Sn_IR_SENDOK)
;;;265          {
;;;266             setSn_IR(sn, Sn_IR_SENDOK);
;;;267             #if _WZICHIP_ == 5200
;;;268                if(getSn_TX_RD(sn) != sock_next_rd[sn])
;;;269                {
;;;270                   setSn_CR(sn,Sn_CR_SEND);
;;;271                   while(getSn_CR(sn));
;;;272                   return SOCKERR_BUSY;
;;;273                }
;;;274             #endif
;;;275             sock_is_sending &= ~(1<<sn);         
;;;276          }
;;;277          else if(tmp & Sn_IR_TIMEOUT)
;;;278          {
;;;279             close(sn);
;;;280             return SOCKERR_TIMEOUT;
;;;281          }
;;;282          else return SOCK_BUSY;
;;;283       }
;;;284    	 #endif
;;;285       freesize = getSn_TxMAX(sn);
;;;286       if (len > freesize) len = freesize; // check size not to exceed MAX size.
;;;287       while(1)
;;;288       {
;;;289          freesize = getSn_TX_FSR(sn);
;;;290          tmp = getSn_SR(sn);
;;;291          if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
;;;292          {
;;;293             close(sn);
;;;294             return SOCKERR_SOCKSTATUS;
;;;295          }
;;;296          if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
;;;297          if(len <= freesize) break;
;;;298       }
;;;299       wiz_send_data(sn, buf, len);
;;;300       #if _WIZCHIP_ == 5200
;;;301          sock_next_rd[sn] = getSn_TX_RD(sn) + len;
;;;302       #endif
;;;303       setSn_CR(sn,Sn_CR_SEND);
;;;304       /* wait to process the command... */
;;;305       while(getSn_CR(sn));
;;;306       sock_is_sending |= (1 << sn);
;;;307       return len;
;;;308    }
000016  e8bd81f0          POP      {r4-r8,pc}
                  |L9.26|
00001a  bf00              NOP                            ;255
00001c  bf00              NOP                            ;256
00001e  00a1              LSLS     r1,r4,#2              ;256
000020  1c49              ADDS     r1,r1,#1              ;256
000022  2200              MOVS     r2,#0                 ;256
000024  eb0200c1          ADD      r0,r2,r1,LSL #3       ;256
000028  f7fffffe          BL       WIZCHIP_READ
00002c  f000000f          AND      r0,r0,#0xf            ;256
000030  2801              CMP      r0,#1                 ;256
000032  d002              BEQ      |L9.58|
000034  f06f0004          MVN      r0,#4                 ;256
000038  e7ed              B        |L9.22|
                  |L9.58|
00003a  bf00              NOP                            ;256
00003c  bf00              NOP                            ;257
00003e  b915              CBNZ     r5,|L9.70|
000040  f06f000d          MVN      r0,#0xd               ;257
000044  e7e7              B        |L9.22|
                  |L9.70|
000046  bf00              NOP                            ;257
000048  00a1              LSLS     r1,r4,#2              ;258
00004a  1c49              ADDS     r1,r1,#1              ;258
00004c  f44f7240          MOV      r2,#0x300             ;258
000050  eb0200c1          ADD      r0,r2,r1,LSL #3       ;258
000054  f7fffffe          BL       WIZCHIP_READ
000058  4606              MOV      r6,r0                 ;258
00005a  2e17              CMP      r6,#0x17              ;259
00005c  d004              BEQ      |L9.104|
00005e  2e1c              CMP      r6,#0x1c              ;259
000060  d002              BEQ      |L9.104|
000062  f06f0006          MVN      r0,#6                 ;259
000066  e7d6              B        |L9.22|
                  |L9.104|
000068  00a1              LSLS     r1,r4,#2              ;285
00006a  1c49              ADDS     r1,r1,#1              ;285
00006c  f44f52f8          MOV      r2,#0x1f00            ;285
000070  eb0200c1          ADD      r0,r2,r1,LSL #3       ;285
000074  f7fffffe          BL       WIZCHIP_READ
000078  f64f71ff          MOV      r1,#0xffff            ;285
00007c  ea012780          AND      r7,r1,r0,LSL #10      ;285
000080  42bd              CMP      r5,r7                 ;286
000082  dd00              BLE      |L9.134|
000084  463d              MOV      r5,r7                 ;286
                  |L9.134|
000086  e023              B        |L9.208|
                  |L9.136|
000088  4620              MOV      r0,r4                 ;289
00008a  f7fffffe          BL       getSn_TX_FSR
00008e  4607              MOV      r7,r0                 ;289
000090  00a1              LSLS     r1,r4,#2              ;290
000092  1c49              ADDS     r1,r1,#1              ;290
000094  f44f7240          MOV      r2,#0x300             ;290
000098  eb0200c1          ADD      r0,r2,r1,LSL #3       ;290
00009c  f7fffffe          BL       WIZCHIP_READ
0000a0  4606              MOV      r6,r0                 ;290
0000a2  2e17              CMP      r6,#0x17              ;291
0000a4  d007              BEQ      |L9.182|
0000a6  2e1c              CMP      r6,#0x1c              ;291
0000a8  d005              BEQ      |L9.182|
0000aa  4620              MOV      r0,r4                 ;293
0000ac  f7fffffe          BL       close
0000b0  f06f0006          MVN      r0,#6                 ;294
0000b4  e7af              B        |L9.22|
                  |L9.182|
0000b6  2001              MOVS     r0,#1                 ;296
0000b8  40a0              LSLS     r0,r0,r4              ;296
0000ba  4917              LDR      r1,|L9.280|
0000bc  8809              LDRH     r1,[r1,#0]            ;296  ; sock_io_mode
0000be  4008              ANDS     r0,r0,r1              ;296
0000c0  b118              CBZ      r0,|L9.202|
0000c2  42bd              CMP      r5,r7                 ;296
0000c4  dd01              BLE      |L9.202|
0000c6  2000              MOVS     r0,#0                 ;296
0000c8  e7a5              B        |L9.22|
                  |L9.202|
0000ca  42bd              CMP      r5,r7                 ;297
0000cc  dc00              BGT      |L9.208|
0000ce  e000              B        |L9.210|
                  |L9.208|
0000d0  e7da              B        |L9.136|
                  |L9.210|
0000d2  bf00              NOP                            ;297
0000d4  462a              MOV      r2,r5                 ;299
0000d6  4641              MOV      r1,r8                 ;299
0000d8  4620              MOV      r0,r4                 ;299
0000da  f7fffffe          BL       wiz_send_data
0000de  00a1              LSLS     r1,r4,#2              ;303
0000e0  1c49              ADDS     r1,r1,#1              ;303
0000e2  f44f7280          MOV      r2,#0x100             ;303
0000e6  eb0200c1          ADD      r0,r2,r1,LSL #3       ;303
0000ea  2120              MOVS     r1,#0x20              ;303
0000ec  f7fffffe          BL       WIZCHIP_WRITE
0000f0  bf00              NOP                            ;305
                  |L9.242|
0000f2  00a1              LSLS     r1,r4,#2              ;305
0000f4  1c49              ADDS     r1,r1,#1              ;305
0000f6  f44f7280          MOV      r2,#0x100             ;305
0000fa  eb0200c1          ADD      r0,r2,r1,LSL #3       ;305
0000fe  f7fffffe          BL       WIZCHIP_READ
000102  2800              CMP      r0,#0                 ;305
000104  d1f5              BNE      |L9.242|
000106  2001              MOVS     r0,#1                 ;306
000108  40a0              LSLS     r0,r0,r4              ;306
00010a  4904              LDR      r1,|L9.284|
00010c  8809              LDRH     r1,[r1,#0]            ;306  ; sock_is_sending
00010e  4308              ORRS     r0,r0,r1              ;306
000110  4902              LDR      r1,|L9.284|
000112  8008              STRH     r0,[r1,#0]            ;306
000114  4628              MOV      r0,r5                 ;307
000116  e77e              B        |L9.22|
;;;309    
                          ENDP

                  |L9.280|
                          DCD      sock_io_mode
                  |L9.284|
                          DCD      sock_is_sending

                          AREA ||i.sendto||, CODE, READONLY, ALIGN=2

                  sendto PROC
;;;351    
;;;352    int32_t sendto(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t port)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;353    {
000004  4604              MOV      r4,r0
000006  468a              MOV      r10,r1
000008  4616              MOV      r6,r2
00000a  461d              MOV      r5,r3
00000c  f8dd9020          LDR      r9,[sp,#0x20]
;;;354       uint8_t tmp = 0;
000010  2700              MOVS     r7,#0
;;;355       uint16_t freesize = 0;
000012  46b8              MOV      r8,r7
;;;356       CHECK_SOCKNUM();
000014  bf00              NOP      
000016  2c08              CMP      r4,#8
000018  dd02              BLE      |L10.32|
00001a  1e78              SUBS     r0,r7,#1
                  |L10.28|
;;;357       switch(getSn_MR(sn) & 0x0F)
;;;358       {
;;;359          case Sn_MR_UDP:
;;;360          case Sn_MR_MACRAW:
;;;361             break;
;;;362          default:
;;;363             return SOCKERR_SOCKMODE;
;;;364       }
;;;365       CHECK_SOCKDATA();
;;;366       //M20140501 : For avoiding fatal error on memory align mismatched
;;;367       //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
;;;368       {
;;;369          uint32_t taddr;
;;;370          taddr = ((uint32_t)addr[0]) & 0x000000FF;
;;;371          taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
;;;372          taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
;;;373          taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
;;;374       }
;;;375       //
;;;376       if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
;;;377       if(port == 0)               return SOCKERR_PORTZERO;
;;;378       tmp = getSn_SR(sn);
;;;379       if(tmp != SOCK_MACRAW && tmp != SOCK_UDP) return SOCKERR_SOCKSTATUS;
;;;380          
;;;381       setSn_DIPR(sn,addr);
;;;382       setSn_DPORT(sn,port);      
;;;383       freesize = getSn_TxMAX(sn);
;;;384       if (len > freesize) len = freesize; // check size not to exceed MAX size.
;;;385       while(1)
;;;386       {
;;;387          freesize = getSn_TX_FSR(sn);
;;;388          if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
;;;389          if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
;;;390          if(len <= freesize) break;
;;;391       };
;;;392    	wiz_send_data(sn, buf, len);
;;;393    
;;;394       #if _WIZCHIP_ == 5200   // for W5200 ARP errata 
;;;395          setSUBR(0);
;;;396       #endif
;;;397    
;;;398    	setSn_CR(sn,Sn_CR_SEND);
;;;399    	/* wait to process the command... */
;;;400    	while(getSn_CR(sn));
;;;401       #if _WIZCHIP_ == 5200   // for W5200 ARP errata 
;;;402          setSUBR((uint8_t*)"\x00\x00\x00\x00");
;;;403       #endif
;;;404       while(1)
;;;405       {
;;;406          tmp = getSn_IR(sn);
;;;407          if(tmp & Sn_IR_SENDOK)
;;;408          {
;;;409             setSn_IR(sn, Sn_IR_SENDOK);
;;;410             break;
;;;411          }
;;;412          //M:20131104
;;;413          //else if(tmp & Sn_IR_TIMEOUT) return SOCKERR_TIMEOUT;
;;;414          else if(tmp & Sn_IR_TIMEOUT)
;;;415          {
;;;416             setSn_IR(sn, Sn_IR_TIMEOUT);
;;;417             return SOCKERR_TIMEOUT;
;;;418          }
;;;419          ////////////
;;;420       }
;;;421    	return len;
;;;422    }
00001c  e8bd87f0          POP      {r4-r10,pc}
                  |L10.32|
000020  bf00              NOP                            ;356
000022  00a1              LSLS     r1,r4,#2              ;357
000024  1c49              ADDS     r1,r1,#1              ;357
000026  2200              MOVS     r2,#0                 ;357
000028  eb0200c1          ADD      r0,r2,r1,LSL #3       ;357
00002c  f7fffffe          BL       WIZCHIP_READ
000030  f000000f          AND      r0,r0,#0xf            ;357
000034  2802              CMP      r0,#2                 ;357
000036  d002              BEQ      |L10.62|
000038  2804              CMP      r0,#4                 ;357
00003a  d102              BNE      |L10.66|
00003c  e000              B        |L10.64|
                  |L10.62|
00003e  bf00              NOP                            ;360
                  |L10.64|
000040  e002              B        |L10.72|
                  |L10.66|
000042  f06f0004          MVN      r0,#4                 ;363
000046  e7e9              B        |L10.28|
                  |L10.72|
000048  bf00              NOP                            ;361
00004a  bf00              NOP                            ;365
00004c  b916              CBNZ     r6,|L10.84|
00004e  f06f000d          MVN      r0,#0xd               ;365
000052  e7e3              B        |L10.28|
                  |L10.84|
000054  bf00              NOP                            ;365
000056  7828              LDRB     r0,[r5,#0]            ;370
000058  7869              LDRB     r1,[r5,#1]            ;371
00005a  f360211f          BFI      r1,r0,#8,#24          ;371
00005e  4608              MOV      r0,r1                 ;371
000060  78a9              LDRB     r1,[r5,#2]            ;372
000062  f360211f          BFI      r1,r0,#8,#24          ;372
000066  4608              MOV      r0,r1                 ;372
000068  78e9              LDRB     r1,[r5,#3]            ;373
00006a  f360211f          BFI      r1,r0,#8,#24          ;373
00006e  4608              MOV      r0,r1                 ;373
000070  6828              LDR      r0,[r5,#0]            ;376
000072  b910              CBNZ     r0,|L10.122|
000074  f06f000b          MVN      r0,#0xb               ;376
000078  e7d0              B        |L10.28|
                  |L10.122|
00007a  f1b90f00          CMP      r9,#0                 ;377
00007e  d102              BNE      |L10.134|
000080  f06f000a          MVN      r0,#0xa               ;377
000084  e7ca              B        |L10.28|
                  |L10.134|
000086  00a1              LSLS     r1,r4,#2              ;378
000088  1c49              ADDS     r1,r1,#1              ;378
00008a  f44f7240          MOV      r2,#0x300             ;378
00008e  eb0200c1          ADD      r0,r2,r1,LSL #3       ;378
000092  f7fffffe          BL       WIZCHIP_READ
000096  4607              MOV      r7,r0                 ;378
000098  2f42              CMP      r7,#0x42              ;379
00009a  d004              BEQ      |L10.166|
00009c  2f22              CMP      r7,#0x22              ;379
00009e  d002              BEQ      |L10.166|
0000a0  f06f0006          MVN      r0,#6                 ;379
0000a4  e7ba              B        |L10.28|
                  |L10.166|
0000a6  00a1              LSLS     r1,r4,#2              ;381
0000a8  1c49              ADDS     r1,r1,#1              ;381
0000aa  f44f6240          MOV      r2,#0xc00             ;381
0000ae  eb0200c1          ADD      r0,r2,r1,LSL #3       ;381
0000b2  2204              MOVS     r2,#4                 ;381
0000b4  4629              MOV      r1,r5                 ;381
0000b6  f7fffffe          BL       WIZCHIP_WRITE_BUF
0000ba  ea4f2129          ASR      r1,r9,#8              ;382
0000be  00a2              LSLS     r2,r4,#2              ;382
0000c0  1c52              ADDS     r2,r2,#1              ;382
0000c2  f44f5380          MOV      r3,#0x1000            ;382
0000c6  eb0300c2          ADD      r0,r3,r2,LSL #3       ;382
0000ca  f7fffffe          BL       WIZCHIP_WRITE
0000ce  f00901ff          AND      r1,r9,#0xff           ;382
0000d2  00a2              LSLS     r2,r4,#2              ;382
0000d4  1c52              ADDS     r2,r2,#1              ;382
0000d6  f44f5380          MOV      r3,#0x1000            ;382
0000da  eb0302c2          ADD      r2,r3,r2,LSL #3       ;382
0000de  f5027080          ADD      r0,r2,#0x100          ;382
0000e2  f7fffffe          BL       WIZCHIP_WRITE
0000e6  00a1              LSLS     r1,r4,#2              ;383
0000e8  1c49              ADDS     r1,r1,#1              ;383
0000ea  f44f52f8          MOV      r2,#0x1f00            ;383
0000ee  eb0200c1          ADD      r0,r2,r1,LSL #3       ;383
0000f2  f7fffffe          BL       WIZCHIP_READ
0000f6  f64f71ff          MOV      r1,#0xffff            ;383
0000fa  ea012880          AND      r8,r1,r0,LSL #10      ;383
0000fe  4546              CMP      r6,r8                 ;384
000100  dd00              BLE      |L10.260|
000102  4646              MOV      r6,r8                 ;384
                  |L10.260|
000104  e01c              B        |L10.320|
                  |L10.262|
000106  4620              MOV      r0,r4                 ;387
000108  f7fffffe          BL       getSn_TX_FSR
00010c  4680              MOV      r8,r0                 ;387
00010e  00a1              LSLS     r1,r4,#2              ;388
000110  1c49              ADDS     r1,r1,#1              ;388
000112  f44f7240          MOV      r2,#0x300             ;388
000116  eb0200c1          ADD      r0,r2,r1,LSL #3       ;388
00011a  f7fffffe          BL       WIZCHIP_READ
00011e  b910              CBNZ     r0,|L10.294|
000120  f06f0003          MVN      r0,#3                 ;388
000124  e77a              B        |L10.28|
                  |L10.294|
000126  2001              MOVS     r0,#1                 ;389
000128  40a0              LSLS     r0,r0,r4              ;389
00012a  4928              LDR      r1,|L10.460|
00012c  8809              LDRH     r1,[r1,#0]            ;389  ; sock_io_mode
00012e  4008              ANDS     r0,r0,r1              ;389
000130  b118              CBZ      r0,|L10.314|
000132  4546              CMP      r6,r8                 ;389
000134  dd01              BLE      |L10.314|
000136  2000              MOVS     r0,#0                 ;389
000138  e770              B        |L10.28|
                  |L10.314|
00013a  4546              CMP      r6,r8                 ;390
00013c  dc00              BGT      |L10.320|
00013e  e000              B        |L10.322|
                  |L10.320|
000140  e7e1              B        |L10.262|
                  |L10.322|
000142  bf00              NOP                            ;390
000144  4632              MOV      r2,r6                 ;392
000146  4651              MOV      r1,r10                ;392
000148  4620              MOV      r0,r4                 ;392
00014a  f7fffffe          BL       wiz_send_data
00014e  00a1              LSLS     r1,r4,#2              ;398
000150  1c49              ADDS     r1,r1,#1              ;398
000152  f44f7280          MOV      r2,#0x100             ;398
000156  eb0200c1          ADD      r0,r2,r1,LSL #3       ;398
00015a  2120              MOVS     r1,#0x20              ;398
00015c  f7fffffe          BL       WIZCHIP_WRITE
000160  bf00              NOP                            ;400
                  |L10.354|
000162  00a1              LSLS     r1,r4,#2              ;400
000164  1c49              ADDS     r1,r1,#1              ;400
000166  f44f7280          MOV      r2,#0x100             ;400
00016a  eb0200c1          ADD      r0,r2,r1,LSL #3       ;400
00016e  f7fffffe          BL       WIZCHIP_READ
000172  2800              CMP      r0,#0                 ;400
000174  d1f5              BNE      |L10.354|
000176  e025              B        |L10.452|
                  |L10.376|
000178  00a1              LSLS     r1,r4,#2              ;406
00017a  1c49              ADDS     r1,r1,#1              ;406
00017c  f44f7200          MOV      r2,#0x200             ;406
000180  eb0200c1          ADD      r0,r2,r1,LSL #3       ;406
000184  f7fffffe          BL       WIZCHIP_READ
000188  f000071f          AND      r7,r0,#0x1f           ;406
00018c  f0070010          AND      r0,r7,#0x10           ;407
000190  b148              CBZ      r0,|L10.422|
000192  00a1              LSLS     r1,r4,#2              ;409
000194  1c49              ADDS     r1,r1,#1              ;409
000196  f44f7200          MOV      r2,#0x200             ;409
00019a  eb0200c1          ADD      r0,r2,r1,LSL #3       ;409
00019e  2110              MOVS     r1,#0x10              ;409
0001a0  f7fffffe          BL       WIZCHIP_WRITE
0001a4  e00f              B        |L10.454|
                  |L10.422|
0001a6  f0070008          AND      r0,r7,#8              ;414
0001aa  b158              CBZ      r0,|L10.452|
0001ac  00a1              LSLS     r1,r4,#2              ;416
0001ae  1c49              ADDS     r1,r1,#1              ;416
0001b0  f44f7200          MOV      r2,#0x200             ;416
0001b4  eb0200c1          ADD      r0,r2,r1,LSL #3       ;416
0001b8  2108              MOVS     r1,#8                 ;416
0001ba  f7fffffe          BL       WIZCHIP_WRITE
0001be  f06f000c          MVN      r0,#0xc               ;417
0001c2  e72b              B        |L10.28|
                  |L10.452|
0001c4  e7d8              B        |L10.376|
                  |L10.454|
0001c6  bf00              NOP                            ;410
0001c8  4630              MOV      r0,r6                 ;421
0001ca  e727              B        |L10.28|
;;;423    
                          ENDP

                  |L10.460|
                          DCD      sock_io_mode

                          AREA ||i.setsockopt||, CODE, READONLY, ALIGN=1

                  setsockopt PROC
;;;587    
;;;588    int8_t  setsockopt(uint8_t sn, sockopt_type sotype, void* arg)
000000  b570              PUSH     {r4-r6,lr}
;;;589    {
000002  4604              MOV      r4,r0
000004  460e              MOV      r6,r1
000006  4615              MOV      r5,r2
;;;590     // M20131220 : Remove warning
;;;591     //uint8_t tmp;
;;;592       CHECK_SOCKNUM();
000008  bf00              NOP      
00000a  2c08              CMP      r4,#8
00000c  dd02              BLE      |L11.20|
00000e  f04f30ff          MOV      r0,#0xffffffff
                  |L11.18|
;;;593       switch(sotype)
;;;594       {
;;;595          case SO_TTL:
;;;596             setSn_TTL(sn,*(uint8_t*)arg);
;;;597             break;
;;;598          case SO_TOS:
;;;599             setSn_TOS(sn,*(uint8_t*)arg);
;;;600             break;
;;;601          case SO_MSS:
;;;602             setSn_MSSR(sn,*(uint16_t*)arg);
;;;603             break;
;;;604          case SO_DESTIP:
;;;605             setSn_DIPR(sn, (uint8_t*)arg);
;;;606             break;
;;;607          case SO_DESTPORT:
;;;608             setSn_DPORT(sn, *(uint16_t*)arg);
;;;609             break;
;;;610    #if _WIZCHIP_ != 5100
;;;611          case SO_KEEPALIVESEND:
;;;612             CHECK_SOCKMODE(Sn_MR_TCP);
;;;613             #if _WIZCHIP_ > 5200
;;;614                if(getSn_KPALVTR(sn) != 0) return SOCKERR_SOCKOPT;
;;;615             #endif
;;;616                setSn_CR(sn,Sn_CR_SEND_KEEP);
;;;617                while(getSn_CR(sn) != 0)
;;;618                {
;;;619                   // M20131220
;;;620             		//if ((tmp = getSn_IR(sn)) & Sn_IR_TIMEOUT)
;;;621                   if (getSn_IR(sn) & Sn_IR_TIMEOUT)
;;;622             		{
;;;623             			setSn_IR(sn, Sn_IR_TIMEOUT);
;;;624                      return SOCKERR_TIMEOUT;
;;;625             		}
;;;626                }
;;;627             break;
;;;628       #if _WIZCHIP_ > 5200
;;;629          case SO_KEEPALIVEAUTO:
;;;630             CHECK_SOCKMODE(Sn_MR_TCP);
;;;631             setSn_KPALVTR(sn,*(uint8_t*)arg);
;;;632             break;
;;;633       #endif      
;;;634    #endif   
;;;635          default:
;;;636             return SOCKERR_ARG;
;;;637       }   
;;;638       return SOCK_OK;
;;;639    }
000012  bd70              POP      {r4-r6,pc}
                  |L11.20|
000014  bf00              NOP                            ;592
000016  2e08              CMP      r6,#8                 ;593
000018  d276              BCS      |L11.264|
00001a  e8dff006          TBB      [pc,r6]               ;593
00001e  b204              DCB      0xb2,0x04
000020  0e182e39          DCB      0x0e,0x18,0x2e,0x39
000024  4f98              DCB      0x4f,0x98
000026  7829              LDRB     r1,[r5,#0]            ;596
000028  00a2              LSLS     r2,r4,#2              ;596
00002a  1c52              ADDS     r2,r2,#1              ;596
00002c  f44f53b0          MOV      r3,#0x1600            ;596
000030  eb0300c2          ADD      r0,r3,r2,LSL #3       ;596
000034  f7fffffe          BL       WIZCHIP_WRITE
000038  e0a6              B        |L11.392|
00003a  7829              LDRB     r1,[r5,#0]            ;599
00003c  00a2              LSLS     r2,r4,#2              ;599
00003e  1c52              ADDS     r2,r2,#1              ;599
000040  f44f53a8          MOV      r3,#0x1500            ;599
000044  eb0300c2          ADD      r0,r3,r2,LSL #3       ;599
000048  f7fffffe          BL       WIZCHIP_WRITE
00004c  e09c              B        |L11.392|
00004e  882a              LDRH     r2,[r5,#0]            ;602
000050  1211              ASRS     r1,r2,#8              ;602
000052  00a2              LSLS     r2,r4,#2              ;602
000054  1c52              ADDS     r2,r2,#1              ;602
000056  f44f5390          MOV      r3,#0x1200            ;602
00005a  eb0300c2          ADD      r0,r3,r2,LSL #3       ;602
00005e  f7fffffe          BL       WIZCHIP_WRITE
000062  7829              LDRB     r1,[r5,#0]            ;602
000064  00a2              LSLS     r2,r4,#2              ;602
000066  1c52              ADDS     r2,r2,#1              ;602
000068  f44f5390          MOV      r3,#0x1200            ;602
00006c  eb0302c2          ADD      r2,r3,r2,LSL #3       ;602
000070  f5027080          ADD      r0,r2,#0x100          ;602
000074  f7fffffe          BL       WIZCHIP_WRITE
000078  e086              B        |L11.392|
00007a  00a1              LSLS     r1,r4,#2              ;605
00007c  1c49              ADDS     r1,r1,#1              ;605
00007e  f44f6240          MOV      r2,#0xc00             ;605
000082  eb0200c1          ADD      r0,r2,r1,LSL #3       ;605
000086  2204              MOVS     r2,#4                 ;605
000088  4629              MOV      r1,r5                 ;605
00008a  f7fffffe          BL       WIZCHIP_WRITE_BUF
00008e  e07b              B        |L11.392|
000090  882a              LDRH     r2,[r5,#0]            ;608
000092  1211              ASRS     r1,r2,#8              ;608
000094  00a2              LSLS     r2,r4,#2              ;608
000096  1c52              ADDS     r2,r2,#1              ;608
000098  f44f5380          MOV      r3,#0x1000            ;608
00009c  eb0300c2          ADD      r0,r3,r2,LSL #3       ;608
0000a0  f7fffffe          BL       WIZCHIP_WRITE
0000a4  7829              LDRB     r1,[r5,#0]            ;608
0000a6  00a2              LSLS     r2,r4,#2              ;608
0000a8  1c52              ADDS     r2,r2,#1              ;608
0000aa  f44f5380          MOV      r3,#0x1000            ;608
0000ae  eb0302c2          ADD      r2,r3,r2,LSL #3       ;608
0000b2  f5027080          ADD      r0,r2,#0x100          ;608
0000b6  f7fffffe          BL       WIZCHIP_WRITE
0000ba  e065              B        |L11.392|
0000bc  bf00              NOP                            ;612
0000be  00a1              LSLS     r1,r4,#2              ;612
0000c0  1c49              ADDS     r1,r1,#1              ;612
0000c2  2200              MOVS     r2,#0                 ;612
0000c4  eb0200c1          ADD      r0,r2,r1,LSL #3       ;612
0000c8  f7fffffe          BL       WIZCHIP_READ
0000cc  f000000f          AND      r0,r0,#0xf            ;612
0000d0  2801              CMP      r0,#1                 ;612
0000d2  d002              BEQ      |L11.218|
0000d4  f06f0004          MVN      r0,#4                 ;612
0000d8  e79b              B        |L11.18|
                  |L11.218|
0000da  bf00              NOP                            ;612
0000dc  00a1              LSLS     r1,r4,#2              ;614
0000de  1c49              ADDS     r1,r1,#1              ;614
0000e0  f44f523c          MOV      r2,#0x2f00            ;614
0000e4  eb0200c1          ADD      r0,r2,r1,LSL #3       ;614
0000e8  f7fffffe          BL       WIZCHIP_READ
0000ec  b110              CBZ      r0,|L11.244|
0000ee  f06f0001          MVN      r0,#1                 ;614
0000f2  e78e              B        |L11.18|
                  |L11.244|
0000f4  00a1              LSLS     r1,r4,#2              ;616
0000f6  1c49              ADDS     r1,r1,#1              ;616
0000f8  f44f7280          MOV      r2,#0x100             ;616
0000fc  eb0200c1          ADD      r0,r2,r1,LSL #3       ;616
000100  2122              MOVS     r1,#0x22              ;616
000102  f7fffffe          BL       WIZCHIP_WRITE
000106  e017              B        |L11.312|
                  |L11.264|
000108  e03b              B        |L11.386|
                  |L11.266|
00010a  00a1              LSLS     r1,r4,#2              ;621
00010c  1c49              ADDS     r1,r1,#1              ;621
00010e  f44f7200          MOV      r2,#0x200             ;621
000112  eb0200c1          ADD      r0,r2,r1,LSL #3       ;621
000116  f7fffffe          BL       WIZCHIP_READ
00011a  f0000008          AND      r0,r0,#8              ;621
00011e  b158              CBZ      r0,|L11.312|
000120  00a1              LSLS     r1,r4,#2              ;623
000122  1c49              ADDS     r1,r1,#1              ;623
000124  f44f7200          MOV      r2,#0x200             ;623
000128  eb0200c1          ADD      r0,r2,r1,LSL #3       ;623
00012c  2108              MOVS     r1,#8                 ;623
00012e  f7fffffe          BL       WIZCHIP_WRITE
000132  f06f000c          MVN      r0,#0xc               ;624
000136  e76c              B        |L11.18|
                  |L11.312|
000138  00a1              LSLS     r1,r4,#2              ;617
00013a  1c49              ADDS     r1,r1,#1              ;617
00013c  f44f7280          MOV      r2,#0x100             ;617
000140  eb0200c1          ADD      r0,r2,r1,LSL #3       ;617
000144  f7fffffe          BL       WIZCHIP_READ
000148  2800              CMP      r0,#0                 ;617
00014a  d1de              BNE      |L11.266|
00014c  e01c              B        |L11.392|
00014e  bf00              NOP                            ;630
000150  00a1              LSLS     r1,r4,#2              ;630
000152  1c49              ADDS     r1,r1,#1              ;630
000154  2200              MOVS     r2,#0                 ;630
000156  eb0200c1          ADD      r0,r2,r1,LSL #3       ;630
00015a  f7fffffe          BL       WIZCHIP_READ
00015e  f000000f          AND      r0,r0,#0xf            ;630
000162  2801              CMP      r0,#1                 ;630
000164  d002              BEQ      |L11.364|
000166  f06f0004          MVN      r0,#4                 ;630
00016a  e752              B        |L11.18|
                  |L11.364|
00016c  bf00              NOP                            ;630
00016e  7829              LDRB     r1,[r5,#0]            ;631
000170  00a2              LSLS     r2,r4,#2              ;631
000172  1c52              ADDS     r2,r2,#1              ;631
000174  f44f533c          MOV      r3,#0x2f00            ;631
000178  eb0300c2          ADD      r0,r3,r2,LSL #3       ;631
00017c  f7fffffe          BL       WIZCHIP_WRITE
000180  e002              B        |L11.392|
                  |L11.386|
000182  f06f0009          MVN      r0,#9                 ;636
000186  e744              B        |L11.18|
                  |L11.392|
000188  bf00              NOP                            ;597
00018a  2001              MOVS     r0,#1                 ;638
00018c  e741              B        |L11.18|
;;;640    
                          ENDP


                          AREA ||i.socket||, CODE, READONLY, ALIGN=2

                  socket PROC
;;;87     
;;;88     int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;89     {
000004  4604              MOV      r4,r0
000006  460e              MOV      r6,r1
000008  4617              MOV      r7,r2
00000a  461d              MOV      r5,r3
;;;90     	CHECK_SOCKNUM();
00000c  bf00              NOP      
00000e  2c08              CMP      r4,#8
000010  dd03              BLE      |L12.26|
000012  f04f30ff          MOV      r0,#0xffffffff
                  |L12.22|
;;;91     	switch(protocol)
;;;92     	{
;;;93           case Sn_MR_TCP :
;;;94           case Sn_MR_UDP :
;;;95           case Sn_MR_MACRAW :
;;;96              break;
;;;97        #if ( _WIZCHIP_ < 5200 )
;;;98           case Sn_MR_IPRAW :
;;;99           case Sn_MR_PPPoE :
;;;100             break;
;;;101       #endif
;;;102          default :
;;;103             return SOCKERR_SOCKMODE;
;;;104    	}
;;;105    	if((flag & 0x06) != 0) return SOCKERR_SOCKFLAG;
;;;106    #if _WIZCHIP_ == 5200
;;;107       if(flag & 0x10) return SOCKERR_SOCKFLAG;
;;;108    #endif
;;;109    	   
;;;110    	if(flag != 0)
;;;111    	{
;;;112       	switch(protocol)
;;;113       	{
;;;114       	   case Sn_MR_TCP:
;;;115       	      if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
;;;116       	      break;
;;;117       	   case Sn_MR_UDP:
;;;118       	      if(flag & SF_IGMP_VER2)
;;;119       	      {
;;;120       	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
;;;121       	      }
;;;122       	      #if _WIZCHIP_ == 5500
;;;123          	      if(flag & SF_UNI_BLOCK)
;;;124          	      {
;;;125          	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
;;;126          	      }
;;;127       	      #endif
;;;128       	      break;
;;;129       	   default:
;;;130       	      break;
;;;131       	}
;;;132       }
;;;133    	close(sn);
;;;134    	setSn_MR(sn, (protocol | (flag & 0xF0)));
;;;135    	if(!port)
;;;136    	{
;;;137    	   port = sock_any_port++;
;;;138    	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
;;;139    	}
;;;140       setSn_PORT(sn,port);	
;;;141       setSn_CR(sn,Sn_CR_OPEN);
;;;142       while(getSn_CR(sn));
;;;143    	 sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
;;;144       sock_is_sending &= ~(1<<sn);
;;;145       sock_remained_size[sn] = 0;
;;;146       sock_pack_info[sn] = 0;
;;;147       while(getSn_SR(sn) == SOCK_CLOSED);
;;;148       return (int8_t)sn;
;;;149    }	   
000016  e8bd81f0          POP      {r4-r8,pc}
                  |L12.26|
00001a  bf00              NOP                            ;90
00001c  2e01              CMP      r6,#1                 ;91
00001e  d004              BEQ      |L12.42|
000020  2e02              CMP      r6,#2                 ;91
000022  d003              BEQ      |L12.44|
000024  2e04              CMP      r6,#4                 ;91
000026  d103              BNE      |L12.48|
000028  e001              B        |L12.46|
                  |L12.42|
00002a  bf00              NOP                            ;94
                  |L12.44|
00002c  bf00              NOP                            ;95
                  |L12.46|
00002e  e002              B        |L12.54|
                  |L12.48|
000030  f06f0004          MVN      r0,#4                 ;103
000034  e7ef              B        |L12.22|
                  |L12.54|
000036  bf00              NOP                            ;96
000038  f0050006          AND      r0,r5,#6              ;105
00003c  b110              CBZ      r0,|L12.68|
00003e  f06f0005          MVN      r0,#5                 ;105
000042  e7e8              B        |L12.22|
                  |L12.68|
000044  b305              CBZ      r5,|L12.136|
000046  2e01              CMP      r6,#1                 ;112
000048  d002              BEQ      |L12.80|
00004a  2e02              CMP      r6,#2                 ;112
00004c  d11a              BNE      |L12.132|
00004e  e006              B        |L12.94|
                  |L12.80|
000050  f0050021          AND      r0,r5,#0x21           ;115
000054  b910              CBNZ     r0,|L12.92|
000056  f06f0005          MVN      r0,#5                 ;115
00005a  e7dc              B        |L12.22|
                  |L12.92|
00005c  e013              B        |L12.134|
                  |L12.94|
00005e  f0050020          AND      r0,r5,#0x20           ;118
000062  b128              CBZ      r0,|L12.112|
000064  f0050080          AND      r0,r5,#0x80           ;120
000068  b910              CBNZ     r0,|L12.112|
00006a  f06f0005          MVN      r0,#5                 ;120
00006e  e7d2              B        |L12.22|
                  |L12.112|
000070  f0050010          AND      r0,r5,#0x10           ;123
000074  b128              CBZ      r0,|L12.130|
000076  f0050080          AND      r0,r5,#0x80           ;125
00007a  b910              CBNZ     r0,|L12.130|
00007c  f06f0005          MVN      r0,#5                 ;125
000080  e7c9              B        |L12.22|
                  |L12.130|
000082  e000              B        |L12.134|
                  |L12.132|
000084  bf00              NOP                            ;130
                  |L12.134|
000086  bf00              NOP                            ;116
                  |L12.136|
000088  4620              MOV      r0,r4                 ;133
00008a  f7fffffe          BL       close
00008e  f00502f0          AND      r2,r5,#0xf0           ;134
000092  ea420106          ORR      r1,r2,r6              ;134
000096  00a2              LSLS     r2,r4,#2              ;134
000098  1c52              ADDS     r2,r2,#1              ;134
00009a  2300              MOVS     r3,#0                 ;134
00009c  eb0300c2          ADD      r0,r3,r2,LSL #3       ;134
0000a0  f7fffffe          BL       WIZCHIP_WRITE
0000a4  b97f              CBNZ     r7,|L12.198|
0000a6  482d              LDR      r0,|L12.348|
0000a8  8807              LDRH     r7,[r0,#0]            ;137  ; sock_any_port
0000aa  8800              LDRH     r0,[r0,#0]            ;137  ; sock_any_port
0000ac  1c40              ADDS     r0,r0,#1              ;137
0000ae  492b              LDR      r1,|L12.348|
0000b0  8008              STRH     r0,[r1,#0]            ;137
0000b2  4608              MOV      r0,r1                 ;138
0000b4  8800              LDRH     r0,[r0,#0]            ;138  ; sock_any_port
0000b6  f64f71f0          MOV      r1,#0xfff0            ;138
0000ba  4288              CMP      r0,r1                 ;138
0000bc  d103              BNE      |L12.198|
0000be  f44f4040          MOV      r0,#0xc000            ;138
0000c2  4926              LDR      r1,|L12.348|
0000c4  8008              STRH     r0,[r1,#0]            ;138
                  |L12.198|
0000c6  1239              ASRS     r1,r7,#8              ;140
0000c8  00a2              LSLS     r2,r4,#2              ;140
0000ca  1c52              ADDS     r2,r2,#1              ;140
0000cc  f44f6380          MOV      r3,#0x400             ;140
0000d0  eb0300c2          ADD      r0,r3,r2,LSL #3       ;140
0000d4  f7fffffe          BL       WIZCHIP_WRITE
0000d8  b2f9              UXTB     r1,r7                 ;140
0000da  00a2              LSLS     r2,r4,#2              ;140
0000dc  1c52              ADDS     r2,r2,#1              ;140
0000de  f44f6380          MOV      r3,#0x400             ;140
0000e2  eb0302c2          ADD      r2,r3,r2,LSL #3       ;140
0000e6  f5027080          ADD      r0,r2,#0x100          ;140
0000ea  f7fffffe          BL       WIZCHIP_WRITE
0000ee  00a1              LSLS     r1,r4,#2              ;141
0000f0  1c49              ADDS     r1,r1,#1              ;141
0000f2  f44f7280          MOV      r2,#0x100             ;141
0000f6  eb0200c1          ADD      r0,r2,r1,LSL #3       ;141
0000fa  2101              MOVS     r1,#1                 ;141
0000fc  f7fffffe          BL       WIZCHIP_WRITE
000100  bf00              NOP                            ;142
                  |L12.258|
000102  00a1              LSLS     r1,r4,#2              ;142
000104  1c49              ADDS     r1,r1,#1              ;142
000106  f44f7280          MOV      r2,#0x100             ;142
00010a  eb0200c1          ADD      r0,r2,r1,LSL #3       ;142
00010e  f7fffffe          BL       WIZCHIP_READ
000112  2800              CMP      r0,#0                 ;142
000114  d1f5              BNE      |L12.258|
000116  f0050001          AND      r0,r5,#1              ;143
00011a  40a0              LSLS     r0,r0,r4              ;143
00011c  4910              LDR      r1,|L12.352|
00011e  8809              LDRH     r1,[r1,#0]            ;143  ; sock_io_mode
000120  4308              ORRS     r0,r0,r1              ;143
000122  490f              LDR      r1,|L12.352|
000124  8008              STRH     r0,[r1,#0]            ;143
000126  2001              MOVS     r0,#1                 ;144
000128  40a0              LSLS     r0,r0,r4              ;144
00012a  490e              LDR      r1,|L12.356|
00012c  8809              LDRH     r1,[r1,#0]            ;144  ; sock_is_sending
00012e  4381              BICS     r1,r1,r0              ;144
000130  480c              LDR      r0,|L12.356|
000132  8001              STRH     r1,[r0,#0]            ;144
000134  2000              MOVS     r0,#0                 ;145
000136  490c              LDR      r1,|L12.360|
000138  f8210014          STRH     r0,[r1,r4,LSL #1]     ;145
00013c  490b              LDR      r1,|L12.364|
00013e  5508              STRB     r0,[r1,r4]            ;146
000140  bf00              NOP                            ;147
                  |L12.322|
000142  00a1              LSLS     r1,r4,#2              ;147
000144  1c49              ADDS     r1,r1,#1              ;147
000146  f44f7240          MOV      r2,#0x300             ;147
00014a  eb0200c1          ADD      r0,r2,r1,LSL #3       ;147
00014e  f7fffffe          BL       WIZCHIP_READ
000152  2800              CMP      r0,#0                 ;147
000154  d0f5              BEQ      |L12.322|
000156  b260              SXTB     r0,r4                 ;148
000158  e75d              B        |L12.22|
;;;150    
                          ENDP

00015a  0000              DCW      0x0000
                  |L12.348|
                          DCD      sock_any_port
                  |L12.352|
                          DCD      sock_io_mode
                  |L12.356|
                          DCD      sock_is_sending
                  |L12.360|
                          DCD      sock_remained_size
                  |L12.364|
                          DCD      sock_pack_info

                          AREA ||.bss||, DATA, NOINIT, ALIGN=1

                  sock_remained_size
                          %        16

                          AREA ||.data||, DATA, ALIGN=1

                  sock_any_port
000000  c000              DCW      0xc000
                  sock_io_mode
000002  0000              DCW      0x0000
                  sock_is_sending
000004  0000              DCW      0x0000
                  sock_pack_info
000006  0000              DCB      0x00,0x00
                          DCDU     0x00000000
00000c  0000              DCB      0x00,0x00
