; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\flash\obj\mqttconnectclient.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\mqttconnectclient.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931,870 -I..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\User\bsp -I..\..\User\bsp\inc -I..\..\User -I..\..\Libraries\CMSIS\Include -I..\..\FreeRTOS\include -I..\..\FreeRTOS\portable\RVDS\ARM_CM3 -I..\..\MQTT -I..\..\Ethernet -I..\..\Ethernet\W5500 -I..\..\Internet\DHCP -I..\..\Internet\DNS -I..\..\User\app\src -I..\..\User\app\inc -I..\..\Internet\NTP -I..\..\Internet\HTTP -I.\RTE\_Flash -ID:\MDK5\ARM\CMSIS\5.0.1\CMSIS\Include -ID:\MDK5\Keil\STM32F1xx_DFP\2.0.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=523 -D_RTE_ -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=.\flash\obj\mqttconnectclient.crf ..\..\MQTT\MQTTConnectClient.c]
                          THUMB

                          AREA ||i.MQTTDeserialize_connack||, CODE, READONLY, ALIGN=1

                  MQTTDeserialize_connack PROC
;;;131      */
;;;132    int MQTTDeserialize_connack(unsigned char* sessionPresent, unsigned char* connack_rc, unsigned char* buf, int buflen)
000000  e92d47ff          PUSH     {r0-r10,lr}
;;;133    {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
00000a  4699              MOV      r9,r3
;;;134    	MQTTHeader header = {0};
00000c  2000              MOVS     r0,#0
00000e  9003              STR      r0,[sp,#0xc]
;;;135    	unsigned char* curdata = buf;
000010  9602              STR      r6,[sp,#8]
;;;136    	unsigned char* enddata = NULL;
000012  2700              MOVS     r7,#0
;;;137    	int rc = 0;
000014  4680              MOV      r8,r0
;;;138    	int mylen;
;;;139    	MQTTConnackFlags flags = {0};
000016  9000              STR      r0,[sp,#0]
;;;140    
;;;141    	FUNC_ENTRY;
;;;142    	header.byte = readChar(&curdata);
000018  a802              ADD      r0,sp,#8
00001a  f7fffffe          BL       readChar
00001e  f88d000c          STRB     r0,[sp,#0xc]
;;;143    	if (header.bits.type != CONNACK)
000022  9803              LDR      r0,[sp,#0xc]
000024  f3c01003          UBFX     r0,r0,#4,#4
000028  2802              CMP      r0,#2
00002a  d000              BEQ      |L1.46|
;;;144    		goto exit;
00002c  e01f              B        |L1.110|
                  |L1.46|
;;;145    
;;;146    	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
00002e  a901              ADD      r1,sp,#4
000030  9802              LDR      r0,[sp,#8]
000032  f7fffffe          BL       MQTTPacket_decodeBuf
000036  4680              MOV      r8,r0
000038  9902              LDR      r1,[sp,#8]
00003a  4408              ADD      r0,r0,r1
00003c  9002              STR      r0,[sp,#8]
;;;147    	enddata = curdata + mylen;
00003e  e9dd1001          LDRD     r1,r0,[sp,#4]
000042  1847              ADDS     r7,r0,r1
;;;148    	if (enddata - curdata < 2)
000044  9802              LDR      r0,[sp,#8]
000046  1a38              SUBS     r0,r7,r0
000048  2802              CMP      r0,#2
00004a  da00              BGE      |L1.78|
;;;149    		goto exit;
00004c  e00f              B        |L1.110|
                  |L1.78|
;;;150    
;;;151    	flags.all = readChar(&curdata);
00004e  a802              ADD      r0,sp,#8
000050  f7fffffe          BL       readChar
000054  f88d0000          STRB     r0,[sp,#0]
;;;152    	*sessionPresent = flags.bits.sessionpresent;
000058  9800              LDR      r0,[sp,#0]
00005a  f0000001          AND      r0,r0,#1
00005e  7020              STRB     r0,[r4,#0]
;;;153    	*connack_rc = readChar(&curdata);
000060  a802              ADD      r0,sp,#8
000062  f7fffffe          BL       readChar
000066  7028              STRB     r0,[r5,#0]
;;;154    
;;;155    	rc = 1;
000068  f04f0801          MOV      r8,#1
;;;156    exit:
00006c  bf00              NOP      
                  |L1.110|
;;;157    	FUNC_EXIT_RC(rc);
;;;158    	return rc;
00006e  4640              MOV      r0,r8
;;;159    }
000070  b004              ADD      sp,sp,#0x10
000072  e8bd87f0          POP      {r4-r10,pc}
;;;160    
                          ENDP


                          AREA ||i.MQTTSerialize_connect||, CODE, READONLY, ALIGN=2

                  MQTTSerialize_connect PROC
;;;57       */
;;;58     int MQTTSerialize_connect(unsigned char* buf, int buflen, MQTTPacket_connectData* options)
000000  e92d43fe          PUSH     {r1-r9,lr}
;;;59     {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4614              MOV      r4,r2
;;;60     	unsigned char *ptr = buf;
00000a  9502              STR      r5,[sp,#8]
;;;61     	MQTTHeader header = {0};
00000c  2000              MOVS     r0,#0
00000e  9001              STR      r0,[sp,#4]
;;;62     	MQTTConnectFlags flags = {0};
000010  9000              STR      r0,[sp,#0]
;;;63     	int len = 0;
000012  2700              MOVS     r7,#0
;;;64     	int rc = -1;
000014  f04f38ff          MOV      r8,#0xffffffff
;;;65     
;;;66     	FUNC_ENTRY;
;;;67     	if (MQTTPacket_len(len = MQTTSerialize_connectLength(options)) > buflen)
000018  4620              MOV      r0,r4
00001a  f7fffffe          BL       MQTTSerialize_connectLength
00001e  4607              MOV      r7,r0
000020  4681              MOV      r9,r0
000022  f7fffffe          BL       MQTTPacket_len
000026  42b0              CMP      r0,r6
000028  dd02              BLE      |L2.48|
;;;68     	{
;;;69     		rc = MQTTPACKET_BUFFER_TOO_SHORT;
00002a  f06f0801          MVN      r8,#1
;;;70     		goto exit;
00002e  e08f              B        |L2.336|
                  |L2.48|
;;;71     	}
;;;72     
;;;73     	header.byte = 0;
000030  2000              MOVS     r0,#0
000032  f88d0004          STRB     r0,[sp,#4]
;;;74     	header.bits.type = CONNECT;
000036  9801              LDR      r0,[sp,#4]
000038  f02000f0          BIC      r0,r0,#0xf0
00003c  3010              ADDS     r0,r0,#0x10
00003e  9001              STR      r0,[sp,#4]
;;;75     	writeChar(&ptr, header.byte); /* write header */
000040  f89d1004          LDRB     r1,[sp,#4]
000044  a802              ADD      r0,sp,#8
000046  f7fffffe          BL       writeChar
;;;76     
;;;77     	ptr += MQTTPacket_encode(ptr, len); /* write remaining length */
00004a  4639              MOV      r1,r7
00004c  9802              LDR      r0,[sp,#8]
00004e  f7fffffe          BL       MQTTPacket_encode
000052  9902              LDR      r1,[sp,#8]
000054  4408              ADD      r0,r0,r1
000056  9002              STR      r0,[sp,#8]
;;;78     
;;;79     	if (options->MQTTVersion == 4)
000058  7a20              LDRB     r0,[r4,#8]
00005a  2804              CMP      r0,#4
00005c  d108              BNE      |L2.112|
;;;80     	{
;;;81     		writeCString(&ptr, "MQTT");
00005e  a13e              ADR      r1,|L2.344|
000060  a802              ADD      r0,sp,#8
000062  f7fffffe          BL       writeCString
;;;82     		writeChar(&ptr, (char) 4);
000066  2104              MOVS     r1,#4
000068  a802              ADD      r0,sp,#8
00006a  f7fffffe          BL       writeChar
00006e  e007              B        |L2.128|
                  |L2.112|
;;;83     	}
;;;84     	else
;;;85     	{
;;;86     		writeCString(&ptr, "MQIsdp");
000070  a13b              ADR      r1,|L2.352|
000072  a802              ADD      r0,sp,#8
000074  f7fffffe          BL       writeCString
;;;87     		writeChar(&ptr, (char) 3);
000078  2103              MOVS     r1,#3
00007a  a802              ADD      r0,sp,#8
00007c  f7fffffe          BL       writeChar
                  |L2.128|
;;;88     	}
;;;89     
;;;90     	flags.all = 0;
000080  2000              MOVS     r0,#0
000082  f88d0000          STRB     r0,[sp,#0]
;;;91     	flags.bits.cleansession = options->cleansession;
000086  7ea1              LDRB     r1,[r4,#0x1a]
000088  9800              LDR      r0,[sp,#0]
00008a  f3610041          BFI      r0,r1,#1,#1
00008e  9000              STR      r0,[sp,#0]
;;;92     	flags.bits.will = (options->willFlag) ? 1 : 0;
000090  7ee0              LDRB     r0,[r4,#0x1b]
000092  b108              CBZ      r0,|L2.152|
000094  2101              MOVS     r1,#1
000096  e000              B        |L2.154|
                  |L2.152|
000098  2100              MOVS     r1,#0
                  |L2.154|
00009a  9800              LDR      r0,[sp,#0]
00009c  f3610082          BFI      r0,r1,#2,#1
0000a0  9000              STR      r0,[sp,#0]
;;;93     	if (flags.bits.will)
0000a2  9800              LDR      r0,[sp,#0]
0000a4  f3c00080          UBFX     r0,r0,#2,#1
0000a8  b158              CBZ      r0,|L2.194|
;;;94     	{
;;;95     		flags.bits.willQoS = options->will.qos;
0000aa  f894103d          LDRB     r1,[r4,#0x3d]
0000ae  9800              LDR      r0,[sp,#0]
0000b0  f36100c4          BFI      r0,r1,#3,#2
0000b4  9000              STR      r0,[sp,#0]
;;;96     		flags.bits.willRetain = options->will.retained;
0000b6  f894103c          LDRB     r1,[r4,#0x3c]
0000ba  9800              LDR      r0,[sp,#0]
0000bc  f3611045          BFI      r0,r1,#5,#1
0000c0  9000              STR      r0,[sp,#0]
                  |L2.194|
;;;97     	}
;;;98     
;;;99     	if (options->username.cstring || options->username.lenstring.data)
0000c2  6c20              LDR      r0,[r4,#0x40]
0000c4  b908              CBNZ     r0,|L2.202|
0000c6  6ca0              LDR      r0,[r4,#0x48]
0000c8  b120              CBZ      r0,|L2.212|
                  |L2.202|
;;;100    		flags.bits.username = 1;
0000ca  9800              LDR      r0,[sp,#0]
0000cc  f0200080          BIC      r0,r0,#0x80
0000d0  3080              ADDS     r0,r0,#0x80
0000d2  9000              STR      r0,[sp,#0]
                  |L2.212|
;;;101    	if (options->password.cstring || options->password.lenstring.data)
0000d4  6ce0              LDR      r0,[r4,#0x4c]
0000d6  b908              CBNZ     r0,|L2.220|
0000d8  6d60              LDR      r0,[r4,#0x54]
0000da  b120              CBZ      r0,|L2.230|
                  |L2.220|
;;;102    		flags.bits.password = 1;
0000dc  9800              LDR      r0,[sp,#0]
0000de  f0200040          BIC      r0,r0,#0x40
0000e2  3040              ADDS     r0,r0,#0x40
0000e4  9000              STR      r0,[sp,#0]
                  |L2.230|
;;;103    
;;;104    	writeChar(&ptr, flags.all);
0000e6  f89d1000          LDRB     r1,[sp,#0]
0000ea  a802              ADD      r0,sp,#8
0000ec  f7fffffe          BL       writeChar
;;;105    	writeInt(&ptr, options->keepAliveInterval);
0000f0  8b21              LDRH     r1,[r4,#0x18]
0000f2  a802              ADD      r0,sp,#8
0000f4  f7fffffe          BL       writeInt
;;;106    	writeMQTTString(&ptr, options->clientID);
0000f8  a802              ADD      r0,sp,#8
0000fa  e9d42304          LDRD     r2,r3,[r4,#0x10]
0000fe  68e1              LDR      r1,[r4,#0xc]
000100  f7fffffe          BL       writeMQTTString
;;;107    	if (options->willFlag)
000104  7ee0              LDRB     r0,[r4,#0x1b]
000106  b158              CBZ      r0,|L2.288|
;;;108    	{
;;;109    		writeMQTTString(&ptr, options->will.topicName);
000108  a802              ADD      r0,sp,#8
00010a  e9d4230a          LDRD     r2,r3,[r4,#0x28]
00010e  6a61              LDR      r1,[r4,#0x24]
000110  f7fffffe          BL       writeMQTTString
;;;110    		writeMQTTString(&ptr, options->will.message);
000114  a802              ADD      r0,sp,#8
000116  e9d4230d          LDRD     r2,r3,[r4,#0x34]
00011a  6b21              LDR      r1,[r4,#0x30]
00011c  f7fffffe          BL       writeMQTTString
                  |L2.288|
;;;111    	}
;;;112    	if (flags.bits.username)
000120  9800              LDR      r0,[sp,#0]
000122  f3c010c0          UBFX     r0,r0,#7,#1
000126  b128              CBZ      r0,|L2.308|
;;;113    		writeMQTTString(&ptr, options->username);
000128  a802              ADD      r0,sp,#8
00012a  e9d42311          LDRD     r2,r3,[r4,#0x44]
00012e  6c21              LDR      r1,[r4,#0x40]
000130  f7fffffe          BL       writeMQTTString
                  |L2.308|
;;;114    	if (flags.bits.password)
000134  9800              LDR      r0,[sp,#0]
000136  f3c01080          UBFX     r0,r0,#6,#1
00013a  b128              CBZ      r0,|L2.328|
;;;115    		writeMQTTString(&ptr, options->password);
00013c  a802              ADD      r0,sp,#8
00013e  e9d42314          LDRD     r2,r3,[r4,#0x50]
000142  6ce1              LDR      r1,[r4,#0x4c]
000144  f7fffffe          BL       writeMQTTString
                  |L2.328|
;;;116    
;;;117    	rc = ptr - buf;
000148  9802              LDR      r0,[sp,#8]
00014a  eba00805          SUB      r8,r0,r5
;;;118    
;;;119    	exit: FUNC_EXIT_RC(rc);
00014e  bf00              NOP      
                  |L2.336|
;;;120    	return rc;
000150  4640              MOV      r0,r8
;;;121    }
000152  e8bd83fe          POP      {r1-r9,pc}
;;;122    
                          ENDP

000156  0000              DCW      0x0000
                  |L2.344|
000158  4d515454          DCB      "MQTT",0
00015c  00      
00015d  00                DCB      0
00015e  00                DCB      0
00015f  00                DCB      0
                  |L2.352|
000160  4d514973          DCB      "MQIsdp",0
000164  647000  
000167  00                DCB      0

                          AREA ||i.MQTTSerialize_connectLength||, CODE, READONLY, ALIGN=1

                  MQTTSerialize_connectLength PROC
;;;26       */
;;;27     int MQTTSerialize_connectLength(MQTTPacket_connectData* options)
000000  b570              PUSH     {r4-r6,lr}
;;;28     {
000002  4604              MOV      r4,r0
;;;29     	int len = 0;
000004  2500              MOVS     r5,#0
;;;30     
;;;31     	FUNC_ENTRY;
;;;32     
;;;33     	if (options->MQTTVersion == 3)
000006  7a20              LDRB     r0,[r4,#8]
000008  2803              CMP      r0,#3
00000a  d101              BNE      |L3.16|
;;;34     		len = 12; /* variable depending on MQTT or MQIsdp */
00000c  250c              MOVS     r5,#0xc
00000e  e003              B        |L3.24|
                  |L3.16|
;;;35     	else if (options->MQTTVersion == 4)
000010  7a20              LDRB     r0,[r4,#8]
000012  2804              CMP      r0,#4
000014  d100              BNE      |L3.24|
;;;36     		len = 10;
000016  250a              MOVS     r5,#0xa
                  |L3.24|
;;;37     
;;;38     	len += MQTTstrlen(options->clientID)+2;
000018  e9d41204          LDRD     r1,r2,[r4,#0x10]
00001c  68e0              LDR      r0,[r4,#0xc]
00001e  f7fffffe          BL       MQTTstrlen
000022  1c80              ADDS     r0,r0,#2
000024  4405              ADD      r5,r5,r0
;;;39     	if (options->willFlag)
000026  7ee0              LDRB     r0,[r4,#0x1b]
000028  b168              CBZ      r0,|L3.70|
;;;40     		len += MQTTstrlen(options->will.topicName)+2 + MQTTstrlen(options->will.message)+2;
00002a  e9d4120a          LDRD     r1,r2,[r4,#0x28]
00002e  6a60              LDR      r0,[r4,#0x24]
000030  f7fffffe          BL       MQTTstrlen
000034  1c86              ADDS     r6,r0,#2
000036  e9d4120d          LDRD     r1,r2,[r4,#0x34]
00003a  6b20              LDR      r0,[r4,#0x30]
00003c  f7fffffe          BL       MQTTstrlen
000040  4430              ADD      r0,r0,r6
000042  1c80              ADDS     r0,r0,#2
000044  4405              ADD      r5,r5,r0
                  |L3.70|
;;;41     	if (options->username.cstring || options->username.lenstring.data)
000046  6c20              LDR      r0,[r4,#0x40]
000048  b908              CBNZ     r0,|L3.78|
00004a  6ca0              LDR      r0,[r4,#0x48]
00004c  b130              CBZ      r0,|L3.92|
                  |L3.78|
;;;42     		len += MQTTstrlen(options->username)+2;
00004e  e9d41211          LDRD     r1,r2,[r4,#0x44]
000052  6c20              LDR      r0,[r4,#0x40]
000054  f7fffffe          BL       MQTTstrlen
000058  1c80              ADDS     r0,r0,#2
00005a  4405              ADD      r5,r5,r0
                  |L3.92|
;;;43     	if (options->password.cstring || options->password.lenstring.data)
00005c  6ce0              LDR      r0,[r4,#0x4c]
00005e  b908              CBNZ     r0,|L3.100|
000060  6d60              LDR      r0,[r4,#0x54]
000062  b130              CBZ      r0,|L3.114|
                  |L3.100|
;;;44     		len += MQTTstrlen(options->password)+2;
000064  e9d41214          LDRD     r1,r2,[r4,#0x50]
000068  6ce0              LDR      r0,[r4,#0x4c]
00006a  f7fffffe          BL       MQTTstrlen
00006e  1c80              ADDS     r0,r0,#2
000070  4405              ADD      r5,r5,r0
                  |L3.114|
;;;45     
;;;46     	FUNC_EXIT_RC(len);
;;;47     	return len;
000072  4628              MOV      r0,r5
;;;48     }
000074  bd70              POP      {r4-r6,pc}
;;;49     
                          ENDP


                          AREA ||i.MQTTSerialize_disconnect||, CODE, READONLY, ALIGN=1

                  MQTTSerialize_disconnect PROC
;;;198      */
;;;199    int MQTTSerialize_disconnect(unsigned char* buf, int buflen)
000000  b570              PUSH     {r4-r6,lr}
;;;200    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;201    	return MQTTSerialize_zero(buf, buflen, DISCONNECT);
000006  220e              MOVS     r2,#0xe
000008  4629              MOV      r1,r5
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       MQTTSerialize_zero
;;;202    }
000010  bd70              POP      {r4-r6,pc}
;;;203    
                          ENDP


                          AREA ||i.MQTTSerialize_pingreq||, CODE, READONLY, ALIGN=1

                  MQTTSerialize_pingreq PROC
;;;210      */
;;;211    int MQTTSerialize_pingreq(unsigned char* buf, int buflen)
000000  b570              PUSH     {r4-r6,lr}
;;;212    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;213    	return MQTTSerialize_zero(buf, buflen, PINGREQ);
000006  220c              MOVS     r2,#0xc
000008  4629              MOV      r1,r5
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       MQTTSerialize_zero
;;;214    }
000010  bd70              POP      {r4-r6,pc}
                          ENDP


                          AREA ||i.MQTTSerialize_zero||, CODE, READONLY, ALIGN=1

                  MQTTSerialize_zero PROC
;;;168      */
;;;169    int MQTTSerialize_zero(unsigned char* buf, int buflen, unsigned char packettype)
000000  e92d41fc          PUSH     {r2-r8,lr}
;;;170    {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
;;;171    	MQTTHeader header = {0};
00000a  2000              MOVS     r0,#0
00000c  9001              STR      r0,[sp,#4]
;;;172    	int rc = -1;
00000e  1e47              SUBS     r7,r0,#1
;;;173    	unsigned char *ptr = buf;
000010  9400              STR      r4,[sp,#0]
;;;174    
;;;175    	FUNC_ENTRY;
;;;176    	if (buflen < 2)
000012  2d02              CMP      r5,#2
000014  da01              BGE      |L6.26|
;;;177    	{
;;;178    		rc = MQTTPACKET_BUFFER_TOO_SHORT;
000016  1e87              SUBS     r7,r0,#2
;;;179    		goto exit;
000018  e015              B        |L6.70|
                  |L6.26|
;;;180    	}
;;;181    	header.byte = 0;
00001a  2000              MOVS     r0,#0
00001c  f88d0004          STRB     r0,[sp,#4]
;;;182    	header.bits.type = packettype;
000020  9801              LDR      r0,[sp,#4]
000022  f3661007          BFI      r0,r6,#4,#4
000026  9001              STR      r0,[sp,#4]
;;;183    	writeChar(&ptr, header.byte); /* write header */
000028  f89d1004          LDRB     r1,[sp,#4]
00002c  4668              MOV      r0,sp
00002e  f7fffffe          BL       writeChar
;;;184    
;;;185    	ptr += MQTTPacket_encode(ptr, 0); /* write remaining length */
000032  2100              MOVS     r1,#0
000034  9800              LDR      r0,[sp,#0]
000036  f7fffffe          BL       MQTTPacket_encode
00003a  9900              LDR      r1,[sp,#0]
00003c  4408              ADD      r0,r0,r1
00003e  9000              STR      r0,[sp,#0]
;;;186    	rc = ptr - buf;
000040  9800              LDR      r0,[sp,#0]
000042  1b07              SUBS     r7,r0,r4
;;;187    exit:
000044  bf00              NOP      
                  |L6.70|
;;;188    	FUNC_EXIT_RC(rc);
;;;189    	return rc;
000046  4638              MOV      r0,r7
;;;190    }
000048  e8bd81fc          POP      {r2-r8,pc}
;;;191    
                          ENDP

